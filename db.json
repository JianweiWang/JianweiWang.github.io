{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1636270049669},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1636270049669},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1636270049677},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1636270049669},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1636270049669},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1636270049669},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1636270049669},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1636270049670},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1636270049670},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1636270049670},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1636270049670},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1636270049670},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1636270049670},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1636270049670},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1636270049671},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1636270049671},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1636270049671},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1636270049676},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1636270049676},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1636270049675},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1636270049676},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1636270049676},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1636270049676},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1636270049677},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1636270049676},{"_id":"source/_posts/20201104.md","hash":"243cfb1e15d59299976d12b35f77bfaf044c808d","modified":1636270049658},{"_id":"source/_posts/20201108.md","hash":"5a04d3ea32cca5d527a45ecd444430d63a17f8f9","modified":1636270049658},{"_id":"source/_posts/DNS-Cache-In-Linux.md","hash":"13cf449960b779d7bf50c27f537be683d5281c26","modified":1636270049659},{"_id":"source/_posts/Network-Model-in-Kubernetes.md","hash":"9e3c80e35bc747d83311029c8fbd2f7af3e7a110","modified":1636270049659},{"_id":"source/_posts/Service-And-Kube-proxy.md","hash":"c55a97b2d4dc913a70dae566e62fbd105ef8bda5","modified":1636270049660},{"_id":"source/_posts/about.md","hash":"4e211a45dee123f6b5151bdc36be3dbf23698329","modified":1636270049665},{"_id":"source/_posts/golang-learning-01.md","hash":"adcf761eeaf516945c55afc1eb547d9f13068f46","modified":1636270049666},{"_id":"source/_posts/how-to-read-a-book.md","hash":"6ce5085698ee666e54af8c9f34103fde790b8977","modified":1636270049666},{"_id":"source/_posts/leetcode01.md","hash":"67220766b7f27b1892fc7a0166443d34a7b91366","modified":1636270049666},{"_id":"source/_posts/leetcode02.md","hash":"058c49cc10441a266f0847c1dccf4b0fce222643","modified":1636270049666},{"_id":"source/_posts/leetcode03.md","hash":"fe37ca72918ae05e63cb360f412459e3ceae606c","modified":1636270049667},{"_id":"source/_posts/leetcode04.md","hash":"e811f3a7befea21ba9ea530d20215bb1a1ab15f4","modified":1636270049667},{"_id":"source/_posts/linux-strace-command-introduction.md","hash":"c9a95b820279c2d57fdcadf4c47ca457dca8cfdb","modified":1636270049667},{"_id":"source/_posts/薛兆丰经济学讲义读书笔记1.md","hash":"0caa3f511b9afd404ce51cee4609b2863a95f3fd","modified":1636270049667},{"_id":"source/categories/index.md","hash":"6e949a810bc45814cfeee210b298ef2daec42deb","modified":1636270049668},{"_id":"source/_posts/薛兆丰经济学讲义读书笔记2.md","hash":"e39f327ca991fd5364da98e830dbe475aa10fe35","modified":1636270049667},{"_id":"source/about/index.md","hash":"7ee5649f10ed93fa5bf4c13ffe94ef3205e50993","modified":1636270049667},{"_id":"source/tags/index.md","hash":"b06ba13349d5c83f4db865b7d68b7f572c123850","modified":1636270049668},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1636270049677},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1636270049679},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1636270049683},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1636270049684},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1636270049683},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1636270049684},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1636270049684},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1636270049684},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1636270049685},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1636270049686},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1636270049684},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1636270049686},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1636270049686},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1636270049671},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1636270049672},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1636270049672},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1636270049672},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1636270049672},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1636270049672},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1636270049672},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1636270049673},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1636270049673},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1636270049673},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1636270049674},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1636270049674},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1636270049675},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1636270049675},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1636270049675},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1636270049675},{"_id":"source/_posts/20201108/20201108-27fff154.png","hash":"94440bd3318f85ccfcb3b5a243a4111e95f6333c","modified":1636270049659},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-02d62faa.png","hash":"79a58615dcc1f621de66fb31206a569abe483ba9","modified":1636270049661},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-90b65a4a.png","hash":"c75a95ceba88cc7a5b68698c2a403b2475c2ecc0","modified":1636270049664},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-4afab240.png","hash":"491a0f6865ddbeab519c405758282ae65948317c","modified":1636270049662},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-9bf039d8.png","hash":"3f20b732fa711033c859624c66787e762f2f8782","modified":1636270049664},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-9a3a490b.png","hash":"6285b2407939dc17a2eb5a0aa5aebe2eda57457e","modified":1636270049664},{"_id":"source/_posts/assets/20201108-1af71d81.png","hash":"04cf2ab77f66ac3453ed89e6d1eaeb8ec85e3d0d","modified":1636270049665},{"_id":"source/_posts/assets/Service-And-Kube-proxy-a219618a.png","hash":"a039f95572d93a7a14956da19c4ffb72c3f6ce22","modified":1636270049666},{"_id":"source/_posts/Network-Model-in-Kubernetes/Network-Model-in-Kubernetes-6c165903.png","hash":"671aefe0b91342cfcadc87b64545fdc41ba08427","modified":1636270049660},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-323364fe.png","hash":"81ab8ca6d1d1ed2f1104998b5ea7f8c8cc9eb4e0","modified":1636270049661},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-6cc5b0ce.png","hash":"7cb37151a236268fa1484713eb8a7829363f5748","modified":1636270049662},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-d314f07b.png","hash":"0703aefb7e3dd48c48dfad6d4a728f13b47c4e09","modified":1636270049665},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1636270049678},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1636270049677},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1636270049678},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1636270049678},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1636270049678},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1636270049678},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1636270049678},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1636270049679},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1636270049679},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1636270049679},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1636270049680},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1636270049680},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1636270049682},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1636270049679},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1636270049679},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1636270049685},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1636270049685},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1636270049685},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1636270049685},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1636270049685},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1636270049685},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1636270049673},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1636270049674},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1636270049673},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1636270049674},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1636270049674},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1636270049674},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1636270049682},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-74a4dc02.png","hash":"c1302b1886affaf6566687a1ddb5a03e7d9d10bb","modified":1636270049663},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1636270049681},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1636270049683},{"_id":"public/categories/index.html","hash":"074e351fab7fa49d23932404ceb587ce8fb9a948","modified":1636279912967},{"_id":"public/about/index.html","hash":"2f751981fd58de77c49a3d5ccc317a6f2aa13c7f","modified":1636279912967},{"_id":"public/tags/index.html","hash":"2b569d3428eb81046a080485c71f828502ab9224","modified":1636279912967},{"_id":"public/2020/11/08/20201108/index.html","hash":"6d718f0c9f2593e1dda0f437e8c7a30a924cdbfd","modified":1636279912968},{"_id":"public/2020/11/05/20201104/index.html","hash":"f09055bb5cc71f7f6285017fb731773ba5c6c3e4","modified":1636279912968},{"_id":"public/2019/05/04/leetcode03/index.html","hash":"0d1a3cdcaff0215258c664c227412ba600562360","modified":1636279912968},{"_id":"public/2019/03/10/薛兆丰经济学讲义读书笔记2/index.html","hash":"96a9a7fa5546d8cdbd892633eb887ba9ff5abdb8","modified":1636279912969},{"_id":"public/2019/03/06/薛兆丰经济学讲义读书笔记1/index.html","hash":"bb099da897c70bf89ce126d01cf597141b22a69a","modified":1636279912969},{"_id":"public/2019/03/06/about/index.html","hash":"729d2fb789026d94a2e00e467cc0e85dd8bea078","modified":1636279912969},{"_id":"public/2019/03/06/how-to-read-a-book/index.html","hash":"31c5f3ff20476c621d488b3c7b37ffdc9a3ab1a6","modified":1636279912969},{"_id":"public/2018/05/28/DNS-Cache-In-Linux/index.html","hash":"7eb58820640b3e5800993801a37c1f353b18a0b6","modified":1636279912969},{"_id":"public/2018/05/27/Service-And-Kube-proxy/index.html","hash":"cb6caa5c68d61db3b1203e0f4b47c1d4f16d25ae","modified":1636279912969},{"_id":"public/2018/05/27/Network-Model-in-Kubernetes/index.html","hash":"aa27ed170a7fc11d4227db9aa4f7666e6a7faa76","modified":1636279912969},{"_id":"public/categories/算法/index.html","hash":"f0337593407a1099790bcf4f48db50bc8707b361","modified":1636279912969},{"_id":"public/categories/reading/index.html","hash":"eb1e8d0c4b0bebd7dd71906670fb9626c3dbf968","modified":1636279912969},{"_id":"public/archives/index.html","hash":"798f6101bddb36b120f665406c3cfe07e47c5a87","modified":1636279912969},{"_id":"public/archives/page/2/index.html","hash":"099f5fc56ce5bf27e31671be42e3528d722353dd","modified":1636279912974},{"_id":"public/archives/2018/index.html","hash":"f751bb706805d3794d600d4b676a99c2c5014a56","modified":1636279912974},{"_id":"public/archives/2018/05/index.html","hash":"29e985e3bc627ce13fe60f01d503bfdc1f7afe80","modified":1636279912974},{"_id":"public/archives/2019/index.html","hash":"655da32e486693d8ad09eec73246cfebf6727708","modified":1636279912974},{"_id":"public/archives/2019/03/index.html","hash":"c6e191a0dfa46fc21eb12106b32994604c814aa3","modified":1636279912975},{"_id":"public/archives/2019/05/index.html","hash":"2b7bbbed8048a0683656443dada19e069b03e1aa","modified":1636279912975},{"_id":"public/archives/2020/index.html","hash":"a2405d57c4ee6de6d2053107d431d6254d4ea10f","modified":1636279912975},{"_id":"public/archives/2020/11/index.html","hash":"31280b298a77d04e06cda85ff6c904a44f385444","modified":1636279912975},{"_id":"public/tags/something-of-everyday/index.html","hash":"bd2def9827b8651cff585e92685f057810b23ea5","modified":1636279912975},{"_id":"public/tags/kubernetes-Network/index.html","hash":"e2fb7ff43909476c8c20794b1f1bcbbe6f2780d7","modified":1636279912975},{"_id":"public/tags/service/index.html","hash":"40c1dfba8861eb5b1c39b6237d2fbf7f6c89c807","modified":1636279912975},{"_id":"public/tags/LeetCode/index.html","hash":"996b7372b97e05c2b37373d7cf0c0ece25c7098d","modified":1636279912975},{"_id":"public/tags/golang/index.html","hash":"e8ecb744e4dcfa8b292c4a73165c9e07597232e5","modified":1636279912975},{"_id":"public/tags/读书/index.html","hash":"f25d674612d4dd31830a9f65a09f08eda1105d43","modified":1636279912975},{"_id":"public/tags/alogrithm/index.html","hash":"ec5467d7ec5497ec2967ec345b8876fcf7cbc827","modified":1636279912975},{"_id":"public/tags/linux-perf-tools/index.html","hash":"e48c9b0601d9b43c7dcf24b7f110774196e6955c","modified":1636279912975},{"_id":"public/page/2/index.html","hash":"b80e8daba9dac2e06faeb131f53da49f022c7539","modified":1636279912975},{"_id":"public/2020/11/14/leetcode04/index.html","hash":"d47e8c8cab1fea4683c6ad19ac8ca860dcaac8bf","modified":1636279912975},{"_id":"public/2019/05/27/linux-strace-command-introduction/index.html","hash":"b4c61a82f3e0aa4fa36f5b24bce64ffad99f99e2","modified":1636279912975},{"_id":"public/2019/05/26/golang-learning-01/index.html","hash":"6a7aa91808e84194e274fd6dfb72f334b44cd870","modified":1636279912975},{"_id":"public/2019/05/04/leetcode02/index.html","hash":"534dad828bb720194e9a333b4b0067231dff33c4","modified":1636279912975},{"_id":"public/2019/05/04/leetcode01/index.html","hash":"ea824181c4f992339e10d480c7bf5d83f14df923","modified":1636279912976},{"_id":"public/index.html","hash":"5bac3702e24aadbb51aaad26814e6a37ad6bf49f","modified":1636279912976},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1636279912979},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1636279912979},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1636279912980},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1636279912980},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1636279912980},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1636279912980},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1636279912980},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1636279912980},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1636279912980},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1636279912980},{"_id":"public/2020/11/08/20201108/20201108-27fff154.png","hash":"94440bd3318f85ccfcb3b5a243a4111e95f6333c","modified":1636279912980},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-02d62faa.png","hash":"79a58615dcc1f621de66fb31206a569abe483ba9","modified":1636279912980},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-4afab240.png","hash":"491a0f6865ddbeab519c405758282ae65948317c","modified":1636279912980},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-90b65a4a.png","hash":"c75a95ceba88cc7a5b68698c2a403b2475c2ecc0","modified":1636279912980},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-9bf039d8.png","hash":"3f20b732fa711033c859624c66787e762f2f8782","modified":1636279912980},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1636279913379},{"_id":"public/2018/05/27/Network-Model-in-Kubernetes/Network-Model-in-Kubernetes-6c165903.png","hash":"671aefe0b91342cfcadc87b64545fdc41ba08427","modified":1636279913380},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-6cc5b0ce.png","hash":"7cb37151a236268fa1484713eb8a7829363f5748","modified":1636279913381},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-9a3a490b.png","hash":"6285b2407939dc17a2eb5a0aa5aebe2eda57457e","modified":1636279913381},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-d314f07b.png","hash":"0703aefb7e3dd48c48dfad6d4a728f13b47c4e09","modified":1636279913381},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1636279913384},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1636279913384},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1636279913384},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1636279913384},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1636279913384},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1636279913384},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1636279913385},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1636279913385},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1636279913385},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1636279913385},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-323364fe.png","hash":"81ab8ca6d1d1ed2f1104998b5ea7f8c8cc9eb4e0","modified":1636279913385},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1636279913390},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-74a4dc02.png","hash":"c1302b1886affaf6566687a1ddb5a03e7d9d10bb","modified":1636279913392},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1636279913395}],"Category":[{"name":"算法","_id":"ckvp2t8uq000fhasg35zvob3c"},{"name":"reading","_id":"ckvp2t8v0000vhasg8fb2bw9v"}],"Data":[],"Page":[{"title":"文章分类","date":"2021-04-17T08:20:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2021-04-17 16:20:55\ntype: \"categories\"\n---\n","updated":"2021-11-07T07:27:29.668Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckvp2t8u70001hasgahaomei5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-03-06T15:01:17.000Z","_content":"正己，Java 菜鸟工程师，就职于淘宝。\n\nEmail：786594722@qq.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-03-06 23:01:17\n---\n正己，Java 菜鸟工程师，就职于淘宝。\n\nEmail：786594722@qq.com\n","updated":"2021-11-07T07:27:29.667Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckvp2t8u90003hasg335ua7oi","content":"<p>正己，Java 菜鸟工程师，就职于淘宝。</p>\n<p>Email：<a href=\"mailto:786594722@qq.com\" target=\"_blank\" rel=\"noopener\">786594722@qq.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>正己，Java 菜鸟工程师，就职于淘宝。</p>\n<p>Email：<a href=\"mailto:786594722@qq.com\" target=\"_blank\" rel=\"noopener\">786594722@qq.com</a></p>\n"},{"title":"标签","date":"2021-04-17T08:25:12.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-04-17 16:25:12\ntype: \"tags\"\n---\n","updated":"2021-11-07T07:27:29.668Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckvp2t8v50015hasgtropmcdz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"20201104","date":"2020-11-04T16:15:17.000Z","_content":"\n## 每日一记（1）\n设计系统时，如何正确高效地运用并发是一个比较难的问题。以我个人的经验看，大概可以分为以下几个原则：\n\n* 多读单写，单个线程修改，多条线程读取（一般采用队列方式），适用于读多写少的场景；\n* 多读多写；多条线程同时读写。这种场景比较复杂，可以采用锁或者hash机制；\n","source":"_posts/20201104.md","raw":"---\ntitle: 20201104\ndate: 2020-11-05 00:15:17\ntags: something of everyday\n---\n\n## 每日一记（1）\n设计系统时，如何正确高效地运用并发是一个比较难的问题。以我个人的经验看，大概可以分为以下几个原则：\n\n* 多读单写，单个线程修改，多条线程读取（一般采用队列方式），适用于读多写少的场景；\n* 多读多写；多条线程同时读写。这种场景比较复杂，可以采用锁或者hash机制；\n","slug":"20201104","published":1,"updated":"2021-11-07T07:27:29.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8u20000hasgev0stmgu","content":"<h2 id=\"每日一记（1）\"><a href=\"#每日一记（1）\" class=\"headerlink\" title=\"每日一记（1）\"></a>每日一记（1）</h2><p>设计系统时，如何正确高效地运用并发是一个比较难的问题。以我个人的经验看，大概可以分为以下几个原则：</p>\n<ul>\n<li>多读单写，单个线程修改，多条线程读取（一般采用队列方式），适用于读多写少的场景；</li>\n<li>多读多写；多条线程同时读写。这种场景比较复杂，可以采用锁或者hash机制；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"每日一记（1）\"><a href=\"#每日一记（1）\" class=\"headerlink\" title=\"每日一记（1）\"></a>每日一记（1）</h2><p>设计系统时，如何正确高效地运用并发是一个比较难的问题。以我个人的经验看，大概可以分为以下几个原则：</p>\n<ul>\n<li>多读单写，单个线程修改，多条线程读取（一般采用队列方式），适用于读多写少的场景；</li>\n<li>多读多写；多条线程同时读写。这种场景比较复杂，可以采用锁或者hash机制；</li>\n</ul>\n"},{"title":"20201108","date":"2020-11-08T14:16:44.000Z","_content":"\n## hexo无法展示的问题\n\n前几天遇到了一个问题：博客完成后本地预览没问题，hexo deploy也正常，但是博客网站无法显示最新博客。\n\n<!---more -->\n\n### 现象\n\n如前所述，新部署的博客无法正常展示，进入博客详情页面会显示404；\n\n### 原因\n\ngithub pages配置的source有问题，当前配置为了hexo分支，如图下图。但是，在deploy时提交到了master分支，导致无法显示最新博客；\n\n![](20201108-27fff154.png)\n\n### 解决方案\n修改GitHub pages source配置，改为master即可；\n\n### 总结\n出现这个问题的本质原因还是对GitHub Pages工作原理不甚了解。特此记录一下，希望对其他人有帮助。\n","source":"_posts/20201108.md","raw":"---\ntitle: 20201108\ndate: 2020-11-08 22:16:44\ntags: something of everyday\n---\n\n## hexo无法展示的问题\n\n前几天遇到了一个问题：博客完成后本地预览没问题，hexo deploy也正常，但是博客网站无法显示最新博客。\n\n<!---more -->\n\n### 现象\n\n如前所述，新部署的博客无法正常展示，进入博客详情页面会显示404；\n\n### 原因\n\ngithub pages配置的source有问题，当前配置为了hexo分支，如图下图。但是，在deploy时提交到了master分支，导致无法显示最新博客；\n\n![](20201108-27fff154.png)\n\n### 解决方案\n修改GitHub pages source配置，改为master即可；\n\n### 总结\n出现这个问题的本质原因还是对GitHub Pages工作原理不甚了解。特此记录一下，希望对其他人有帮助。\n","slug":"20201108","published":1,"updated":"2021-11-07T07:27:29.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8u80002hasghuvq74hu","content":"<h2 id=\"hexo无法展示的问题\"><a href=\"#hexo无法展示的问题\" class=\"headerlink\" title=\"hexo无法展示的问题\"></a>hexo无法展示的问题</h2><p>前几天遇到了一个问题：博客完成后本地预览没问题，hexo deploy也正常，但是博客网站无法显示最新博客。</p>\n<a id=\"more\"></a>\n<h3 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h3><p>如前所述，新部署的博客无法正常展示，进入博客详情页面会显示404；</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>github pages配置的source有问题，当前配置为了hexo分支，如图下图。但是，在deploy时提交到了master分支，导致无法显示最新博客；</p>\n<p><img src=\"20201108-27fff154.png\" alt=\"\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>修改GitHub pages source配置，改为master即可；</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>出现这个问题的本质原因还是对GitHub Pages工作原理不甚了解。特此记录一下，希望对其他人有帮助。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"hexo无法展示的问题\"><a href=\"#hexo无法展示的问题\" class=\"headerlink\" title=\"hexo无法展示的问题\"></a>hexo无法展示的问题</h2><p>前几天遇到了一个问题：博客完成后本地预览没问题，hexo deploy也正常，但是博客网站无法显示最新博客。</p>","more":"<h3 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h3><p>如前所述，新部署的博客无法正常展示，进入博客详情页面会显示404；</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>github pages配置的source有问题，当前配置为了hexo分支，如图下图。但是，在deploy时提交到了master分支，导致无法显示最新博客；</p>\n<p><img src=\"20201108-27fff154.png\" alt=\"\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>修改GitHub pages source配置，改为master即可；</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>出现这个问题的本质原因还是对GitHub Pages工作原理不甚了解。特此记录一下，希望对其他人有帮助。</p>"},{"title":"DNS Cache In Linux","date":"2018-05-28T11:42:03.000Z","_content":"","source":"_posts/DNS-Cache-In-Linux.md","raw":"---\ntitle: DNS Cache In Linux\ndate: 2018-05-28 19:42:03\ntags:\n---\n","slug":"DNS-Cache-In-Linux","published":1,"updated":"2021-11-07T07:27:29.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8uc0005hasgxy0favq0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Network Model in Kubernetes","date":"2018-05-27T11:00:45.000Z","_content":"本文主要剖析kubernetes中网络模型，详细介绍pod之间的通信流程。\n\n## 网络模型概况\n### kubernetes对网络的要求\n* 所有的容器都可以在不用NAT的方式下同别的容器通信\n* 所有容器节点都可以在不用NAT的方式下同所有容器通信\n* 容器的地址和别人看到的地址是同一个地址\n<!--more-->\n### kubernetes的网络场景\n* 容器间直接通信\n\n  同一个pod中，不通容器共享一个网络命名空间，共享同一个Linux协议栈，可以直接通过localhost通信。\n* 同一个Node上pod间的通信\n\n  同一个Node内，不同的Pod都有一个全局IP，可以直接通过Pod的IP进行通信。Pod地址和docker0在同一个网段\n\n* 不同Node上的pod间通信\n\n  docker0网桥与宿主机网卡是两个完全不同的IP网段，并且Node之间的通信只能通过宿主机的物理网卡进行，因此要想实现位于不同Node上的Pod容器之间的通信，就必须想办法通过主机的IP地址进行寻址和通信。Kubernetes会记录所有正在运行的Pod的IP分配信息，并且将这些信息保存在etcd中（作为service的Endpoint）。\n\n  因此，实现不同Node上pod之间的通信，需要两个条件\n    * pod IP做整体规划，整个kubernetes集群内的pod IP不能有冲突，一般通过第三方开源工具管理，如flannel\n    * 将Node IP与该Node内的pod IP关联起来，通过Node IP转发到pod IP\n\n* pod到service的通信\n\n  pod到service的通信通过kube-proxy实现，底层通过修改iptables规则实现，后文具体介绍。\n\n* 集群外部与内部组件的通信\n\n  通过NodePort或者Ingress实现；\n\n### kubernetes网络结构\n为了满足上述要求和场景，kubernetes集群的网络分为三层：\n\n* 集群物理网络，即Node节点所属网络；\n* Node内部的容器网络，一般是docker0网卡负责管理；\n* Node网络和容器网络的连接器，overlay网络，一般flannel负责管理；\n\n三层网络的结构下图：\n\n![](Network-Model-in-Kubernetes-6c165903.png)\n\n<center>kubernetes网络结构</center>\n<br/>\n<br/>\n\n其中，docker0是Node内部不通pod间的默认路由，pod的IP地址从docker0动态分配；flannel负责overylay网络维护，把docker0内的私网和Node节点的网络打通；GateWay则是Node网络中的默认路由，负责物理网络数据包转发。\n\n### 开源网络组件Flannel\n在kubernetes中，flannel的左右有以下两点：\n* 给每个Node上的Docker容器分配不冲突的IP地址\n* 在这些IP之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络，将数据包原封不动的传递到目标容器内\n\n首先，flannel创建一个flannel0网桥，一端连接docker0网桥，另一端连接flanneld的服务进程。flanneld进程跟kubernetes集群中的etcd通信，管理网段资源，同时监控每个pod的实际地址，并在内存中建立一个pod节点的路由表。flanneld进程一端连接flannel0网桥，另一端连接物理网络。\n\n<br/>\n\n综上，以pod0和pod2的通信为例，数据的流转是这样的：\n\npod0 --> docker0 --> flannel0 --> flanneld --> Node0物理网卡 --> Node1物理网卡 --> flanneld --> flannel0 --> docker0 --> pod2\n","source":"_posts/Network-Model-in-Kubernetes.md","raw":"---\ntitle: Network Model in Kubernetes\ndate: 2018-05-27 19:00:45\ntags: kubernetes Network\n---\n本文主要剖析kubernetes中网络模型，详细介绍pod之间的通信流程。\n\n## 网络模型概况\n### kubernetes对网络的要求\n* 所有的容器都可以在不用NAT的方式下同别的容器通信\n* 所有容器节点都可以在不用NAT的方式下同所有容器通信\n* 容器的地址和别人看到的地址是同一个地址\n<!--more-->\n### kubernetes的网络场景\n* 容器间直接通信\n\n  同一个pod中，不通容器共享一个网络命名空间，共享同一个Linux协议栈，可以直接通过localhost通信。\n* 同一个Node上pod间的通信\n\n  同一个Node内，不同的Pod都有一个全局IP，可以直接通过Pod的IP进行通信。Pod地址和docker0在同一个网段\n\n* 不同Node上的pod间通信\n\n  docker0网桥与宿主机网卡是两个完全不同的IP网段，并且Node之间的通信只能通过宿主机的物理网卡进行，因此要想实现位于不同Node上的Pod容器之间的通信，就必须想办法通过主机的IP地址进行寻址和通信。Kubernetes会记录所有正在运行的Pod的IP分配信息，并且将这些信息保存在etcd中（作为service的Endpoint）。\n\n  因此，实现不同Node上pod之间的通信，需要两个条件\n    * pod IP做整体规划，整个kubernetes集群内的pod IP不能有冲突，一般通过第三方开源工具管理，如flannel\n    * 将Node IP与该Node内的pod IP关联起来，通过Node IP转发到pod IP\n\n* pod到service的通信\n\n  pod到service的通信通过kube-proxy实现，底层通过修改iptables规则实现，后文具体介绍。\n\n* 集群外部与内部组件的通信\n\n  通过NodePort或者Ingress实现；\n\n### kubernetes网络结构\n为了满足上述要求和场景，kubernetes集群的网络分为三层：\n\n* 集群物理网络，即Node节点所属网络；\n* Node内部的容器网络，一般是docker0网卡负责管理；\n* Node网络和容器网络的连接器，overlay网络，一般flannel负责管理；\n\n三层网络的结构下图：\n\n![](Network-Model-in-Kubernetes-6c165903.png)\n\n<center>kubernetes网络结构</center>\n<br/>\n<br/>\n\n其中，docker0是Node内部不通pod间的默认路由，pod的IP地址从docker0动态分配；flannel负责overylay网络维护，把docker0内的私网和Node节点的网络打通；GateWay则是Node网络中的默认路由，负责物理网络数据包转发。\n\n### 开源网络组件Flannel\n在kubernetes中，flannel的左右有以下两点：\n* 给每个Node上的Docker容器分配不冲突的IP地址\n* 在这些IP之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络，将数据包原封不动的传递到目标容器内\n\n首先，flannel创建一个flannel0网桥，一端连接docker0网桥，另一端连接flanneld的服务进程。flanneld进程跟kubernetes集群中的etcd通信，管理网段资源，同时监控每个pod的实际地址，并在内存中建立一个pod节点的路由表。flanneld进程一端连接flannel0网桥，另一端连接物理网络。\n\n<br/>\n\n综上，以pod0和pod2的通信为例，数据的流转是这样的：\n\npod0 --> docker0 --> flannel0 --> flanneld --> Node0物理网卡 --> Node1物理网卡 --> flanneld --> flannel0 --> docker0 --> pod2\n","slug":"Network-Model-in-Kubernetes","published":1,"updated":"2021-11-07T07:27:29.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8ue0006hasgb63czmkr","content":"<p>本文主要剖析kubernetes中网络模型，详细介绍pod之间的通信流程。</p>\n<h2 id=\"网络模型概况\"><a href=\"#网络模型概况\" class=\"headerlink\" title=\"网络模型概况\"></a>网络模型概况</h2><h3 id=\"kubernetes对网络的要求\"><a href=\"#kubernetes对网络的要求\" class=\"headerlink\" title=\"kubernetes对网络的要求\"></a>kubernetes对网络的要求</h3><ul>\n<li>所有的容器都可以在不用NAT的方式下同别的容器通信</li>\n<li>所有容器节点都可以在不用NAT的方式下同所有容器通信</li>\n<li>容器的地址和别人看到的地址是同一个地址<a id=\"more\"></a>\n<h3 id=\"kubernetes的网络场景\"><a href=\"#kubernetes的网络场景\" class=\"headerlink\" title=\"kubernetes的网络场景\"></a>kubernetes的网络场景</h3></li>\n<li><p>容器间直接通信</p>\n<p>同一个pod中，不通容器共享一个网络命名空间，共享同一个Linux协议栈，可以直接通过localhost通信。</p>\n</li>\n<li><p>同一个Node上pod间的通信</p>\n<p>同一个Node内，不同的Pod都有一个全局IP，可以直接通过Pod的IP进行通信。Pod地址和docker0在同一个网段</p>\n</li>\n<li><p>不同Node上的pod间通信</p>\n<p>docker0网桥与宿主机网卡是两个完全不同的IP网段，并且Node之间的通信只能通过宿主机的物理网卡进行，因此要想实现位于不同Node上的Pod容器之间的通信，就必须想办法通过主机的IP地址进行寻址和通信。Kubernetes会记录所有正在运行的Pod的IP分配信息，并且将这些信息保存在etcd中（作为service的Endpoint）。</p>\n<p>因此，实现不同Node上pod之间的通信，需要两个条件</p>\n<ul>\n<li>pod IP做整体规划，整个kubernetes集群内的pod IP不能有冲突，一般通过第三方开源工具管理，如flannel</li>\n<li>将Node IP与该Node内的pod IP关联起来，通过Node IP转发到pod IP</li>\n</ul>\n</li>\n<li><p>pod到service的通信</p>\n<p>pod到service的通信通过kube-proxy实现，底层通过修改iptables规则实现，后文具体介绍。</p>\n</li>\n<li><p>集群外部与内部组件的通信</p>\n<p>通过NodePort或者Ingress实现；</p>\n</li>\n</ul>\n<h3 id=\"kubernetes网络结构\"><a href=\"#kubernetes网络结构\" class=\"headerlink\" title=\"kubernetes网络结构\"></a>kubernetes网络结构</h3><p>为了满足上述要求和场景，kubernetes集群的网络分为三层：</p>\n<ul>\n<li>集群物理网络，即Node节点所属网络；</li>\n<li>Node内部的容器网络，一般是docker0网卡负责管理；</li>\n<li>Node网络和容器网络的连接器，overlay网络，一般flannel负责管理；</li>\n</ul>\n<p>三层网络的结构下图：</p>\n<p><img src=\"Network-Model-in-Kubernetes-6c165903.png\" alt=\"\"></p>\n<p><center>kubernetes网络结构</center><br><br><br><br></p>\n<p>其中，docker0是Node内部不通pod间的默认路由，pod的IP地址从docker0动态分配；flannel负责overylay网络维护，把docker0内的私网和Node节点的网络打通；GateWay则是Node网络中的默认路由，负责物理网络数据包转发。</p>\n<h3 id=\"开源网络组件Flannel\"><a href=\"#开源网络组件Flannel\" class=\"headerlink\" title=\"开源网络组件Flannel\"></a>开源网络组件Flannel</h3><p>在kubernetes中，flannel的左右有以下两点：</p>\n<ul>\n<li>给每个Node上的Docker容器分配不冲突的IP地址</li>\n<li>在这些IP之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络，将数据包原封不动的传递到目标容器内</li>\n</ul>\n<p>首先，flannel创建一个flannel0网桥，一端连接docker0网桥，另一端连接flanneld的服务进程。flanneld进程跟kubernetes集群中的etcd通信，管理网段资源，同时监控每个pod的实际地址，并在内存中建立一个pod节点的路由表。flanneld进程一端连接flannel0网桥，另一端连接物理网络。</p>\n<p><br></p>\n<p>综上，以pod0和pod2的通信为例，数据的流转是这样的：</p>\n<p>pod0 –&gt; docker0 –&gt; flannel0 –&gt; flanneld –&gt; Node0物理网卡 –&gt; Node1物理网卡 –&gt; flanneld –&gt; flannel0 –&gt; docker0 –&gt; pod2</p>\n","site":{"data":{}},"excerpt":"<p>本文主要剖析kubernetes中网络模型，详细介绍pod之间的通信流程。</p>\n<h2 id=\"网络模型概况\"><a href=\"#网络模型概况\" class=\"headerlink\" title=\"网络模型概况\"></a>网络模型概况</h2><h3 id=\"kubernetes对网络的要求\"><a href=\"#kubernetes对网络的要求\" class=\"headerlink\" title=\"kubernetes对网络的要求\"></a>kubernetes对网络的要求</h3><ul>\n<li>所有的容器都可以在不用NAT的方式下同别的容器通信</li>\n<li>所有容器节点都可以在不用NAT的方式下同所有容器通信</li>\n<li>容器的地址和别人看到的地址是同一个地址","more":"<h3 id=\"kubernetes的网络场景\"><a href=\"#kubernetes的网络场景\" class=\"headerlink\" title=\"kubernetes的网络场景\"></a>kubernetes的网络场景</h3></li>\n<li><p>容器间直接通信</p>\n<p>同一个pod中，不通容器共享一个网络命名空间，共享同一个Linux协议栈，可以直接通过localhost通信。</p>\n</li>\n<li><p>同一个Node上pod间的通信</p>\n<p>同一个Node内，不同的Pod都有一个全局IP，可以直接通过Pod的IP进行通信。Pod地址和docker0在同一个网段</p>\n</li>\n<li><p>不同Node上的pod间通信</p>\n<p>docker0网桥与宿主机网卡是两个完全不同的IP网段，并且Node之间的通信只能通过宿主机的物理网卡进行，因此要想实现位于不同Node上的Pod容器之间的通信，就必须想办法通过主机的IP地址进行寻址和通信。Kubernetes会记录所有正在运行的Pod的IP分配信息，并且将这些信息保存在etcd中（作为service的Endpoint）。</p>\n<p>因此，实现不同Node上pod之间的通信，需要两个条件</p>\n<ul>\n<li>pod IP做整体规划，整个kubernetes集群内的pod IP不能有冲突，一般通过第三方开源工具管理，如flannel</li>\n<li>将Node IP与该Node内的pod IP关联起来，通过Node IP转发到pod IP</li>\n</ul>\n</li>\n<li><p>pod到service的通信</p>\n<p>pod到service的通信通过kube-proxy实现，底层通过修改iptables规则实现，后文具体介绍。</p>\n</li>\n<li><p>集群外部与内部组件的通信</p>\n<p>通过NodePort或者Ingress实现；</p>\n</li>\n</ul>\n<h3 id=\"kubernetes网络结构\"><a href=\"#kubernetes网络结构\" class=\"headerlink\" title=\"kubernetes网络结构\"></a>kubernetes网络结构</h3><p>为了满足上述要求和场景，kubernetes集群的网络分为三层：</p>\n<ul>\n<li>集群物理网络，即Node节点所属网络；</li>\n<li>Node内部的容器网络，一般是docker0网卡负责管理；</li>\n<li>Node网络和容器网络的连接器，overlay网络，一般flannel负责管理；</li>\n</ul>\n<p>三层网络的结构下图：</p>\n<p><img src=\"Network-Model-in-Kubernetes-6c165903.png\" alt=\"\"></p>\n<p><center>kubernetes网络结构</center><br><br><br><br></p>\n<p>其中，docker0是Node内部不通pod间的默认路由，pod的IP地址从docker0动态分配；flannel负责overylay网络维护，把docker0内的私网和Node节点的网络打通；GateWay则是Node网络中的默认路由，负责物理网络数据包转发。</p>\n<h3 id=\"开源网络组件Flannel\"><a href=\"#开源网络组件Flannel\" class=\"headerlink\" title=\"开源网络组件Flannel\"></a>开源网络组件Flannel</h3><p>在kubernetes中，flannel的左右有以下两点：</p>\n<ul>\n<li>给每个Node上的Docker容器分配不冲突的IP地址</li>\n<li>在这些IP之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络，将数据包原封不动的传递到目标容器内</li>\n</ul>\n<p>首先，flannel创建一个flannel0网桥，一端连接docker0网桥，另一端连接flanneld的服务进程。flanneld进程跟kubernetes集群中的etcd通信，管理网段资源，同时监控每个pod的实际地址，并在内存中建立一个pod节点的路由表。flanneld进程一端连接flannel0网桥，另一端连接物理网络。</p>\n<p><br></p>\n<p>综上，以pod0和pod2的通信为例，数据的流转是这样的：</p>\n<p>pod0 –&gt; docker0 –&gt; flannel0 –&gt; flanneld –&gt; Node0物理网卡 –&gt; Node1物理网卡 –&gt; flanneld –&gt; flannel0 –&gt; docker0 –&gt; pod2</p>"},{"title":"Service And Kube-proxy","date":"2018-05-27T15:07:15.000Z","_content":"## Introduction\n本文探究kubernetes架构中，服务发现的具体工作原理，涉及到service定义、服务发现与coredns，kube-proxy工作原理等。\n<!--more-->\n## Service\nkubernetes架构中，Service是对一组提供相同功能pod的抽象。Service通过标签选取服务后端。Service有四种类型：\n  * ClusterIP: 默认类型，为服务自动分配一个虚拟ip，该ip仅集群内部可见\n  * NodePort: 在ClusterIP的基础上，为Service在每台机器上绑定一个端口，外部请求可以通过NodeIP:NodePort访问服务\n  * LoadBalancer: 在NodePort的基础上，通过云服务厂商创建一个外部的负载均衡器\n  * ExternalName: 把服务通过CNAME的方式转发到制定的域名。\n  <br/>\n\n### 创建Service\n  * 一般，在创建服务时，需要指定selector，该selector会和特定label关联，通过和pod的label对比，选择相应的pod作为该服务的endpoints；\n  * 如果不指定selector，可以自己定义endpoint，需要创建一个和Service同名的Endpoints资源，在endpoint中配置指定的ip和端口；\n  * 还有一种情况不需要指定selectors，就是通过DNS CNAME方式把服务转发到指定的域名；\n  <br/>\n\n### headless 服务\nheadless服务是指不需要ClusterIP的服务，在创建服务时指定```spec.clusterIP=None```, 包括两类：\n  * 不指定selectors，但设置externalName；\n  * 不指定selectors，通过A记录设置后段endpoint列表；\n\n## Service Discovery\n服务发现分两种类型：\n* 环境变量\n  * kubelet 会为每个活跃的 Service 添加一组环境变量，要求 Pod 想要访问的任何 Service 必须在 Pod 自己之前被创建\n* DNS\n  * DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录, k8s体系中，DNS服务发现的结构如下图：\n    ![](Service-And-Kube-proxy-9a3a490b.png)\n\n  如上图所示，kube-dns 或 coredns会watch api-server上Service的变化，并根据规则自动生成DNS A记录。\n\n## Kube-proxy\n用户创建service后，k8s会为这个LB提供一个IP，一般称为cluster IP。 kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。\n\nkube-proxy内部实现原理主要是使用iptables规则，更改filter和nat表。filter表中增加KUBE-FIREWALL和KUBE-SERVICES两个规则链。所有出的报文都经过KUBE-SERVICES，如果没有找到endpoint，则丢弃报文。nat表则设置的规则比较多，主要是各种跳转，下图1中给出了部分。nat表的处理主要步骤为：\n* inbound：在PREROUTING阶段，将所有报文转发到KUBE-SERVICES\n* outbound：在OUTPUT阶段，将所有报文转发到KUBE-SERVICES\n* outbound：在POSTROUTING阶段，将所有报文转发到KUBE-POSTROUTING\n\n以my-nginx服务为例，该服务clusterIP为10.254.82.158，有两个pod，ip分贝为172.30.39.3和172.30.23.8，如下图：\n\n  ![](Service-And-Kube-proxy-02d62faa.png)\n\n使用sudo iptables -t nat -L命令查看nat转发表，只截出了相关的部分，如下图1。\n* 首先pod通过dns查询到clusterIP 10.254.82.158，然后发起调用；\n* 请求进入KUBE-SVC-BEPXDJBUHFCSYIC3\n* KUBE-SVC-BEPXDJBUHFCSYIC3配置了两个pod的概率，0.5\n* 然后请求按照一定概率被转发到另个目的pod，如图2和图3\n\n  ![](Service-And-Kube-proxy-74a4dc02.png)\n  <center>图1</center>\n\n  ![](Service-And-Kube-proxy-90b65a4a.png)\n  <center>图2</center>\n\n  ![](Service-And-Kube-proxy-9bf039d8.png)\n  <center>图3</center>\n\n综上，数据包发到Node的处理过程：\n\n![](Service-And-Kube-proxy-6cc5b0ce.png)\n<center>图片来自http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</center>\n\n\nNode发出的包的处理过程：\n![](Service-And-Kube-proxy-d314f07b.png)\n<center>图片来自http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</center>\n\n## CoreDNS\nCoreDNS在k8s中主要负责把Service转换成DNS域名并添加相应的A记录。CoreDNS支持标准的dns协议，插件化，支持多种数据源。\n\n![](Service-And-Kube-proxy-323364fe.png)\n\n## Conclusion\n综上，本文简单介绍了kubernetes体系中，服务发现相关的概念及原理，包括服务类型、服务定义、服务发现方式及kube-proxy的工作原理。\n","source":"_posts/Service-And-Kube-proxy.md","raw":"---\ntitle: Service And Kube-proxy\ndate: 2018-05-27 23:07:15\ntags: service\n---\n## Introduction\n本文探究kubernetes架构中，服务发现的具体工作原理，涉及到service定义、服务发现与coredns，kube-proxy工作原理等。\n<!--more-->\n## Service\nkubernetes架构中，Service是对一组提供相同功能pod的抽象。Service通过标签选取服务后端。Service有四种类型：\n  * ClusterIP: 默认类型，为服务自动分配一个虚拟ip，该ip仅集群内部可见\n  * NodePort: 在ClusterIP的基础上，为Service在每台机器上绑定一个端口，外部请求可以通过NodeIP:NodePort访问服务\n  * LoadBalancer: 在NodePort的基础上，通过云服务厂商创建一个外部的负载均衡器\n  * ExternalName: 把服务通过CNAME的方式转发到制定的域名。\n  <br/>\n\n### 创建Service\n  * 一般，在创建服务时，需要指定selector，该selector会和特定label关联，通过和pod的label对比，选择相应的pod作为该服务的endpoints；\n  * 如果不指定selector，可以自己定义endpoint，需要创建一个和Service同名的Endpoints资源，在endpoint中配置指定的ip和端口；\n  * 还有一种情况不需要指定selectors，就是通过DNS CNAME方式把服务转发到指定的域名；\n  <br/>\n\n### headless 服务\nheadless服务是指不需要ClusterIP的服务，在创建服务时指定```spec.clusterIP=None```, 包括两类：\n  * 不指定selectors，但设置externalName；\n  * 不指定selectors，通过A记录设置后段endpoint列表；\n\n## Service Discovery\n服务发现分两种类型：\n* 环境变量\n  * kubelet 会为每个活跃的 Service 添加一组环境变量，要求 Pod 想要访问的任何 Service 必须在 Pod 自己之前被创建\n* DNS\n  * DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录, k8s体系中，DNS服务发现的结构如下图：\n    ![](Service-And-Kube-proxy-9a3a490b.png)\n\n  如上图所示，kube-dns 或 coredns会watch api-server上Service的变化，并根据规则自动生成DNS A记录。\n\n## Kube-proxy\n用户创建service后，k8s会为这个LB提供一个IP，一般称为cluster IP。 kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。\n\nkube-proxy内部实现原理主要是使用iptables规则，更改filter和nat表。filter表中增加KUBE-FIREWALL和KUBE-SERVICES两个规则链。所有出的报文都经过KUBE-SERVICES，如果没有找到endpoint，则丢弃报文。nat表则设置的规则比较多，主要是各种跳转，下图1中给出了部分。nat表的处理主要步骤为：\n* inbound：在PREROUTING阶段，将所有报文转发到KUBE-SERVICES\n* outbound：在OUTPUT阶段，将所有报文转发到KUBE-SERVICES\n* outbound：在POSTROUTING阶段，将所有报文转发到KUBE-POSTROUTING\n\n以my-nginx服务为例，该服务clusterIP为10.254.82.158，有两个pod，ip分贝为172.30.39.3和172.30.23.8，如下图：\n\n  ![](Service-And-Kube-proxy-02d62faa.png)\n\n使用sudo iptables -t nat -L命令查看nat转发表，只截出了相关的部分，如下图1。\n* 首先pod通过dns查询到clusterIP 10.254.82.158，然后发起调用；\n* 请求进入KUBE-SVC-BEPXDJBUHFCSYIC3\n* KUBE-SVC-BEPXDJBUHFCSYIC3配置了两个pod的概率，0.5\n* 然后请求按照一定概率被转发到另个目的pod，如图2和图3\n\n  ![](Service-And-Kube-proxy-74a4dc02.png)\n  <center>图1</center>\n\n  ![](Service-And-Kube-proxy-90b65a4a.png)\n  <center>图2</center>\n\n  ![](Service-And-Kube-proxy-9bf039d8.png)\n  <center>图3</center>\n\n综上，数据包发到Node的处理过程：\n\n![](Service-And-Kube-proxy-6cc5b0ce.png)\n<center>图片来自http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</center>\n\n\nNode发出的包的处理过程：\n![](Service-And-Kube-proxy-d314f07b.png)\n<center>图片来自http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</center>\n\n## CoreDNS\nCoreDNS在k8s中主要负责把Service转换成DNS域名并添加相应的A记录。CoreDNS支持标准的dns协议，插件化，支持多种数据源。\n\n![](Service-And-Kube-proxy-323364fe.png)\n\n## Conclusion\n综上，本文简单介绍了kubernetes体系中，服务发现相关的概念及原理，包括服务类型、服务定义、服务发现方式及kube-proxy的工作原理。\n","slug":"Service-And-Kube-proxy","published":1,"updated":"2021-11-07T07:27:29.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8uf0007hasgebqm6o8j","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>本文探究kubernetes架构中，服务发现的具体工作原理，涉及到service定义、服务发现与coredns，kube-proxy工作原理等。<br><a id=\"more\"></a></p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>kubernetes架构中，Service是对一组提供相同功能pod的抽象。Service通过标签选取服务后端。Service有四种类型：</p>\n<ul>\n<li>ClusterIP: 默认类型，为服务自动分配一个虚拟ip，该ip仅集群内部可见</li>\n<li>NodePort: 在ClusterIP的基础上，为Service在每台机器上绑定一个端口，外部请求可以通过NodeIP:NodePort访问服务</li>\n<li>LoadBalancer: 在NodePort的基础上，通过云服务厂商创建一个外部的负载均衡器</li>\n<li>ExternalName: 把服务通过CNAME的方式转发到制定的域名。<br><br></li>\n</ul>\n<h3 id=\"创建Service\"><a href=\"#创建Service\" class=\"headerlink\" title=\"创建Service\"></a>创建Service</h3><ul>\n<li>一般，在创建服务时，需要指定selector，该selector会和特定label关联，通过和pod的label对比，选择相应的pod作为该服务的endpoints；</li>\n<li>如果不指定selector，可以自己定义endpoint，需要创建一个和Service同名的Endpoints资源，在endpoint中配置指定的ip和端口；</li>\n<li>还有一种情况不需要指定selectors，就是通过DNS CNAME方式把服务转发到指定的域名；<br><br></li>\n</ul>\n<h3 id=\"headless-服务\"><a href=\"#headless-服务\" class=\"headerlink\" title=\"headless 服务\"></a>headless 服务</h3><p>headless服务是指不需要ClusterIP的服务，在创建服务时指定<code>spec.clusterIP=None</code>, 包括两类：</p>\n<ul>\n<li>不指定selectors，但设置externalName；</li>\n<li>不指定selectors，通过A记录设置后段endpoint列表；</li>\n</ul>\n<h2 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h2><p>服务发现分两种类型：</p>\n<ul>\n<li>环境变量<ul>\n<li>kubelet 会为每个活跃的 Service 添加一组环境变量，要求 Pod 想要访问的任何 Service 必须在 Pod 自己之前被创建</li>\n</ul>\n</li>\n<li><p>DNS</p>\n<ul>\n<li>DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录, k8s体系中，DNS服务发现的结构如下图：<br><img src=\"Service-And-Kube-proxy-9a3a490b.png\" alt=\"\"></li>\n</ul>\n<p>如上图所示，kube-dns 或 coredns会watch api-server上Service的变化，并根据规则自动生成DNS A记录。</p>\n</li>\n</ul>\n<h2 id=\"Kube-proxy\"><a href=\"#Kube-proxy\" class=\"headerlink\" title=\"Kube-proxy\"></a>Kube-proxy</h2><p>用户创建service后，k8s会为这个LB提供一个IP，一般称为cluster IP。 kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。</p>\n<p>kube-proxy内部实现原理主要是使用iptables规则，更改filter和nat表。filter表中增加KUBE-FIREWALL和KUBE-SERVICES两个规则链。所有出的报文都经过KUBE-SERVICES，如果没有找到endpoint，则丢弃报文。nat表则设置的规则比较多，主要是各种跳转，下图1中给出了部分。nat表的处理主要步骤为：</p>\n<ul>\n<li>inbound：在PREROUTING阶段，将所有报文转发到KUBE-SERVICES</li>\n<li>outbound：在OUTPUT阶段，将所有报文转发到KUBE-SERVICES</li>\n<li>outbound：在POSTROUTING阶段，将所有报文转发到KUBE-POSTROUTING</li>\n</ul>\n<p>以my-nginx服务为例，该服务clusterIP为10.254.82.158，有两个pod，ip分贝为172.30.39.3和172.30.23.8，如下图：</p>\n<p>  <img src=\"Service-And-Kube-proxy-02d62faa.png\" alt=\"\"></p>\n<p>使用sudo iptables -t nat -L命令查看nat转发表，只截出了相关的部分，如下图1。</p>\n<ul>\n<li>首先pod通过dns查询到clusterIP 10.254.82.158，然后发起调用；</li>\n<li>请求进入KUBE-SVC-BEPXDJBUHFCSYIC3</li>\n<li>KUBE-SVC-BEPXDJBUHFCSYIC3配置了两个pod的概率，0.5</li>\n<li><p>然后请求按照一定概率被转发到另个目的pod，如图2和图3</p>\n<p><img src=\"Service-And-Kube-proxy-74a4dc02.png\" alt=\"\"></p>\n<center>图1</center>\n\n<p><img src=\"Service-And-Kube-proxy-90b65a4a.png\" alt=\"\"></p>\n<center>图2</center>\n\n<p><img src=\"Service-And-Kube-proxy-9bf039d8.png\" alt=\"\"></p>\n<center>图3</center>\n\n</li>\n</ul>\n<p>综上，数据包发到Node的处理过程：</p>\n<p><img src=\"Service-And-Kube-proxy-6cc5b0ce.png\" alt=\"\"></p>\n<center>图片来自<a href=\"http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html\" target=\"_blank\" rel=\"noopener\">http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</a></center>\n\n\n<p>Node发出的包的处理过程：<br><img src=\"Service-And-Kube-proxy-d314f07b.png\" alt=\"\"></p>\n<center>图片来自<a href=\"http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html\" target=\"_blank\" rel=\"noopener\">http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</a></center>\n\n<h2 id=\"CoreDNS\"><a href=\"#CoreDNS\" class=\"headerlink\" title=\"CoreDNS\"></a>CoreDNS</h2><p>CoreDNS在k8s中主要负责把Service转换成DNS域名并添加相应的A记录。CoreDNS支持标准的dns协议，插件化，支持多种数据源。</p>\n<p><img src=\"Service-And-Kube-proxy-323364fe.png\" alt=\"\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>综上，本文简单介绍了kubernetes体系中，服务发现相关的概念及原理，包括服务类型、服务定义、服务发现方式及kube-proxy的工作原理。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>本文探究kubernetes架构中，服务发现的具体工作原理，涉及到service定义、服务发现与coredns，kube-proxy工作原理等。<br>","more":"</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>kubernetes架构中，Service是对一组提供相同功能pod的抽象。Service通过标签选取服务后端。Service有四种类型：</p>\n<ul>\n<li>ClusterIP: 默认类型，为服务自动分配一个虚拟ip，该ip仅集群内部可见</li>\n<li>NodePort: 在ClusterIP的基础上，为Service在每台机器上绑定一个端口，外部请求可以通过NodeIP:NodePort访问服务</li>\n<li>LoadBalancer: 在NodePort的基础上，通过云服务厂商创建一个外部的负载均衡器</li>\n<li>ExternalName: 把服务通过CNAME的方式转发到制定的域名。<br><br></li>\n</ul>\n<h3 id=\"创建Service\"><a href=\"#创建Service\" class=\"headerlink\" title=\"创建Service\"></a>创建Service</h3><ul>\n<li>一般，在创建服务时，需要指定selector，该selector会和特定label关联，通过和pod的label对比，选择相应的pod作为该服务的endpoints；</li>\n<li>如果不指定selector，可以自己定义endpoint，需要创建一个和Service同名的Endpoints资源，在endpoint中配置指定的ip和端口；</li>\n<li>还有一种情况不需要指定selectors，就是通过DNS CNAME方式把服务转发到指定的域名；<br><br></li>\n</ul>\n<h3 id=\"headless-服务\"><a href=\"#headless-服务\" class=\"headerlink\" title=\"headless 服务\"></a>headless 服务</h3><p>headless服务是指不需要ClusterIP的服务，在创建服务时指定<code>spec.clusterIP=None</code>, 包括两类：</p>\n<ul>\n<li>不指定selectors，但设置externalName；</li>\n<li>不指定selectors，通过A记录设置后段endpoint列表；</li>\n</ul>\n<h2 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h2><p>服务发现分两种类型：</p>\n<ul>\n<li>环境变量<ul>\n<li>kubelet 会为每个活跃的 Service 添加一组环境变量，要求 Pod 想要访问的任何 Service 必须在 Pod 自己之前被创建</li>\n</ul>\n</li>\n<li><p>DNS</p>\n<ul>\n<li>DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录, k8s体系中，DNS服务发现的结构如下图：<br><img src=\"Service-And-Kube-proxy-9a3a490b.png\" alt=\"\"></li>\n</ul>\n<p>如上图所示，kube-dns 或 coredns会watch api-server上Service的变化，并根据规则自动生成DNS A记录。</p>\n</li>\n</ul>\n<h2 id=\"Kube-proxy\"><a href=\"#Kube-proxy\" class=\"headerlink\" title=\"Kube-proxy\"></a>Kube-proxy</h2><p>用户创建service后，k8s会为这个LB提供一个IP，一般称为cluster IP。 kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。</p>\n<p>kube-proxy内部实现原理主要是使用iptables规则，更改filter和nat表。filter表中增加KUBE-FIREWALL和KUBE-SERVICES两个规则链。所有出的报文都经过KUBE-SERVICES，如果没有找到endpoint，则丢弃报文。nat表则设置的规则比较多，主要是各种跳转，下图1中给出了部分。nat表的处理主要步骤为：</p>\n<ul>\n<li>inbound：在PREROUTING阶段，将所有报文转发到KUBE-SERVICES</li>\n<li>outbound：在OUTPUT阶段，将所有报文转发到KUBE-SERVICES</li>\n<li>outbound：在POSTROUTING阶段，将所有报文转发到KUBE-POSTROUTING</li>\n</ul>\n<p>以my-nginx服务为例，该服务clusterIP为10.254.82.158，有两个pod，ip分贝为172.30.39.3和172.30.23.8，如下图：</p>\n<p>  <img src=\"Service-And-Kube-proxy-02d62faa.png\" alt=\"\"></p>\n<p>使用sudo iptables -t nat -L命令查看nat转发表，只截出了相关的部分，如下图1。</p>\n<ul>\n<li>首先pod通过dns查询到clusterIP 10.254.82.158，然后发起调用；</li>\n<li>请求进入KUBE-SVC-BEPXDJBUHFCSYIC3</li>\n<li>KUBE-SVC-BEPXDJBUHFCSYIC3配置了两个pod的概率，0.5</li>\n<li><p>然后请求按照一定概率被转发到另个目的pod，如图2和图3</p>\n<p><img src=\"Service-And-Kube-proxy-74a4dc02.png\" alt=\"\"></p>\n<center>图1</center>\n\n<p><img src=\"Service-And-Kube-proxy-90b65a4a.png\" alt=\"\"></p>\n<center>图2</center>\n\n<p><img src=\"Service-And-Kube-proxy-9bf039d8.png\" alt=\"\"></p>\n<center>图3</center>\n\n</li>\n</ul>\n<p>综上，数据包发到Node的处理过程：</p>\n<p><img src=\"Service-And-Kube-proxy-6cc5b0ce.png\" alt=\"\"></p>\n<center>图片来自<a href=\"http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html\" target=\"_blank\" rel=\"noopener\">http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</a></center>\n\n\n<p>Node发出的包的处理过程：<br><img src=\"Service-And-Kube-proxy-d314f07b.png\" alt=\"\"></p>\n<center>图片来自<a href=\"http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html\" target=\"_blank\" rel=\"noopener\">http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</a></center>\n\n<h2 id=\"CoreDNS\"><a href=\"#CoreDNS\" class=\"headerlink\" title=\"CoreDNS\"></a>CoreDNS</h2><p>CoreDNS在k8s中主要负责把Service转换成DNS域名并添加相应的A记录。CoreDNS支持标准的dns协议，插件化，支持多种数据源。</p>\n<p><img src=\"Service-And-Kube-proxy-323364fe.png\" alt=\"\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>综上，本文简单介绍了kubernetes体系中，服务发现相关的概念及原理，包括服务类型、服务定义、服务发现方式及kube-proxy的工作原理。</p>"},{"title":"about","date":"2019-03-06T14:55:10.000Z","_content":"正己，Java工程师。\n","source":"_posts/about.md","raw":"---\ntitle: about\ndate: 2019-03-06 22:55:10\ntags:\n---\n正己，Java工程师。\n","slug":"about","published":1,"updated":"2021-11-07T07:27:29.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8ui000ahasg9864nntw","content":"<p>正己，Java工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>正己，Java工程师。</p>\n"},{"title":"leetcode01","date":"2019-05-04T14:09:11.000Z","_content":"## Add two numbers\n### 问题描述\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nExample:\n```\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n```\n<!--more-->\n\n### 解答\n```\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\nfunc addTwoNumbers1(x, y, val int) (int, int) {\n\tv1 := x + y + val - 10\n\tv2 := 0\n\tif v1 >= 0 {\n\t\tv2 = 1\n\t} else {\n\t\tv1 = x + y + val\n\t}\n\n\treturn v1, v2\n}\n\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n\tnode0 := ListNode{0, nil}\n\tl4 := &node0\n\thead := &node0\n\tv3 := 0\n\tfor ; l1 != nil || l2 != nil; {\n\t\tv1, v2 := 0, 0\n\t\tif l1 != nil && l2 != nil {\n\t\t\tv1, v2 = addTwoNumbers1(l1.Val, l2.Val, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\n\t\t\tl1 = l1.Next\n\t\t\tl2 = l2.Next\n\t\t\tif l1 != nil || l2 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t} else if l2 == nil {\n\t\t\tv1, v2 = addTwoNumbers1(l1.Val, 0, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\t\t\tl1 = l1.Next\n\t\t\tif l1 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t} else if l1 == nil {\n\t\t\tv1, v2 = addTwoNumbers1(0, l2.Val, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\t\t\tl2 = l2.Next\n\t\t\tif l2 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t}\n\t}\n\n\tif v3 > 0 {\n\t\tl4.Next = &ListNode{v3, nil}\n\t}\n\n\treturn head\n}\n```\n\n\n## Reverse Integer\n### 问题描述\nGiven a 32-bit signed integer, reverse digits of an integer.\n\n#### Example 1:\n```\nInput: 123\nOutput: 321\n```\n\n#### Example 2:\n```\nInput: -123\nOutput: -321\n```\n\n#### Example 3:\n```\nInput: 120\nOutput: 21\n```\n\n**Note:**\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n\n### 解答\n```\nclass Solution {\n    public int reverse(int x) {\n        if (x == Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        List<Integer> digitals = getNumbers(x);\n\n        long value = 0;\n\n        for (int i = digitals.size() - 1; i >= 0; i--) {\n            int a = digitals.get(i);\n            value += (a * Math.pow(10, digitals.size() - i - 1));\n        }\n\n        if (x < 0) {\n            value = value * (-1);\n        }\n\n        if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        return (int) value;\n    }\n\n    private List<Integer> getNumbers(int x) {\n        List<Integer> digitals = new ArrayList<Integer>();\n        long y = (long)x;\n        if (x < 0) {\n            y = (long)x * (-1);\n        }\n\n        for (;y > 0;) {\n            int z = (int) (y % 10);\n            digitals.add(z);\n            y = y / 10;\n        }\n\n        return digitals;\n    }\n}\n```\n","source":"_posts/leetcode01.md","raw":"---\ntitle: leetcode01\ndate: 2019-05-04 22:09:11\ntags:\n- LeetCode\ncategories:\n- 算法\n---\n## Add two numbers\n### 问题描述\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nExample:\n```\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n```\n<!--more-->\n\n### 解答\n```\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\nfunc addTwoNumbers1(x, y, val int) (int, int) {\n\tv1 := x + y + val - 10\n\tv2 := 0\n\tif v1 >= 0 {\n\t\tv2 = 1\n\t} else {\n\t\tv1 = x + y + val\n\t}\n\n\treturn v1, v2\n}\n\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n\tnode0 := ListNode{0, nil}\n\tl4 := &node0\n\thead := &node0\n\tv3 := 0\n\tfor ; l1 != nil || l2 != nil; {\n\t\tv1, v2 := 0, 0\n\t\tif l1 != nil && l2 != nil {\n\t\t\tv1, v2 = addTwoNumbers1(l1.Val, l2.Val, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\n\t\t\tl1 = l1.Next\n\t\t\tl2 = l2.Next\n\t\t\tif l1 != nil || l2 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t} else if l2 == nil {\n\t\t\tv1, v2 = addTwoNumbers1(l1.Val, 0, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\t\t\tl1 = l1.Next\n\t\t\tif l1 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t} else if l1 == nil {\n\t\t\tv1, v2 = addTwoNumbers1(0, l2.Val, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\t\t\tl2 = l2.Next\n\t\t\tif l2 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t}\n\t}\n\n\tif v3 > 0 {\n\t\tl4.Next = &ListNode{v3, nil}\n\t}\n\n\treturn head\n}\n```\n\n\n## Reverse Integer\n### 问题描述\nGiven a 32-bit signed integer, reverse digits of an integer.\n\n#### Example 1:\n```\nInput: 123\nOutput: 321\n```\n\n#### Example 2:\n```\nInput: -123\nOutput: -321\n```\n\n#### Example 3:\n```\nInput: 120\nOutput: 21\n```\n\n**Note:**\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n\n### 解答\n```\nclass Solution {\n    public int reverse(int x) {\n        if (x == Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        List<Integer> digitals = getNumbers(x);\n\n        long value = 0;\n\n        for (int i = digitals.size() - 1; i >= 0; i--) {\n            int a = digitals.get(i);\n            value += (a * Math.pow(10, digitals.size() - i - 1));\n        }\n\n        if (x < 0) {\n            value = value * (-1);\n        }\n\n        if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        return (int) value;\n    }\n\n    private List<Integer> getNumbers(int x) {\n        List<Integer> digitals = new ArrayList<Integer>();\n        long y = (long)x;\n        if (x < 0) {\n            y = (long)x * (-1);\n        }\n\n        for (;y > 0;) {\n            int z = (int) (y % 10);\n            digitals.add(z);\n            y = y / 10;\n        }\n\n        return digitals;\n    }\n}\n```\n","slug":"leetcode01","published":1,"updated":"2021-11-07T07:27:29.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8uk000bhasgt3e0x0xn","content":"<h2 id=\"Add-two-numbers\"><a href=\"#Add-two-numbers\" class=\"headerlink\" title=\"Add two numbers\"></a>Add two numbers</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * type ListNode struct &#123;</span><br><span class=\"line\"> *     Val int</span><br><span class=\"line\"> *     Next *ListNode</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">func addTwoNumbers1(x, y, val int) (int, int) &#123;</span><br><span class=\"line\">\tv1 := x + y + val - 10</span><br><span class=\"line\">\tv2 := 0</span><br><span class=\"line\">\tif v1 &gt;= 0 &#123;</span><br><span class=\"line\">\t\tv2 = 1</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tv1 = x + y + val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn v1, v2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode &#123;</span><br><span class=\"line\">\tnode0 := ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\tl4 := &amp;node0</span><br><span class=\"line\">\thead := &amp;node0</span><br><span class=\"line\">\tv3 := 0</span><br><span class=\"line\">\tfor ; l1 != nil || l2 != nil; &#123;</span><br><span class=\"line\">\t\tv1, v2 := 0, 0</span><br><span class=\"line\">\t\tif l1 != nil &amp;&amp; l2 != nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(l1.Val, l2.Val, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tl1 = l1.Next</span><br><span class=\"line\">\t\t\tl2 = l2.Next</span><br><span class=\"line\">\t\t\tif l1 != nil || l2 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if l2 == nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(l1.Val, 0, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\">\t\t\tl1 = l1.Next</span><br><span class=\"line\">\t\t\tif l1 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if l1 == nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(0, l2.Val, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\">\t\t\tl2 = l2.Next</span><br><span class=\"line\">\t\t\tif l2 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif v3 &gt; 0 &#123;</span><br><span class=\"line\">\t\tl4.Next = &amp;ListNode&#123;v3, nil&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a>Reverse Integer</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 123</span><br><span class=\"line\">Output: 321</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2:\"></a>Example 2:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: -123</span><br><span class=\"line\">Output: -321</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example 3:\"></a>Example 3:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 120</span><br><span class=\"line\">Output: 21</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int reverse(int x) &#123;</span><br><span class=\"line\">        if (x == Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; digitals = getNumbers(x);</span><br><span class=\"line\"></span><br><span class=\"line\">        long value = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = digitals.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">            int a = digitals.get(i);</span><br><span class=\"line\">            value += (a * Math.pow(10, digitals.size() - i - 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            value = value * (-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (value &gt; Integer.MAX_VALUE || value &lt; Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return (int) value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; getNumbers(int x) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; digitals = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        long y = (long)x;</span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            y = (long)x * (-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (;y &gt; 0;) &#123;</span><br><span class=\"line\">            int z = (int) (y % 10);</span><br><span class=\"line\">            digitals.add(z);</span><br><span class=\"line\">            y = y / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return digitals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Add-two-numbers\"><a href=\"#Add-two-numbers\" class=\"headerlink\" title=\"Add two numbers\"></a>Add two numbers</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * type ListNode struct &#123;</span><br><span class=\"line\"> *     Val int</span><br><span class=\"line\"> *     Next *ListNode</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">func addTwoNumbers1(x, y, val int) (int, int) &#123;</span><br><span class=\"line\">\tv1 := x + y + val - 10</span><br><span class=\"line\">\tv2 := 0</span><br><span class=\"line\">\tif v1 &gt;= 0 &#123;</span><br><span class=\"line\">\t\tv2 = 1</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tv1 = x + y + val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn v1, v2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode &#123;</span><br><span class=\"line\">\tnode0 := ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\tl4 := &amp;node0</span><br><span class=\"line\">\thead := &amp;node0</span><br><span class=\"line\">\tv3 := 0</span><br><span class=\"line\">\tfor ; l1 != nil || l2 != nil; &#123;</span><br><span class=\"line\">\t\tv1, v2 := 0, 0</span><br><span class=\"line\">\t\tif l1 != nil &amp;&amp; l2 != nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(l1.Val, l2.Val, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tl1 = l1.Next</span><br><span class=\"line\">\t\t\tl2 = l2.Next</span><br><span class=\"line\">\t\t\tif l1 != nil || l2 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if l2 == nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(l1.Val, 0, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\">\t\t\tl1 = l1.Next</span><br><span class=\"line\">\t\t\tif l1 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if l1 == nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(0, l2.Val, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\">\t\t\tl2 = l2.Next</span><br><span class=\"line\">\t\t\tif l2 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif v3 &gt; 0 &#123;</span><br><span class=\"line\">\t\tl4.Next = &amp;ListNode&#123;v3, nil&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a>Reverse Integer</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 123</span><br><span class=\"line\">Output: 321</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2:\"></a>Example 2:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: -123</span><br><span class=\"line\">Output: -321</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example 3:\"></a>Example 3:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 120</span><br><span class=\"line\">Output: 21</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int reverse(int x) &#123;</span><br><span class=\"line\">        if (x == Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; digitals = getNumbers(x);</span><br><span class=\"line\"></span><br><span class=\"line\">        long value = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = digitals.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">            int a = digitals.get(i);</span><br><span class=\"line\">            value += (a * Math.pow(10, digitals.size() - i - 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            value = value * (-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (value &gt; Integer.MAX_VALUE || value &lt; Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return (int) value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; getNumbers(int x) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; digitals = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        long y = (long)x;</span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            y = (long)x * (-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (;y &gt; 0;) &#123;</span><br><span class=\"line\">            int z = (int) (y % 10);</span><br><span class=\"line\">            digitals.add(z);</span><br><span class=\"line\">            y = y / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return digitals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"golang learning 01","date":"2019-05-26T14:09:52.000Z","_content":"\n今天开始，深入学习golang语言，记录下来以备后用。\n\n## 变量\n### 变量定义\n* var用于定义变量，类型放在变量名后面，变脸定义之后会被初始化为零值。\n ```golang\n var x int\n var y = false\n ```\n* 可以一次定义多个变量，包括不同初始值定义不同类型\n ```golang\n var x, y int\n var a, s = 100, \"abc\"\n ```\n<!--more-->\n\n### 简短模式\n```golang\nfunc main() {\n  x := 100\n  a, s := 1, \"abc\"\n}\n```\n如上段代码，简短模式的限制条件\n* 定义变量的同时显式初始化；\n* 不能提供数据类型；\n* **只能在韩式内部使用**；\n\n**简短模式的退化赋值**： 最少有一个新变量被定义，且必须在同一个作用域\n```golang\n  func main() {\n    x := 12\n    x, y := 20, 15 // x为退化赋值，y是新定义\n  }\n```\n\n### 多变量赋值\n```golang\nfunc main() {\n  x, y := 1, 2\n  x, y = y + 3, x + 2\n}\n```\n多变量赋值时，首先计算等号右侧的值，在对左侧变量赋值；\n\n### 空标识符\n_ 是空标识符，用作忽略占位符。\n\n## 常量\ngolang常量用const关键字定义\n\n```golang\nconst x, y int = 123, 0x22\nconst s = \"hello world\"\n\nconst {\n  i, f = 1, 0.123\n  b = false\n}\n```\n此外，也可以在函数内部定义常量，不被使用的常量不会再编译期报错；\n\n在常量组中，如果没有指定类型和初始化值，则与上一行非空常量右值相同\n```golang\nfunc main() {\n  const {\n    x uint16 = 120\n    y\n    s = \"abc\"\n    z\n  }\n}\n```\n\n## 枚举\ngolang中没有enum的定义，不过可以借助iota标识符实现一组自增常量值实现枚举；\n```golang\n  const {\n    x = iota // 0\n    y        // 1\n    z        // 2\n  }\n```\n\n## 引用类型\n特指 slice、map和channel三种类型，引用类型必须通过make函数创建。\n","source":"_posts/golang-learning-01.md","raw":"---\ntitle: golang learning 01\ndate: 2019-05-26 22:09:52\ntags: golang\n---\n\n今天开始，深入学习golang语言，记录下来以备后用。\n\n## 变量\n### 变量定义\n* var用于定义变量，类型放在变量名后面，变脸定义之后会被初始化为零值。\n ```golang\n var x int\n var y = false\n ```\n* 可以一次定义多个变量，包括不同初始值定义不同类型\n ```golang\n var x, y int\n var a, s = 100, \"abc\"\n ```\n<!--more-->\n\n### 简短模式\n```golang\nfunc main() {\n  x := 100\n  a, s := 1, \"abc\"\n}\n```\n如上段代码，简短模式的限制条件\n* 定义变量的同时显式初始化；\n* 不能提供数据类型；\n* **只能在韩式内部使用**；\n\n**简短模式的退化赋值**： 最少有一个新变量被定义，且必须在同一个作用域\n```golang\n  func main() {\n    x := 12\n    x, y := 20, 15 // x为退化赋值，y是新定义\n  }\n```\n\n### 多变量赋值\n```golang\nfunc main() {\n  x, y := 1, 2\n  x, y = y + 3, x + 2\n}\n```\n多变量赋值时，首先计算等号右侧的值，在对左侧变量赋值；\n\n### 空标识符\n_ 是空标识符，用作忽略占位符。\n\n## 常量\ngolang常量用const关键字定义\n\n```golang\nconst x, y int = 123, 0x22\nconst s = \"hello world\"\n\nconst {\n  i, f = 1, 0.123\n  b = false\n}\n```\n此外，也可以在函数内部定义常量，不被使用的常量不会再编译期报错；\n\n在常量组中，如果没有指定类型和初始化值，则与上一行非空常量右值相同\n```golang\nfunc main() {\n  const {\n    x uint16 = 120\n    y\n    s = \"abc\"\n    z\n  }\n}\n```\n\n## 枚举\ngolang中没有enum的定义，不过可以借助iota标识符实现一组自增常量值实现枚举；\n```golang\n  const {\n    x = iota // 0\n    y        // 1\n    z        // 2\n  }\n```\n\n## 引用类型\n特指 slice、map和channel三种类型，引用类型必须通过make函数创建。\n","slug":"golang-learning-01","published":1,"updated":"2021-11-07T07:27:29.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8un000ehasgl7x8r7wz","content":"<p>今天开始，深入学习golang语言，记录下来以备后用。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"变量定义\"><a href=\"#变量定义\" class=\"headerlink\" title=\"变量定义\"></a>变量定义</h3><ul>\n<li><p>var用于定义变量，类型放在变量名后面，变脸定义之后会被初始化为零值。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以一次定义多个变量，包括不同初始值定义不同类型</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x, y <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a, s = <span class=\"number\">100</span>, <span class=\"string\">\"abc\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"简短模式\"><a href=\"#简短模式\" class=\"headerlink\" title=\"简短模式\"></a>简短模式</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x := <span class=\"number\">100</span></span><br><span class=\"line\">  a, s := <span class=\"number\">1</span>, <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上段代码，简短模式的限制条件</p>\n<ul>\n<li>定义变量的同时显式初始化；</li>\n<li>不能提供数据类型；</li>\n<li><strong>只能在韩式内部使用</strong>；</li>\n</ul>\n<p><strong>简短模式的退化赋值</strong>： 最少有一个新变量被定义，且必须在同一个作用域<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x := <span class=\"number\">12</span></span><br><span class=\"line\">  x, y := <span class=\"number\">20</span>, <span class=\"number\">15</span> <span class=\"comment\">// x为退化赋值，y是新定义</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多变量赋值\"><a href=\"#多变量赋值\" class=\"headerlink\" title=\"多变量赋值\"></a>多变量赋值</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x, y := <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">  x, y = y + <span class=\"number\">3</span>, x + <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多变量赋值时，首先计算等号右侧的值，在对左侧变量赋值；</p>\n<h3 id=\"空标识符\"><a href=\"#空标识符\" class=\"headerlink\" title=\"空标识符\"></a>空标识符</h3><p>_ 是空标识符，用作忽略占位符。</p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>golang常量用const关键字定义</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x, y <span class=\"keyword\">int</span> = <span class=\"number\">123</span>, <span class=\"number\">0x22</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  i, f = <span class=\"number\">1</span>, <span class=\"number\">0.123</span></span><br><span class=\"line\">  b = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，也可以在函数内部定义常量，不被使用的常量不会再编译期报错；</p>\n<p>在常量组中，如果没有指定类型和初始化值，则与上一行非空常量右值相同<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    x <span class=\"keyword\">uint16</span> = <span class=\"number\">120</span></span><br><span class=\"line\">    y</span><br><span class=\"line\">    s = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    z</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>golang中没有enum的定义，不过可以借助iota标识符实现一组自增常量值实现枚举；<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  x = <span class=\"literal\">iota</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">  y        <span class=\"comment\">// 1</span></span><br><span class=\"line\">  z        <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><p>特指 slice、map和channel三种类型，引用类型必须通过make函数创建。</p>\n","site":{"data":{}},"excerpt":"<p>今天开始，深入学习golang语言，记录下来以备后用。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"变量定义\"><a href=\"#变量定义\" class=\"headerlink\" title=\"变量定义\"></a>变量定义</h3><ul>\n<li><p>var用于定义变量，类型放在变量名后面，变脸定义之后会被初始化为零值。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以一次定义多个变量，包括不同初始值定义不同类型</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x, y <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a, s = <span class=\"number\">100</span>, <span class=\"string\">\"abc\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h3 id=\"简短模式\"><a href=\"#简短模式\" class=\"headerlink\" title=\"简短模式\"></a>简短模式</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x := <span class=\"number\">100</span></span><br><span class=\"line\">  a, s := <span class=\"number\">1</span>, <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上段代码，简短模式的限制条件</p>\n<ul>\n<li>定义变量的同时显式初始化；</li>\n<li>不能提供数据类型；</li>\n<li><strong>只能在韩式内部使用</strong>；</li>\n</ul>\n<p><strong>简短模式的退化赋值</strong>： 最少有一个新变量被定义，且必须在同一个作用域<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x := <span class=\"number\">12</span></span><br><span class=\"line\">  x, y := <span class=\"number\">20</span>, <span class=\"number\">15</span> <span class=\"comment\">// x为退化赋值，y是新定义</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多变量赋值\"><a href=\"#多变量赋值\" class=\"headerlink\" title=\"多变量赋值\"></a>多变量赋值</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x, y := <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">  x, y = y + <span class=\"number\">3</span>, x + <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多变量赋值时，首先计算等号右侧的值，在对左侧变量赋值；</p>\n<h3 id=\"空标识符\"><a href=\"#空标识符\" class=\"headerlink\" title=\"空标识符\"></a>空标识符</h3><p>_ 是空标识符，用作忽略占位符。</p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>golang常量用const关键字定义</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x, y <span class=\"keyword\">int</span> = <span class=\"number\">123</span>, <span class=\"number\">0x22</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  i, f = <span class=\"number\">1</span>, <span class=\"number\">0.123</span></span><br><span class=\"line\">  b = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，也可以在函数内部定义常量，不被使用的常量不会再编译期报错；</p>\n<p>在常量组中，如果没有指定类型和初始化值，则与上一行非空常量右值相同<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    x <span class=\"keyword\">uint16</span> = <span class=\"number\">120</span></span><br><span class=\"line\">    y</span><br><span class=\"line\">    s = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    z</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>golang中没有enum的定义，不过可以借助iota标识符实现一组自增常量值实现枚举；<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  x = <span class=\"literal\">iota</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">  y        <span class=\"comment\">// 1</span></span><br><span class=\"line\">  z        <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><p>特指 slice、map和channel三种类型，引用类型必须通过make函数创建。</p>"},{"title":"how to read a book","date":"2019-03-06T14:23:47.000Z","_content":"## 如何阅读一本书，读书笔记\n本文记录《如何阅读一本书》的摘要笔记。\n\n### 实用型书阅读方法\n四个问题：\n* 这本书在谈什么，做出大纲架构；\n* 找出作者的共识，主旨和论述；\n* 内容是真是的吗?\n* 这本书与我何干？\n","source":"_posts/how-to-read-a-book.md","raw":"---\ntitle: how to read a book\ndate: 2019-03-06 22:23:47\ntags: 读书\n---\n## 如何阅读一本书，读书笔记\n本文记录《如何阅读一本书》的摘要笔记。\n\n### 实用型书阅读方法\n四个问题：\n* 这本书在谈什么，做出大纲架构；\n* 找出作者的共识，主旨和论述；\n* 内容是真是的吗?\n* 这本书与我何干？\n","slug":"how-to-read-a-book","published":1,"updated":"2021-11-07T07:27:29.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8uq000ghasg64bzdo4w","content":"<h2 id=\"如何阅读一本书，读书笔记\"><a href=\"#如何阅读一本书，读书笔记\" class=\"headerlink\" title=\"如何阅读一本书，读书笔记\"></a>如何阅读一本书，读书笔记</h2><p>本文记录《如何阅读一本书》的摘要笔记。</p>\n<h3 id=\"实用型书阅读方法\"><a href=\"#实用型书阅读方法\" class=\"headerlink\" title=\"实用型书阅读方法\"></a>实用型书阅读方法</h3><p>四个问题：</p>\n<ul>\n<li>这本书在谈什么，做出大纲架构；</li>\n<li>找出作者的共识，主旨和论述；</li>\n<li>内容是真是的吗?</li>\n<li>这本书与我何干？</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何阅读一本书，读书笔记\"><a href=\"#如何阅读一本书，读书笔记\" class=\"headerlink\" title=\"如何阅读一本书，读书笔记\"></a>如何阅读一本书，读书笔记</h2><p>本文记录《如何阅读一本书》的摘要笔记。</p>\n<h3 id=\"实用型书阅读方法\"><a href=\"#实用型书阅读方法\" class=\"headerlink\" title=\"实用型书阅读方法\"></a>实用型书阅读方法</h3><p>四个问题：</p>\n<ul>\n<li>这本书在谈什么，做出大纲架构；</li>\n<li>找出作者的共识，主旨和论述；</li>\n<li>内容是真是的吗?</li>\n<li>这本书与我何干？</li>\n</ul>\n"},{"title":"leetcode02","date":"2019-05-04T14:21:52.000Z","_content":"## Palindrome Number\n### 问题描述\nDetermine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n<!--more-->\n\n#### Example 1:\n```\nInput: 121\nOutput: true\n```\n#### Example 2:\n\n```\nInput: -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n```\n\n#### Example 3:\n```\nInput: 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n```\n\n### 解答\n```\nclass Solution {\n    public boolean isPalindrome(int x) {\n        if (x < 0) {\n            return false;\n        }\n\n        List<Integer> digitals = getNumbers(x);\n        int count = digitals.size();\n        for (int i = 0; i < count / 2; i++) {\n            if (digitals.get(i) != digitals.get(count - 1 - i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private List<Integer> getNumbers(int x) {\n        List<Integer> digitals = new ArrayList<Integer>();\n        long y = (long)x;\n        for (;y > 0;) {\n            int z = (int) (y % 10);\n            digitals.add(z);\n            y = y / 10;\n        }\n\n        return digitals;\n    }\n}\n```\n\n## \tRoman to Integer\n### [问题描述](https://leetcode.com/problems/roman-to-integer/)\n### 解答\n```\nclass Solution {\n    public int romanToInt(String s) {\n\t\tint num = 0;\n\t\tchar[] chars = s.toCharArray();\n\n\t\tfor (int i = 0; i < chars.length; ) {\n\t\t\tchar cur = chars[i];\n\n\t\t\tswitch (cur) {\n\t\t\tcase 'I':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 1;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'V') {\n\t\t\t\t\t\tnum += 4;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'X') {\n\t\t\t\t\t\tnum += 9;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 1;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'X':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 10;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'L') {\n\t\t\t\t\t\tnum += 40;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'C') {\n\t\t\t\t\t\tnum += 90;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 10;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 100;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'D') {\n\t\t\t\t\t\tnum += 400;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'M') {\n\t\t\t\t\t\tnum += 900;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 100;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'V':\n\t\t\t\tnum += 5;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tnum += 50;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tnum += 500;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tnum += 1000;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\treturn num;\n\t}\n}\n```\n","source":"_posts/leetcode02.md","raw":"---\ntitle: leetcode02\ndate: 2019-05-04 22:21:52\ntags: alogrithm\n---\n## Palindrome Number\n### 问题描述\nDetermine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n<!--more-->\n\n#### Example 1:\n```\nInput: 121\nOutput: true\n```\n#### Example 2:\n\n```\nInput: -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n```\n\n#### Example 3:\n```\nInput: 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n```\n\n### 解答\n```\nclass Solution {\n    public boolean isPalindrome(int x) {\n        if (x < 0) {\n            return false;\n        }\n\n        List<Integer> digitals = getNumbers(x);\n        int count = digitals.size();\n        for (int i = 0; i < count / 2; i++) {\n            if (digitals.get(i) != digitals.get(count - 1 - i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private List<Integer> getNumbers(int x) {\n        List<Integer> digitals = new ArrayList<Integer>();\n        long y = (long)x;\n        for (;y > 0;) {\n            int z = (int) (y % 10);\n            digitals.add(z);\n            y = y / 10;\n        }\n\n        return digitals;\n    }\n}\n```\n\n## \tRoman to Integer\n### [问题描述](https://leetcode.com/problems/roman-to-integer/)\n### 解答\n```\nclass Solution {\n    public int romanToInt(String s) {\n\t\tint num = 0;\n\t\tchar[] chars = s.toCharArray();\n\n\t\tfor (int i = 0; i < chars.length; ) {\n\t\t\tchar cur = chars[i];\n\n\t\t\tswitch (cur) {\n\t\t\tcase 'I':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 1;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'V') {\n\t\t\t\t\t\tnum += 4;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'X') {\n\t\t\t\t\t\tnum += 9;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 1;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'X':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 10;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'L') {\n\t\t\t\t\t\tnum += 40;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'C') {\n\t\t\t\t\t\tnum += 90;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 10;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 100;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'D') {\n\t\t\t\t\t\tnum += 400;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'M') {\n\t\t\t\t\t\tnum += 900;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 100;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'V':\n\t\t\t\tnum += 5;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tnum += 50;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tnum += 500;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tnum += 1000;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\treturn num;\n\t}\n}\n```\n","slug":"leetcode02","published":1,"updated":"2021-11-07T07:27:29.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8us000ihasgqi2rvm5l","content":"<h2 id=\"Palindrome-Number\"><a href=\"#Palindrome-Number\" class=\"headerlink\" title=\"Palindrome Number\"></a>Palindrome Number</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.<br><a id=\"more\"></a></p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 121</span><br><span class=\"line\">Output: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2:\"></a>Example 2:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: -121</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example 3:\"></a>Example 3:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 10</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isPalindrome(int x) &#123;</span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; digitals = getNumbers(x);</span><br><span class=\"line\">        int count = digitals.size();</span><br><span class=\"line\">        for (int i = 0; i &lt; count / 2; i++) &#123;</span><br><span class=\"line\">            if (digitals.get(i) != digitals.get(count - 1 - i)) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; getNumbers(int x) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; digitals = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        long y = (long)x;</span><br><span class=\"line\">        for (;y &gt; 0;) &#123;</span><br><span class=\"line\">            int z = (int) (y % 10);</span><br><span class=\"line\">            digitals.add(z);</span><br><span class=\"line\">            y = y / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return digitals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Roman-to-Integer\"><a href=\"#Roman-to-Integer\" class=\"headerlink\" title=\"Roman to Integer\"></a>Roman to Integer</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/roman-to-integer/\" target=\"_blank\" rel=\"noopener\">问题描述</a></h3><h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int romanToInt(String s) &#123;</span><br><span class=\"line\">\t\tint num = 0;</span><br><span class=\"line\">\t\tchar[] chars = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; chars.length; ) &#123;</span><br><span class=\"line\">\t\t\tchar cur = chars[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tswitch (cur) &#123;</span><br><span class=\"line\">\t\t\tcase &apos;I&apos;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 1;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &apos;V&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 4;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &apos;X&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 9;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 1;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;X&apos;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 10;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &apos;L&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 40;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &apos;C&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 90;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 10;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;C&apos;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 100;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &apos;D&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 400;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &apos;M&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 900;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 100;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcase &apos;V&apos;:</span><br><span class=\"line\">\t\t\t\tnum += 5;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;L&apos;:</span><br><span class=\"line\">\t\t\t\tnum += 50;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;D&apos;:</span><br><span class=\"line\">\t\t\t\tnum += 500;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;M&apos;:</span><br><span class=\"line\">\t\t\t\tnum += 1000;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Palindrome-Number\"><a href=\"#Palindrome-Number\" class=\"headerlink\" title=\"Palindrome Number\"></a>Palindrome Number</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.<br>","more":"</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 121</span><br><span class=\"line\">Output: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2:\"></a>Example 2:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: -121</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example 3:\"></a>Example 3:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 10</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isPalindrome(int x) &#123;</span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; digitals = getNumbers(x);</span><br><span class=\"line\">        int count = digitals.size();</span><br><span class=\"line\">        for (int i = 0; i &lt; count / 2; i++) &#123;</span><br><span class=\"line\">            if (digitals.get(i) != digitals.get(count - 1 - i)) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; getNumbers(int x) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; digitals = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        long y = (long)x;</span><br><span class=\"line\">        for (;y &gt; 0;) &#123;</span><br><span class=\"line\">            int z = (int) (y % 10);</span><br><span class=\"line\">            digitals.add(z);</span><br><span class=\"line\">            y = y / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return digitals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Roman-to-Integer\"><a href=\"#Roman-to-Integer\" class=\"headerlink\" title=\"Roman to Integer\"></a>Roman to Integer</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/roman-to-integer/\" target=\"_blank\" rel=\"noopener\">问题描述</a></h3><h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int romanToInt(String s) &#123;</span><br><span class=\"line\">\t\tint num = 0;</span><br><span class=\"line\">\t\tchar[] chars = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; chars.length; ) &#123;</span><br><span class=\"line\">\t\t\tchar cur = chars[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tswitch (cur) &#123;</span><br><span class=\"line\">\t\t\tcase &apos;I&apos;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 1;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &apos;V&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 4;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &apos;X&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 9;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 1;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;X&apos;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 10;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &apos;L&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 40;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &apos;C&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 90;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 10;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;C&apos;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 100;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &apos;D&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 400;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &apos;M&apos;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 900;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 100;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcase &apos;V&apos;:</span><br><span class=\"line\">\t\t\t\tnum += 5;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;L&apos;:</span><br><span class=\"line\">\t\t\t\tnum += 50;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;D&apos;:</span><br><span class=\"line\">\t\t\t\tnum += 500;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &apos;M&apos;:</span><br><span class=\"line\">\t\t\t\tnum += 1000;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode03","date":"2019-05-04T14:30:10.000Z","_content":"## \tLongest Common Prefix\n### [问题描述](https://leetcode.com/problems/longest-common-prefix/)\n<!--more-->\n### 解答\n```\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length < 1) {\n            return \"\";\n        }\n\n\t\tList<char[]> chars = new ArrayList<>();\n\t\tint _minLength = strs[0].length();\n\t\tfor (String s: strs) {\n\t\t\tchars.add(s.toCharArray());\n\t\t\tif (_minLength > s.length()) {\n\t\t\t\t_minLength = s.length();\n\t\t\t}\n\t\t}\n\n\t\tList<Character> result = new ArrayList<>();\n\t\tboolean breaked = false;\n\t\tfor (int i = 0; i < _minLength; i++) {\n\t\t\tchar ch1 = chars.get(0)[i];\n\t\t\tfor (int j = 1; j < strs.length; j++) {\n\t\t\t\tif (chars.get(j)[i] != ch1) {\n\t\t\t\t\tbreaked = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (breaked) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult.add(ch1);\n\t\t}\n\n\t\tif (result.size() == 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (Character character: result) {\n\t\t\t\tsb.append(character);\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n}\n```\n\n## Valid Parentheses\n\n### [问题描述](https://leetcode.com/problems/valid-parentheses/)\n### 解答\n```\nclass Solution {\n   public boolean isValid(String s) {\n        char[] chars = s.toCharArray();\n\n       if (chars.length == 0 ) {\n           return true;\n       }\n\n       if (chars.length < 2 || chars.length % 2 != 0) {\n           return false;\n       }\n\n        char[] stack = new char[chars.length];\n        int j = 0;\n        stack[0] = chars[0];\n        for (int i = 1; i < chars.length; i++) {\n            if (j >= 0 && (stack[j] == '('  && chars[i] == ')'\n                    || stack[j] == '[' && chars[i] == ']'\n                    || stack[j] == '{' && chars[i] == '}') ) {\n                j--;\n            } else {\n                stack[j+1] = chars[i];\n                j = j + 1;\n            }\n        }\n\n        if (j == -1) {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n$$\n\\sum\n$$\n","source":"_posts/leetcode03.md","raw":"---\ntitle: leetcode03\ndate: 2019-05-04 22:30:10\ntags:\n---\n## \tLongest Common Prefix\n### [问题描述](https://leetcode.com/problems/longest-common-prefix/)\n<!--more-->\n### 解答\n```\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length < 1) {\n            return \"\";\n        }\n\n\t\tList<char[]> chars = new ArrayList<>();\n\t\tint _minLength = strs[0].length();\n\t\tfor (String s: strs) {\n\t\t\tchars.add(s.toCharArray());\n\t\t\tif (_minLength > s.length()) {\n\t\t\t\t_minLength = s.length();\n\t\t\t}\n\t\t}\n\n\t\tList<Character> result = new ArrayList<>();\n\t\tboolean breaked = false;\n\t\tfor (int i = 0; i < _minLength; i++) {\n\t\t\tchar ch1 = chars.get(0)[i];\n\t\t\tfor (int j = 1; j < strs.length; j++) {\n\t\t\t\tif (chars.get(j)[i] != ch1) {\n\t\t\t\t\tbreaked = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (breaked) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult.add(ch1);\n\t\t}\n\n\t\tif (result.size() == 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (Character character: result) {\n\t\t\t\tsb.append(character);\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n}\n```\n\n## Valid Parentheses\n\n### [问题描述](https://leetcode.com/problems/valid-parentheses/)\n### 解答\n```\nclass Solution {\n   public boolean isValid(String s) {\n        char[] chars = s.toCharArray();\n\n       if (chars.length == 0 ) {\n           return true;\n       }\n\n       if (chars.length < 2 || chars.length % 2 != 0) {\n           return false;\n       }\n\n        char[] stack = new char[chars.length];\n        int j = 0;\n        stack[0] = chars[0];\n        for (int i = 1; i < chars.length; i++) {\n            if (j >= 0 && (stack[j] == '('  && chars[i] == ')'\n                    || stack[j] == '[' && chars[i] == ']'\n                    || stack[j] == '{' && chars[i] == '}') ) {\n                j--;\n            } else {\n                stack[j+1] = chars[i];\n                j = j + 1;\n            }\n        }\n\n        if (j == -1) {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n$$\n\\sum\n$$\n","slug":"leetcode03","published":1,"updated":"2021-11-07T07:27:29.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8ut000khasgzluzpdao","content":"<h2 id=\"Longest-Common-Prefix\"><a href=\"#Longest-Common-Prefix\" class=\"headerlink\" title=\"Longest Common Prefix\"></a>Longest Common Prefix</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">问题描述</a></h3><a id=\"more\"></a>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public String longestCommonPrefix(String[] strs) &#123;</span><br><span class=\"line\">        if (strs.length &lt; 1) &#123;</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;char[]&gt; chars = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tint _minLength = strs[0].length();</span><br><span class=\"line\">\t\tfor (String s: strs) &#123;</span><br><span class=\"line\">\t\t\tchars.add(s.toCharArray());</span><br><span class=\"line\">\t\t\tif (_minLength &gt; s.length()) &#123;</span><br><span class=\"line\">\t\t\t\t_minLength = s.length();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;Character&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tboolean breaked = false;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; _minLength; i++) &#123;</span><br><span class=\"line\">\t\t\tchar ch1 = chars.get(0)[i];</span><br><span class=\"line\">\t\t\tfor (int j = 1; j &lt; strs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (chars.get(j)[i] != ch1) &#123;</span><br><span class=\"line\">\t\t\t\t\tbreaked = true;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (breaked) &#123;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresult.add(ch1);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (result.size() == 0) &#123;</span><br><span class=\"line\">\t\t\treturn &quot;&quot;;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tStringBuilder sb = new StringBuilder();</span><br><span class=\"line\">\t\t\tfor (Character character: result) &#123;</span><br><span class=\"line\">\t\t\t\tsb.append(character);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn sb.toString();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Valid-Parentheses\"><a href=\"#Valid-Parentheses\" class=\"headerlink\" title=\"Valid Parentheses\"></a>Valid Parentheses</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">问题描述</a></h3><h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">   public boolean isValid(String s) &#123;</span><br><span class=\"line\">        char[] chars = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (chars.length == 0 ) &#123;</span><br><span class=\"line\">           return true;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (chars.length &lt; 2 || chars.length % 2 != 0) &#123;</span><br><span class=\"line\">           return false;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        char[] stack = new char[chars.length];</span><br><span class=\"line\">        int j = 0;</span><br><span class=\"line\">        stack[0] = chars[0];</span><br><span class=\"line\">        for (int i = 1; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">            if (j &gt;= 0 &amp;&amp; (stack[j] == &apos;(&apos;  &amp;&amp; chars[i] == &apos;)&apos;</span><br><span class=\"line\">                    || stack[j] == &apos;[&apos; &amp;&amp; chars[i] == &apos;]&apos;</span><br><span class=\"line\">                    || stack[j] == &apos;&#123;&apos; &amp;&amp; chars[i] == &apos;&#125;&apos;) ) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                stack[j+1] = chars[i];</span><br><span class=\"line\">                j = j + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (j == -1) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$$<br>\\sum<br>$$</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Longest-Common-Prefix\"><a href=\"#Longest-Common-Prefix\" class=\"headerlink\" title=\"Longest Common Prefix\"></a>Longest Common Prefix</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">问题描述</a></h3>","more":"<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public String longestCommonPrefix(String[] strs) &#123;</span><br><span class=\"line\">        if (strs.length &lt; 1) &#123;</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;char[]&gt; chars = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tint _minLength = strs[0].length();</span><br><span class=\"line\">\t\tfor (String s: strs) &#123;</span><br><span class=\"line\">\t\t\tchars.add(s.toCharArray());</span><br><span class=\"line\">\t\t\tif (_minLength &gt; s.length()) &#123;</span><br><span class=\"line\">\t\t\t\t_minLength = s.length();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;Character&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tboolean breaked = false;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; _minLength; i++) &#123;</span><br><span class=\"line\">\t\t\tchar ch1 = chars.get(0)[i];</span><br><span class=\"line\">\t\t\tfor (int j = 1; j &lt; strs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (chars.get(j)[i] != ch1) &#123;</span><br><span class=\"line\">\t\t\t\t\tbreaked = true;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (breaked) &#123;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresult.add(ch1);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (result.size() == 0) &#123;</span><br><span class=\"line\">\t\t\treturn &quot;&quot;;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tStringBuilder sb = new StringBuilder();</span><br><span class=\"line\">\t\t\tfor (Character character: result) &#123;</span><br><span class=\"line\">\t\t\t\tsb.append(character);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn sb.toString();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Valid-Parentheses\"><a href=\"#Valid-Parentheses\" class=\"headerlink\" title=\"Valid Parentheses\"></a>Valid Parentheses</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">问题描述</a></h3><h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">   public boolean isValid(String s) &#123;</span><br><span class=\"line\">        char[] chars = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (chars.length == 0 ) &#123;</span><br><span class=\"line\">           return true;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (chars.length &lt; 2 || chars.length % 2 != 0) &#123;</span><br><span class=\"line\">           return false;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        char[] stack = new char[chars.length];</span><br><span class=\"line\">        int j = 0;</span><br><span class=\"line\">        stack[0] = chars[0];</span><br><span class=\"line\">        for (int i = 1; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">            if (j &gt;= 0 &amp;&amp; (stack[j] == &apos;(&apos;  &amp;&amp; chars[i] == &apos;)&apos;</span><br><span class=\"line\">                    || stack[j] == &apos;[&apos; &amp;&amp; chars[i] == &apos;]&apos;</span><br><span class=\"line\">                    || stack[j] == &apos;&#123;&apos; &amp;&amp; chars[i] == &apos;&#125;&apos;) ) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                stack[j+1] = chars[i];</span><br><span class=\"line\">                j = j + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (j == -1) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$$<br>\\sum<br>$$</p>"},{"title":"leetcode04","date":"2020-11-14T09:40:15.000Z","_content":"## 两数相加\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n链接：https://leetcode-cn.com/problems/add-two-numbers\n\n<!--more-->\n\n## 解题思路\n\n1. 两个非负整数相加有可能超过10，因此需要一个变量标记链表中两个节点之和是否超过10；\n2. 第二个关键点是如何判断指针是否到了链表尾部，分为2中情况\n```\n1、2个链表不一样长；\n2、2个链表一样长；\n其实上面2中情况可以通过一定的手段归结为一种情况，即：对于较短的链表，在其尾部补上值为0的节点即可；\n3、我们需要2个指针分表指向当前节点\n```\n\n3. 为了减少内存开销，我们可以把计算结果存储到两个链表中的一个。\n4. 因为我们前面同步补0的方式把两个链表长度变为一样长，因此需要标志位标记下什么时候2个链表被补齐了；\n\n## 实现\n综上，总体算法如下：\n\n```golang\nfunc AddTowNumber(l1 *ListNode, l2 *ListNode) *ListNode {\n\th1 := l1\n\th2 := l2\n\tbefore := h1\n\tcarry := 0\n\tflag := false\n\tflag1 := false\n\n\tfor ; ; {\n\t\tif h1.Next == nil {\n\t\t\th1.Next = &ListNode{0 , nil}\n\t\t\tflag = true\n\t\t}\n\n\t\tif h2.Next == nil {\n\t\t\th2.Next = &ListNode{0, nil}\n\t\t\tflag1 = true\n\t\t}\n\n\t\tif h1.Val == 0 && h2.Val == 0 && flag1 && flag{\n\t\t\tbreak\n\t\t}\n\n\t\tsum := h1.Val + h2.Val + carry\n\t\tif sum >= 10 {\n\t\t\tcarry = 1\n\t\t\tsum -= 10\n\t\t} else {\n\t\t\tcarry = 0\n\t\t}\n\t\th1.Val = sum\n\t\tbefore = h1\n\t\th1 = h1.Next\n\t\th2 = h2.Next\n\t}\n\n\tbefore.Next = nil\n\th1 = before\n\n\tif carry > 0 {\n\t\ttmp := ListNode{1, nil}\n\t\th1.Next = &tmp\n\t}\n\n\tfor ; l1.Next != nil; l1 = l1.Next {\n\t\tfmt.Println(l1.Val)\n\t}\n\n\tfmt.Println(l1.Val)\n\n\treturn l1\n}\n```\n","source":"_posts/leetcode04.md","raw":"---\ntitle: leetcode04\ndate: 2020-11-14 17:40:15\ntags: alogrithm\n---\n## 两数相加\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n链接：https://leetcode-cn.com/problems/add-two-numbers\n\n<!--more-->\n\n## 解题思路\n\n1. 两个非负整数相加有可能超过10，因此需要一个变量标记链表中两个节点之和是否超过10；\n2. 第二个关键点是如何判断指针是否到了链表尾部，分为2中情况\n```\n1、2个链表不一样长；\n2、2个链表一样长；\n其实上面2中情况可以通过一定的手段归结为一种情况，即：对于较短的链表，在其尾部补上值为0的节点即可；\n3、我们需要2个指针分表指向当前节点\n```\n\n3. 为了减少内存开销，我们可以把计算结果存储到两个链表中的一个。\n4. 因为我们前面同步补0的方式把两个链表长度变为一样长，因此需要标志位标记下什么时候2个链表被补齐了；\n\n## 实现\n综上，总体算法如下：\n\n```golang\nfunc AddTowNumber(l1 *ListNode, l2 *ListNode) *ListNode {\n\th1 := l1\n\th2 := l2\n\tbefore := h1\n\tcarry := 0\n\tflag := false\n\tflag1 := false\n\n\tfor ; ; {\n\t\tif h1.Next == nil {\n\t\t\th1.Next = &ListNode{0 , nil}\n\t\t\tflag = true\n\t\t}\n\n\t\tif h2.Next == nil {\n\t\t\th2.Next = &ListNode{0, nil}\n\t\t\tflag1 = true\n\t\t}\n\n\t\tif h1.Val == 0 && h2.Val == 0 && flag1 && flag{\n\t\t\tbreak\n\t\t}\n\n\t\tsum := h1.Val + h2.Val + carry\n\t\tif sum >= 10 {\n\t\t\tcarry = 1\n\t\t\tsum -= 10\n\t\t} else {\n\t\t\tcarry = 0\n\t\t}\n\t\th1.Val = sum\n\t\tbefore = h1\n\t\th1 = h1.Next\n\t\th2 = h2.Next\n\t}\n\n\tbefore.Next = nil\n\th1 = before\n\n\tif carry > 0 {\n\t\ttmp := ListNode{1, nil}\n\t\th1.Next = &tmp\n\t}\n\n\tfor ; l1.Next != nil; l1 = l1.Next {\n\t\tfmt.Println(l1.Val)\n\t}\n\n\tfmt.Println(l1.Val)\n\n\treturn l1\n}\n```\n","slug":"leetcode04","published":1,"updated":"2021-11-07T07:27:29.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8uv000mhasgkny0s8gj","content":"<h2 id=\"两数相加\"><a href=\"#两数相加\" class=\"headerlink\" title=\"两数相加\"></a>两数相加</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/add-two-numbers\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/add-two-numbers</a></p>\n<a id=\"more\"></a>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>两个非负整数相加有可能超过10，因此需要一个变量标记链表中两个节点之和是否超过10；</li>\n<li><p>第二个关键点是如何判断指针是否到了链表尾部，分为2中情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、2个链表不一样长；</span><br><span class=\"line\">2、2个链表一样长；</span><br><span class=\"line\">其实上面2中情况可以通过一定的手段归结为一种情况，即：对于较短的链表，在其尾部补上值为0的节点即可；</span><br><span class=\"line\">3、我们需要2个指针分表指向当前节点</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了减少内存开销，我们可以把计算结果存储到两个链表中的一个。</p>\n</li>\n<li>因为我们前面同步补0的方式把两个链表长度变为一样长，因此需要标志位标记下什么时候2个链表被补齐了；</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>综上，总体算法如下：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddTowNumber</span><span class=\"params\">(l1 *ListNode, l2 *ListNode)</span> *<span class=\"title\">ListNode</span></span> &#123;</span><br><span class=\"line\">\th1 := l1</span><br><span class=\"line\">\th2 := l2</span><br><span class=\"line\">\tbefore := h1</span><br><span class=\"line\">\tcarry := <span class=\"number\">0</span></span><br><span class=\"line\">\tflag := <span class=\"literal\">false</span></span><br><span class=\"line\">\tflag1 := <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; ; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h1.Next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\th1.Next = &amp;ListNode&#123;<span class=\"number\">0</span> , <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h2.Next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\th2.Next = &amp;ListNode&#123;<span class=\"number\">0</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\t\tflag1 = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h1.Val == <span class=\"number\">0</span> &amp;&amp; h2.Val == <span class=\"number\">0</span> &amp;&amp; flag1 &amp;&amp; flag&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsum := h1.Val + h2.Val + carry</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sum &gt;= <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\tcarry = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tsum -= <span class=\"number\">10</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcarry = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th1.Val = sum</span><br><span class=\"line\">\t\tbefore = h1</span><br><span class=\"line\">\t\th1 = h1.Next</span><br><span class=\"line\">\t\th2 = h2.Next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbefore.Next = <span class=\"literal\">nil</span></span><br><span class=\"line\">\th1 = before</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> carry &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttmp := ListNode&#123;<span class=\"number\">1</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\th1.Next = &amp;tmp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; l1.Next != <span class=\"literal\">nil</span>; l1 = l1.Next &#123;</span><br><span class=\"line\">\t\tfmt.Println(l1.Val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(l1.Val)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"两数相加\"><a href=\"#两数相加\" class=\"headerlink\" title=\"两数相加\"></a>两数相加</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/add-two-numbers\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/add-two-numbers</a></p>","more":"<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>两个非负整数相加有可能超过10，因此需要一个变量标记链表中两个节点之和是否超过10；</li>\n<li><p>第二个关键点是如何判断指针是否到了链表尾部，分为2中情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、2个链表不一样长；</span><br><span class=\"line\">2、2个链表一样长；</span><br><span class=\"line\">其实上面2中情况可以通过一定的手段归结为一种情况，即：对于较短的链表，在其尾部补上值为0的节点即可；</span><br><span class=\"line\">3、我们需要2个指针分表指向当前节点</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了减少内存开销，我们可以把计算结果存储到两个链表中的一个。</p>\n</li>\n<li>因为我们前面同步补0的方式把两个链表长度变为一样长，因此需要标志位标记下什么时候2个链表被补齐了；</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>综上，总体算法如下：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddTowNumber</span><span class=\"params\">(l1 *ListNode, l2 *ListNode)</span> *<span class=\"title\">ListNode</span></span> &#123;</span><br><span class=\"line\">\th1 := l1</span><br><span class=\"line\">\th2 := l2</span><br><span class=\"line\">\tbefore := h1</span><br><span class=\"line\">\tcarry := <span class=\"number\">0</span></span><br><span class=\"line\">\tflag := <span class=\"literal\">false</span></span><br><span class=\"line\">\tflag1 := <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; ; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h1.Next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\th1.Next = &amp;ListNode&#123;<span class=\"number\">0</span> , <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h2.Next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\th2.Next = &amp;ListNode&#123;<span class=\"number\">0</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\t\tflag1 = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h1.Val == <span class=\"number\">0</span> &amp;&amp; h2.Val == <span class=\"number\">0</span> &amp;&amp; flag1 &amp;&amp; flag&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsum := h1.Val + h2.Val + carry</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sum &gt;= <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\tcarry = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tsum -= <span class=\"number\">10</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcarry = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th1.Val = sum</span><br><span class=\"line\">\t\tbefore = h1</span><br><span class=\"line\">\t\th1 = h1.Next</span><br><span class=\"line\">\t\th2 = h2.Next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbefore.Next = <span class=\"literal\">nil</span></span><br><span class=\"line\">\th1 = before</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> carry &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttmp := ListNode&#123;<span class=\"number\">1</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\th1.Next = &amp;tmp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; l1.Next != <span class=\"literal\">nil</span>; l1 = l1.Next &#123;</span><br><span class=\"line\">\t\tfmt.Println(l1.Val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(l1.Val)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"linux strace command introduction","date":"2019-05-27T15:23:02.000Z","_content":"## Linux strace 命令\n\n### 简介\nstrace（trace system calls and signals）命令是linux系统下的一款调试利器，用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间等。\n\n<!--more-->\n\n### 安装\nUbuntu系统已默认安装了strace，centos系列可以使用yum命令安装。当然，也可以直接通过源码安装，源码链接：https://github.com/strace/strace\n\n### 常见用法\n```shell\nstrace [-ACdffhikqrtttTvVxxy] [-ACdffhiqrtttTvVxxy] [-I n]\n              [-b execve] [-e expr]... [-a column] [-o file] [-s strsize]\n              [-X format] [-P path]... [-p pid]... { -p pid | [-D]\n              [-E var[=val]]... [-u username] command [args] }\n\nstrace -c [-df] [-I n] [-b execve] [-e expr]... [-O overhead]\n              [-S sortby] [-P path]... [-p pid]... { -p pid | [-D]\n              [-E var[=val]]... [-u username] command [args] }\n\n```\n\n常见参数说明\n\n```\n1. -c -- count time, calls, and errors for each syscall and report summary\n为每个系统调用计算时间、调用、错误，并报告摘要\n\n2. -f -- follow forks, -ff -- with output into separate files\n-f 跟踪fork的进程；-ff 把输出定向到独立的文件\n\n3. -F -- attempt to follow vforks, -h -- print help message\n-F 尝试跟踪vfork的进程，当今平台与-f功能相同；-h 打印帮助信息\n\n4. -i -- print instruction pointer at time of syscall\n在系统调用时，打印指令指针\n\n5. -q -- suppress messages about attaching, detaching, etc.\n抑制附加、分离等信息\n\n6. -r -- print relative timestamp, -t -- absolute timestamp, -tt -- with usecs\n-r 打印相对时间戳；-t 绝对时间戳；-tt 微秒\n\n7. -T -- print time spent in each syscall, -V -- print version\n-T 打印每个系统调用的时间花费；-V 打印版本\n\n8. -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args\n-v 详细模式，打印非简略的参数、状态、termio[s]等\n\n9. -x -- print non-ascii strings in hex, -xx -- print all strings in hex\n-x 打印非ascii的字符串为16进制；-xx 打印所有的字符串为16进制\n\n10. -a column -- alignment COLUMN for printing syscall results (default 40)\n对系统调用结果对齐列（默认为40列）\n\n11. -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...\n    options: trace, abbrev, verbose, raw, signal, read, or write\n在-e后附表达式。一个合格的表达式：选项=[!]所有 或者 选项=[!]值1[,值2]....；可选项:跟踪、缩写、冗长、原始的东东、信号、读、写。\n\n12. -o file -- send trace output to FILE instead of stderr\n发送跟踪输出到文件，而不是stderr\n\n13. -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs\n设置跟踪系统调用的最大时间\n\n14. -p pid -- trace process with process id PID, may be repeated\n跟踪值为ID的进程，可以重复多个哦(注：最多32个)\n\n15. -s strsize -- limit length of print strings to STRSIZE chars (default 32)\n限制打印字符串的最大长度，默认为32字节\n\n16. -S sortby -- sort syscall counts by: time, calls, name, nothing (default time)\n排序，以系统调用过程中的时间、或者调用名等作为排序项。\n\n17. -u username -- run command as username handling setuid and/or setgid\n以其他用户名或者组名运行命令\n\n18. -E var=val -- put var=val in the environment for command\n设置环境变量\n\n19. -E var -- remove var from the environment for command\n清除环境变量\n```\n\n更详细的用法可以用man strace获取。\n","source":"_posts/linux-strace-command-introduction.md","raw":"---\ntitle: linux strace command introduction\ndate: 2019-05-27 23:23:02\ntags: linux perf tools\n---\n## Linux strace 命令\n\n### 简介\nstrace（trace system calls and signals）命令是linux系统下的一款调试利器，用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间等。\n\n<!--more-->\n\n### 安装\nUbuntu系统已默认安装了strace，centos系列可以使用yum命令安装。当然，也可以直接通过源码安装，源码链接：https://github.com/strace/strace\n\n### 常见用法\n```shell\nstrace [-ACdffhikqrtttTvVxxy] [-ACdffhiqrtttTvVxxy] [-I n]\n              [-b execve] [-e expr]... [-a column] [-o file] [-s strsize]\n              [-X format] [-P path]... [-p pid]... { -p pid | [-D]\n              [-E var[=val]]... [-u username] command [args] }\n\nstrace -c [-df] [-I n] [-b execve] [-e expr]... [-O overhead]\n              [-S sortby] [-P path]... [-p pid]... { -p pid | [-D]\n              [-E var[=val]]... [-u username] command [args] }\n\n```\n\n常见参数说明\n\n```\n1. -c -- count time, calls, and errors for each syscall and report summary\n为每个系统调用计算时间、调用、错误，并报告摘要\n\n2. -f -- follow forks, -ff -- with output into separate files\n-f 跟踪fork的进程；-ff 把输出定向到独立的文件\n\n3. -F -- attempt to follow vforks, -h -- print help message\n-F 尝试跟踪vfork的进程，当今平台与-f功能相同；-h 打印帮助信息\n\n4. -i -- print instruction pointer at time of syscall\n在系统调用时，打印指令指针\n\n5. -q -- suppress messages about attaching, detaching, etc.\n抑制附加、分离等信息\n\n6. -r -- print relative timestamp, -t -- absolute timestamp, -tt -- with usecs\n-r 打印相对时间戳；-t 绝对时间戳；-tt 微秒\n\n7. -T -- print time spent in each syscall, -V -- print version\n-T 打印每个系统调用的时间花费；-V 打印版本\n\n8. -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args\n-v 详细模式，打印非简略的参数、状态、termio[s]等\n\n9. -x -- print non-ascii strings in hex, -xx -- print all strings in hex\n-x 打印非ascii的字符串为16进制；-xx 打印所有的字符串为16进制\n\n10. -a column -- alignment COLUMN for printing syscall results (default 40)\n对系统调用结果对齐列（默认为40列）\n\n11. -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...\n    options: trace, abbrev, verbose, raw, signal, read, or write\n在-e后附表达式。一个合格的表达式：选项=[!]所有 或者 选项=[!]值1[,值2]....；可选项:跟踪、缩写、冗长、原始的东东、信号、读、写。\n\n12. -o file -- send trace output to FILE instead of stderr\n发送跟踪输出到文件，而不是stderr\n\n13. -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs\n设置跟踪系统调用的最大时间\n\n14. -p pid -- trace process with process id PID, may be repeated\n跟踪值为ID的进程，可以重复多个哦(注：最多32个)\n\n15. -s strsize -- limit length of print strings to STRSIZE chars (default 32)\n限制打印字符串的最大长度，默认为32字节\n\n16. -S sortby -- sort syscall counts by: time, calls, name, nothing (default time)\n排序，以系统调用过程中的时间、或者调用名等作为排序项。\n\n17. -u username -- run command as username handling setuid and/or setgid\n以其他用户名或者组名运行命令\n\n18. -E var=val -- put var=val in the environment for command\n设置环境变量\n\n19. -E var -- remove var from the environment for command\n清除环境变量\n```\n\n更详细的用法可以用man strace获取。\n","slug":"linux-strace-command-introduction","published":1,"updated":"2021-11-07T07:27:29.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8uw000ohasggqee11pc","content":"<h2 id=\"Linux-strace-命令\"><a href=\"#Linux-strace-命令\" class=\"headerlink\" title=\"Linux strace 命令\"></a>Linux strace 命令</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>strace（trace system calls and signals）命令是linux系统下的一款调试利器，用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间等。</p>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Ubuntu系统已默认安装了strace，centos系列可以使用yum命令安装。当然，也可以直接通过源码安装，源码链接：<a href=\"https://github.com/strace/strace\">https://github.com/strace/strace</a></p>\n<h3 id=\"常见用法\"><a href=\"#常见用法\" class=\"headerlink\" title=\"常见用法\"></a>常见用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace [-ACdffhikqrtttTvVxxy] [-ACdffhiqrtttTvVxxy] [-I n]</span><br><span class=\"line\">              [-b execve] [-e expr]... [-a column] [-o file] [-s strsize]</span><br><span class=\"line\">              [-X format] [-P path]... [-p pid]... &#123; -p pid | [-D]</span><br><span class=\"line\">              [-E var[=val]]... [-u username] command [args] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">strace -c [-df] [-I n] [-b execve] [-e expr]... [-O overhead]</span><br><span class=\"line\">              [-S sortby] [-P path]... [-p pid]... &#123; -p pid | [-D]</span><br><span class=\"line\">              [-E var[=val]]... [-u username] command [args] &#125;</span><br></pre></td></tr></table></figure>\n<p>常见参数说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. -c -- count time, calls, and errors for each syscall and report summary</span><br><span class=\"line\">为每个系统调用计算时间、调用、错误，并报告摘要</span><br><span class=\"line\"></span><br><span class=\"line\">2. -f -- follow forks, -ff -- with output into separate files</span><br><span class=\"line\">-f 跟踪fork的进程；-ff 把输出定向到独立的文件</span><br><span class=\"line\"></span><br><span class=\"line\">3. -F -- attempt to follow vforks, -h -- print help message</span><br><span class=\"line\">-F 尝试跟踪vfork的进程，当今平台与-f功能相同；-h 打印帮助信息</span><br><span class=\"line\"></span><br><span class=\"line\">4. -i -- print instruction pointer at time of syscall</span><br><span class=\"line\">在系统调用时，打印指令指针</span><br><span class=\"line\"></span><br><span class=\"line\">5. -q -- suppress messages about attaching, detaching, etc.</span><br><span class=\"line\">抑制附加、分离等信息</span><br><span class=\"line\"></span><br><span class=\"line\">6. -r -- print relative timestamp, -t -- absolute timestamp, -tt -- with usecs</span><br><span class=\"line\">-r 打印相对时间戳；-t 绝对时间戳；-tt 微秒</span><br><span class=\"line\"></span><br><span class=\"line\">7. -T -- print time spent in each syscall, -V -- print version</span><br><span class=\"line\">-T 打印每个系统调用的时间花费；-V 打印版本</span><br><span class=\"line\"></span><br><span class=\"line\">8. -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args</span><br><span class=\"line\">-v 详细模式，打印非简略的参数、状态、termio[s]等</span><br><span class=\"line\"></span><br><span class=\"line\">9. -x -- print non-ascii strings in hex, -xx -- print all strings in hex</span><br><span class=\"line\">-x 打印非ascii的字符串为16进制；-xx 打印所有的字符串为16进制</span><br><span class=\"line\"></span><br><span class=\"line\">10. -a column -- alignment COLUMN for printing syscall results (default 40)</span><br><span class=\"line\">对系统调用结果对齐列（默认为40列）</span><br><span class=\"line\"></span><br><span class=\"line\">11. -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...</span><br><span class=\"line\">    options: trace, abbrev, verbose, raw, signal, read, or write</span><br><span class=\"line\">在-e后附表达式。一个合格的表达式：选项=[!]所有 或者 选项=[!]值1[,值2]....；可选项:跟踪、缩写、冗长、原始的东东、信号、读、写。</span><br><span class=\"line\"></span><br><span class=\"line\">12. -o file -- send trace output to FILE instead of stderr</span><br><span class=\"line\">发送跟踪输出到文件，而不是stderr</span><br><span class=\"line\"></span><br><span class=\"line\">13. -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs</span><br><span class=\"line\">设置跟踪系统调用的最大时间</span><br><span class=\"line\"></span><br><span class=\"line\">14. -p pid -- trace process with process id PID, may be repeated</span><br><span class=\"line\">跟踪值为ID的进程，可以重复多个哦(注：最多32个)</span><br><span class=\"line\"></span><br><span class=\"line\">15. -s strsize -- limit length of print strings to STRSIZE chars (default 32)</span><br><span class=\"line\">限制打印字符串的最大长度，默认为32字节</span><br><span class=\"line\"></span><br><span class=\"line\">16. -S sortby -- sort syscall counts by: time, calls, name, nothing (default time)</span><br><span class=\"line\">排序，以系统调用过程中的时间、或者调用名等作为排序项。</span><br><span class=\"line\"></span><br><span class=\"line\">17. -u username -- run command as username handling setuid and/or setgid</span><br><span class=\"line\">以其他用户名或者组名运行命令</span><br><span class=\"line\"></span><br><span class=\"line\">18. -E var=val -- put var=val in the environment for command</span><br><span class=\"line\">设置环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">19. -E var -- remove var from the environment for command</span><br><span class=\"line\">清除环境变量</span><br></pre></td></tr></table></figure>\n<p>更详细的用法可以用man strace获取。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Linux-strace-命令\"><a href=\"#Linux-strace-命令\" class=\"headerlink\" title=\"Linux strace 命令\"></a>Linux strace 命令</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>strace（trace system calls and signals）命令是linux系统下的一款调试利器，用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间等。</p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Ubuntu系统已默认安装了strace，centos系列可以使用yum命令安装。当然，也可以直接通过源码安装，源码链接：<a href=\"https://github.com/strace/strace\">https://github.com/strace/strace</a></p>\n<h3 id=\"常见用法\"><a href=\"#常见用法\" class=\"headerlink\" title=\"常见用法\"></a>常见用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace [-ACdffhikqrtttTvVxxy] [-ACdffhiqrtttTvVxxy] [-I n]</span><br><span class=\"line\">              [-b execve] [-e expr]... [-a column] [-o file] [-s strsize]</span><br><span class=\"line\">              [-X format] [-P path]... [-p pid]... &#123; -p pid | [-D]</span><br><span class=\"line\">              [-E var[=val]]... [-u username] command [args] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">strace -c [-df] [-I n] [-b execve] [-e expr]... [-O overhead]</span><br><span class=\"line\">              [-S sortby] [-P path]... [-p pid]... &#123; -p pid | [-D]</span><br><span class=\"line\">              [-E var[=val]]... [-u username] command [args] &#125;</span><br></pre></td></tr></table></figure>\n<p>常见参数说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. -c -- count time, calls, and errors for each syscall and report summary</span><br><span class=\"line\">为每个系统调用计算时间、调用、错误，并报告摘要</span><br><span class=\"line\"></span><br><span class=\"line\">2. -f -- follow forks, -ff -- with output into separate files</span><br><span class=\"line\">-f 跟踪fork的进程；-ff 把输出定向到独立的文件</span><br><span class=\"line\"></span><br><span class=\"line\">3. -F -- attempt to follow vforks, -h -- print help message</span><br><span class=\"line\">-F 尝试跟踪vfork的进程，当今平台与-f功能相同；-h 打印帮助信息</span><br><span class=\"line\"></span><br><span class=\"line\">4. -i -- print instruction pointer at time of syscall</span><br><span class=\"line\">在系统调用时，打印指令指针</span><br><span class=\"line\"></span><br><span class=\"line\">5. -q -- suppress messages about attaching, detaching, etc.</span><br><span class=\"line\">抑制附加、分离等信息</span><br><span class=\"line\"></span><br><span class=\"line\">6. -r -- print relative timestamp, -t -- absolute timestamp, -tt -- with usecs</span><br><span class=\"line\">-r 打印相对时间戳；-t 绝对时间戳；-tt 微秒</span><br><span class=\"line\"></span><br><span class=\"line\">7. -T -- print time spent in each syscall, -V -- print version</span><br><span class=\"line\">-T 打印每个系统调用的时间花费；-V 打印版本</span><br><span class=\"line\"></span><br><span class=\"line\">8. -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args</span><br><span class=\"line\">-v 详细模式，打印非简略的参数、状态、termio[s]等</span><br><span class=\"line\"></span><br><span class=\"line\">9. -x -- print non-ascii strings in hex, -xx -- print all strings in hex</span><br><span class=\"line\">-x 打印非ascii的字符串为16进制；-xx 打印所有的字符串为16进制</span><br><span class=\"line\"></span><br><span class=\"line\">10. -a column -- alignment COLUMN for printing syscall results (default 40)</span><br><span class=\"line\">对系统调用结果对齐列（默认为40列）</span><br><span class=\"line\"></span><br><span class=\"line\">11. -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...</span><br><span class=\"line\">    options: trace, abbrev, verbose, raw, signal, read, or write</span><br><span class=\"line\">在-e后附表达式。一个合格的表达式：选项=[!]所有 或者 选项=[!]值1[,值2]....；可选项:跟踪、缩写、冗长、原始的东东、信号、读、写。</span><br><span class=\"line\"></span><br><span class=\"line\">12. -o file -- send trace output to FILE instead of stderr</span><br><span class=\"line\">发送跟踪输出到文件，而不是stderr</span><br><span class=\"line\"></span><br><span class=\"line\">13. -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs</span><br><span class=\"line\">设置跟踪系统调用的最大时间</span><br><span class=\"line\"></span><br><span class=\"line\">14. -p pid -- trace process with process id PID, may be repeated</span><br><span class=\"line\">跟踪值为ID的进程，可以重复多个哦(注：最多32个)</span><br><span class=\"line\"></span><br><span class=\"line\">15. -s strsize -- limit length of print strings to STRSIZE chars (default 32)</span><br><span class=\"line\">限制打印字符串的最大长度，默认为32字节</span><br><span class=\"line\"></span><br><span class=\"line\">16. -S sortby -- sort syscall counts by: time, calls, name, nothing (default time)</span><br><span class=\"line\">排序，以系统调用过程中的时间、或者调用名等作为排序项。</span><br><span class=\"line\"></span><br><span class=\"line\">17. -u username -- run command as username handling setuid and/or setgid</span><br><span class=\"line\">以其他用户名或者组名运行命令</span><br><span class=\"line\"></span><br><span class=\"line\">18. -E var=val -- put var=val in the environment for command</span><br><span class=\"line\">设置环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">19. -E var -- remove var from the environment for command</span><br><span class=\"line\">清除环境变量</span><br></pre></td></tr></table></figure>\n<p>更详细的用法可以用man strace获取。</p>"},{"title":"薛兆丰经济学讲义读书笔记2","date":"2019-03-10T13:51:12.000Z","_content":"## 成本 -- 不要只盯着钱\n<!--more-->\n* 企业家是资源配置的中间人；\n* 成本是放弃了的最大的代价，即如果一个资源有若干个选项时，被选中的那个，它的成本就是所有放弃了的选项中价值最高的那个。\n  * 负面的感受不是成本；\n  * 你的成本由别人决定的；\n* 个人的职业范围是由别人决定的：\n  * 你拥有你的生命，但是你的生命是怎么度过的，你的职业是怎么选择的，很大程度上是由社会生其他人决定的。\n* 货币成本vs全部成本\n  * 货币成本不是全部成本，全部成本应该包括所有可能的成本；\n* **中间商赚差价，会让商品更便宜**\n  * 没有了中间商，货币成本确实降低了，但是其他成本会上去。比如花时间去地里摘蔬菜，或者去屠宰场买猪肉，花费的时间和其他成本更高。\n* 从成本的角度理解赢利与亏损\n  * 盈利和亏损都是意外；\n  * 盈利提高了未来使用的成本\n  * 亏损会降低资源使用成本；\n* 最终产品的工序决定原材料的成本\n  * 产品价格形成过程的理论\n    * 成本决定论\n      * 理论逻辑错误：如果产品成本越高，售价越高，那么企业家要赚取更多的利润，越高努力推高产品成本，从而提高售价；\n    * 供需决定论\n      * 供需关系决定商品价格，商品价格决定资源成本；\n* “租”是对资产的付费\n  * 租是旱涝保收的收入，白赚的收入\n* 寻租\n  * 寻租是指那些向政府争取优惠政策，让自己得到好处，同时导致社会总资源发生耗散的行为。\n\n### 科斯定律\n* 社会成本问题\n  * 所有的伤害都是相互的；\n  * 谁避免意外成本最低，谁的责任就最大；\n  * 科斯定律：在交易费为零或足够低的情况下，不管资源最初的主人是谁，资源都同样会流到价值最高的用途上去。\n","source":"_posts/薛兆丰经济学讲义读书笔记2.md","raw":"---\ntitle: 薛兆丰经济学讲义读书笔记2\ndate: 2019-03-10 21:51:12\ntags:\n---\n## 成本 -- 不要只盯着钱\n<!--more-->\n* 企业家是资源配置的中间人；\n* 成本是放弃了的最大的代价，即如果一个资源有若干个选项时，被选中的那个，它的成本就是所有放弃了的选项中价值最高的那个。\n  * 负面的感受不是成本；\n  * 你的成本由别人决定的；\n* 个人的职业范围是由别人决定的：\n  * 你拥有你的生命，但是你的生命是怎么度过的，你的职业是怎么选择的，很大程度上是由社会生其他人决定的。\n* 货币成本vs全部成本\n  * 货币成本不是全部成本，全部成本应该包括所有可能的成本；\n* **中间商赚差价，会让商品更便宜**\n  * 没有了中间商，货币成本确实降低了，但是其他成本会上去。比如花时间去地里摘蔬菜，或者去屠宰场买猪肉，花费的时间和其他成本更高。\n* 从成本的角度理解赢利与亏损\n  * 盈利和亏损都是意外；\n  * 盈利提高了未来使用的成本\n  * 亏损会降低资源使用成本；\n* 最终产品的工序决定原材料的成本\n  * 产品价格形成过程的理论\n    * 成本决定论\n      * 理论逻辑错误：如果产品成本越高，售价越高，那么企业家要赚取更多的利润，越高努力推高产品成本，从而提高售价；\n    * 供需决定论\n      * 供需关系决定商品价格，商品价格决定资源成本；\n* “租”是对资产的付费\n  * 租是旱涝保收的收入，白赚的收入\n* 寻租\n  * 寻租是指那些向政府争取优惠政策，让自己得到好处，同时导致社会总资源发生耗散的行为。\n\n### 科斯定律\n* 社会成本问题\n  * 所有的伤害都是相互的；\n  * 谁避免意外成本最低，谁的责任就最大；\n  * 科斯定律：在交易费为零或足够低的情况下，不管资源最初的主人是谁，资源都同样会流到价值最高的用途上去。\n","slug":"薛兆丰经济学讲义读书笔记2","published":1,"updated":"2021-11-07T07:27:29.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8ux000rhasgcy1lt6aw","content":"<h2 id=\"成本-–-不要只盯着钱\"><a href=\"#成本-–-不要只盯着钱\" class=\"headerlink\" title=\"成本 – 不要只盯着钱\"></a>成本 – 不要只盯着钱</h2><a id=\"more\"></a>\n<ul>\n<li>企业家是资源配置的中间人；</li>\n<li>成本是放弃了的最大的代价，即如果一个资源有若干个选项时，被选中的那个，它的成本就是所有放弃了的选项中价值最高的那个。<ul>\n<li>负面的感受不是成本；</li>\n<li>你的成本由别人决定的；</li>\n</ul>\n</li>\n<li>个人的职业范围是由别人决定的：<ul>\n<li>你拥有你的生命，但是你的生命是怎么度过的，你的职业是怎么选择的，很大程度上是由社会生其他人决定的。</li>\n</ul>\n</li>\n<li>货币成本vs全部成本<ul>\n<li>货币成本不是全部成本，全部成本应该包括所有可能的成本；</li>\n</ul>\n</li>\n<li><strong>中间商赚差价，会让商品更便宜</strong><ul>\n<li>没有了中间商，货币成本确实降低了，但是其他成本会上去。比如花时间去地里摘蔬菜，或者去屠宰场买猪肉，花费的时间和其他成本更高。</li>\n</ul>\n</li>\n<li>从成本的角度理解赢利与亏损<ul>\n<li>盈利和亏损都是意外；</li>\n<li>盈利提高了未来使用的成本</li>\n<li>亏损会降低资源使用成本；</li>\n</ul>\n</li>\n<li>最终产品的工序决定原材料的成本<ul>\n<li>产品价格形成过程的理论<ul>\n<li>成本决定论<ul>\n<li>理论逻辑错误：如果产品成本越高，售价越高，那么企业家要赚取更多的利润，越高努力推高产品成本，从而提高售价；</li>\n</ul>\n</li>\n<li>供需决定论<ul>\n<li>供需关系决定商品价格，商品价格决定资源成本；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>“租”是对资产的付费<ul>\n<li>租是旱涝保收的收入，白赚的收入</li>\n</ul>\n</li>\n<li>寻租<ul>\n<li>寻租是指那些向政府争取优惠政策，让自己得到好处，同时导致社会总资源发生耗散的行为。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"科斯定律\"><a href=\"#科斯定律\" class=\"headerlink\" title=\"科斯定律\"></a>科斯定律</h3><ul>\n<li>社会成本问题<ul>\n<li>所有的伤害都是相互的；</li>\n<li>谁避免意外成本最低，谁的责任就最大；</li>\n<li>科斯定律：在交易费为零或足够低的情况下，不管资源最初的主人是谁，资源都同样会流到价值最高的用途上去。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"成本-–-不要只盯着钱\"><a href=\"#成本-–-不要只盯着钱\" class=\"headerlink\" title=\"成本 – 不要只盯着钱\"></a>成本 – 不要只盯着钱</h2>","more":"<ul>\n<li>企业家是资源配置的中间人；</li>\n<li>成本是放弃了的最大的代价，即如果一个资源有若干个选项时，被选中的那个，它的成本就是所有放弃了的选项中价值最高的那个。<ul>\n<li>负面的感受不是成本；</li>\n<li>你的成本由别人决定的；</li>\n</ul>\n</li>\n<li>个人的职业范围是由别人决定的：<ul>\n<li>你拥有你的生命，但是你的生命是怎么度过的，你的职业是怎么选择的，很大程度上是由社会生其他人决定的。</li>\n</ul>\n</li>\n<li>货币成本vs全部成本<ul>\n<li>货币成本不是全部成本，全部成本应该包括所有可能的成本；</li>\n</ul>\n</li>\n<li><strong>中间商赚差价，会让商品更便宜</strong><ul>\n<li>没有了中间商，货币成本确实降低了，但是其他成本会上去。比如花时间去地里摘蔬菜，或者去屠宰场买猪肉，花费的时间和其他成本更高。</li>\n</ul>\n</li>\n<li>从成本的角度理解赢利与亏损<ul>\n<li>盈利和亏损都是意外；</li>\n<li>盈利提高了未来使用的成本</li>\n<li>亏损会降低资源使用成本；</li>\n</ul>\n</li>\n<li>最终产品的工序决定原材料的成本<ul>\n<li>产品价格形成过程的理论<ul>\n<li>成本决定论<ul>\n<li>理论逻辑错误：如果产品成本越高，售价越高，那么企业家要赚取更多的利润，越高努力推高产品成本，从而提高售价；</li>\n</ul>\n</li>\n<li>供需决定论<ul>\n<li>供需关系决定商品价格，商品价格决定资源成本；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>“租”是对资产的付费<ul>\n<li>租是旱涝保收的收入，白赚的收入</li>\n</ul>\n</li>\n<li>寻租<ul>\n<li>寻租是指那些向政府争取优惠政策，让自己得到好处，同时导致社会总资源发生耗散的行为。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"科斯定律\"><a href=\"#科斯定律\" class=\"headerlink\" title=\"科斯定律\"></a>科斯定律</h3><ul>\n<li>社会成本问题<ul>\n<li>所有的伤害都是相互的；</li>\n<li>谁避免意外成本最低，谁的责任就最大；</li>\n<li>科斯定律：在交易费为零或足够低的情况下，不管资源最初的主人是谁，资源都同样会流到价值最高的用途上去。</li>\n</ul>\n</li>\n</ul>"},{"title":"薛兆丰经济学讲义读书笔记1","date":"2019-03-06T15:24:27.000Z","_content":"#\n* 阿曼·阿尔钦\n  * 经济学研究的是在什么样的情况下，人能够存活下来，而如果条件发生了改变，人们存活的情况又会发生怎样的改变。\n\n### 006讲 亚当·斯密的人性观\n* 人性自私推动社会进步；\n* 人性自私，同时具有同情心和爱心；\n* 人的爱心有限，随着距离拉远而减弱；\n* 仅靠爱心不够，陌生人互助需要市场协调。市场是一个陌生人和陌生人打交道的地方，是一个陌生人服务陌生人的地方。\n* 人际互动二分法：小圈子靠爱心，大世界靠市场；不要再家庭、朋友圈里斤斤计较，过分讲究市场规则，也不要好在市场上强求陌生人表现出不切实际的爱心；\n\n<!--more-->\n\n### 007讲 铅笔的故事\n* 伦纳德·里德《我，铅笔的故事》写了一个铅笔生产的故事，成千上万的人被市场这个无形的手联系到一起，协作生产出来了铅笔，这些人也许彼此不认识，甚至彼此厌恶，也不知道自己从事的事情跟生产铅笔有什么关系；\n\n### 008讲 市场是最大的慈善\n* 世界银行扶贫失败：世界银行累计向非洲援助2.3兆美元，却没有改变非洲儿童死亡率高的问题，理论上如果每个儿童能注射一下12美分的疫苗或者每个妈妈能拿到3美元的援助金，非洲儿童的死亡率会减少一半，但是这些援助却没有达到上述效果；\n  * 缺乏反馈机制；\n  * 委托代理问题，代理人认为花的不是自己的钱\n  * 所托非人问题，慈善基金划拨给早就贫困的地方政务；\n  * 养懒汉效应，扶贫造成懒惰；\n\n### 009讲 稀缺\n* 稀缺是经济学的一个基础，稀缺是指一切有形或无形物质的稀缺，如矿产、水、空气、地理位置、人与人间的信任等；\n\n* 造成稀缺的原因：\n  * 我们想要的东西别人也想要；\n  * 人的需求在不断变化，不断升级；\n\n### 010讲 选择和歧视\n* 稀缺 -> 对有限资源的选择 -> 标准 -> 区别对待 -> 歧视\n* 稀缺、选择、区别对待和歧视四者一体，只要其中一个存在，其他三个必然存在；\n* 歧视的根本原因\n  * 偏好；\n  * 信息不对称；\n* 歧视必然要付出代价\n","source":"_posts/薛兆丰经济学讲义读书笔记1.md","raw":"---\ntitle: 薛兆丰经济学讲义读书笔记1\ndate: 2019-03-06 23:24:27\ncategories:\n- reading\n---\n#\n* 阿曼·阿尔钦\n  * 经济学研究的是在什么样的情况下，人能够存活下来，而如果条件发生了改变，人们存活的情况又会发生怎样的改变。\n\n### 006讲 亚当·斯密的人性观\n* 人性自私推动社会进步；\n* 人性自私，同时具有同情心和爱心；\n* 人的爱心有限，随着距离拉远而减弱；\n* 仅靠爱心不够，陌生人互助需要市场协调。市场是一个陌生人和陌生人打交道的地方，是一个陌生人服务陌生人的地方。\n* 人际互动二分法：小圈子靠爱心，大世界靠市场；不要再家庭、朋友圈里斤斤计较，过分讲究市场规则，也不要好在市场上强求陌生人表现出不切实际的爱心；\n\n<!--more-->\n\n### 007讲 铅笔的故事\n* 伦纳德·里德《我，铅笔的故事》写了一个铅笔生产的故事，成千上万的人被市场这个无形的手联系到一起，协作生产出来了铅笔，这些人也许彼此不认识，甚至彼此厌恶，也不知道自己从事的事情跟生产铅笔有什么关系；\n\n### 008讲 市场是最大的慈善\n* 世界银行扶贫失败：世界银行累计向非洲援助2.3兆美元，却没有改变非洲儿童死亡率高的问题，理论上如果每个儿童能注射一下12美分的疫苗或者每个妈妈能拿到3美元的援助金，非洲儿童的死亡率会减少一半，但是这些援助却没有达到上述效果；\n  * 缺乏反馈机制；\n  * 委托代理问题，代理人认为花的不是自己的钱\n  * 所托非人问题，慈善基金划拨给早就贫困的地方政务；\n  * 养懒汉效应，扶贫造成懒惰；\n\n### 009讲 稀缺\n* 稀缺是经济学的一个基础，稀缺是指一切有形或无形物质的稀缺，如矿产、水、空气、地理位置、人与人间的信任等；\n\n* 造成稀缺的原因：\n  * 我们想要的东西别人也想要；\n  * 人的需求在不断变化，不断升级；\n\n### 010讲 选择和歧视\n* 稀缺 -> 对有限资源的选择 -> 标准 -> 区别对待 -> 歧视\n* 稀缺、选择、区别对待和歧视四者一体，只要其中一个存在，其他三个必然存在；\n* 歧视的根本原因\n  * 偏好；\n  * 信息不对称；\n* 歧视必然要付出代价\n","slug":"薛兆丰经济学讲义读书笔记1","published":1,"updated":"2021-11-07T07:27:29.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp2t8uz000thasgkxc9a8c3","content":"<p>#</p>\n<ul>\n<li>阿曼·阿尔钦<ul>\n<li>经济学研究的是在什么样的情况下，人能够存活下来，而如果条件发生了改变，人们存活的情况又会发生怎样的改变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"006讲-亚当·斯密的人性观\"><a href=\"#006讲-亚当·斯密的人性观\" class=\"headerlink\" title=\"006讲 亚当·斯密的人性观\"></a>006讲 亚当·斯密的人性观</h3><ul>\n<li>人性自私推动社会进步；</li>\n<li>人性自私，同时具有同情心和爱心；</li>\n<li>人的爱心有限，随着距离拉远而减弱；</li>\n<li>仅靠爱心不够，陌生人互助需要市场协调。市场是一个陌生人和陌生人打交道的地方，是一个陌生人服务陌生人的地方。</li>\n<li>人际互动二分法：小圈子靠爱心，大世界靠市场；不要再家庭、朋友圈里斤斤计较，过分讲究市场规则，也不要好在市场上强求陌生人表现出不切实际的爱心；</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"007讲-铅笔的故事\"><a href=\"#007讲-铅笔的故事\" class=\"headerlink\" title=\"007讲 铅笔的故事\"></a>007讲 铅笔的故事</h3><ul>\n<li>伦纳德·里德《我，铅笔的故事》写了一个铅笔生产的故事，成千上万的人被市场这个无形的手联系到一起，协作生产出来了铅笔，这些人也许彼此不认识，甚至彼此厌恶，也不知道自己从事的事情跟生产铅笔有什么关系；</li>\n</ul>\n<h3 id=\"008讲-市场是最大的慈善\"><a href=\"#008讲-市场是最大的慈善\" class=\"headerlink\" title=\"008讲 市场是最大的慈善\"></a>008讲 市场是最大的慈善</h3><ul>\n<li>世界银行扶贫失败：世界银行累计向非洲援助2.3兆美元，却没有改变非洲儿童死亡率高的问题，理论上如果每个儿童能注射一下12美分的疫苗或者每个妈妈能拿到3美元的援助金，非洲儿童的死亡率会减少一半，但是这些援助却没有达到上述效果；<ul>\n<li>缺乏反馈机制；</li>\n<li>委托代理问题，代理人认为花的不是自己的钱</li>\n<li>所托非人问题，慈善基金划拨给早就贫困的地方政务；</li>\n<li>养懒汉效应，扶贫造成懒惰；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"009讲-稀缺\"><a href=\"#009讲-稀缺\" class=\"headerlink\" title=\"009讲 稀缺\"></a>009讲 稀缺</h3><ul>\n<li><p>稀缺是经济学的一个基础，稀缺是指一切有形或无形物质的稀缺，如矿产、水、空气、地理位置、人与人间的信任等；</p>\n</li>\n<li><p>造成稀缺的原因：</p>\n<ul>\n<li>我们想要的东西别人也想要；</li>\n<li>人的需求在不断变化，不断升级；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"010讲-选择和歧视\"><a href=\"#010讲-选择和歧视\" class=\"headerlink\" title=\"010讲 选择和歧视\"></a>010讲 选择和歧视</h3><ul>\n<li>稀缺 -&gt; 对有限资源的选择 -&gt; 标准 -&gt; 区别对待 -&gt; 歧视</li>\n<li>稀缺、选择、区别对待和歧视四者一体，只要其中一个存在，其他三个必然存在；</li>\n<li>歧视的根本原因<ul>\n<li>偏好；</li>\n<li>信息不对称；</li>\n</ul>\n</li>\n<li>歧视必然要付出代价</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>#</p>\n<ul>\n<li>阿曼·阿尔钦<ul>\n<li>经济学研究的是在什么样的情况下，人能够存活下来，而如果条件发生了改变，人们存活的情况又会发生怎样的改变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"006讲-亚当·斯密的人性观\"><a href=\"#006讲-亚当·斯密的人性观\" class=\"headerlink\" title=\"006讲 亚当·斯密的人性观\"></a>006讲 亚当·斯密的人性观</h3><ul>\n<li>人性自私推动社会进步；</li>\n<li>人性自私，同时具有同情心和爱心；</li>\n<li>人的爱心有限，随着距离拉远而减弱；</li>\n<li>仅靠爱心不够，陌生人互助需要市场协调。市场是一个陌生人和陌生人打交道的地方，是一个陌生人服务陌生人的地方。</li>\n<li>人际互动二分法：小圈子靠爱心，大世界靠市场；不要再家庭、朋友圈里斤斤计较，过分讲究市场规则，也不要好在市场上强求陌生人表现出不切实际的爱心；</li>\n</ul>","more":"<h3 id=\"007讲-铅笔的故事\"><a href=\"#007讲-铅笔的故事\" class=\"headerlink\" title=\"007讲 铅笔的故事\"></a>007讲 铅笔的故事</h3><ul>\n<li>伦纳德·里德《我，铅笔的故事》写了一个铅笔生产的故事，成千上万的人被市场这个无形的手联系到一起，协作生产出来了铅笔，这些人也许彼此不认识，甚至彼此厌恶，也不知道自己从事的事情跟生产铅笔有什么关系；</li>\n</ul>\n<h3 id=\"008讲-市场是最大的慈善\"><a href=\"#008讲-市场是最大的慈善\" class=\"headerlink\" title=\"008讲 市场是最大的慈善\"></a>008讲 市场是最大的慈善</h3><ul>\n<li>世界银行扶贫失败：世界银行累计向非洲援助2.3兆美元，却没有改变非洲儿童死亡率高的问题，理论上如果每个儿童能注射一下12美分的疫苗或者每个妈妈能拿到3美元的援助金，非洲儿童的死亡率会减少一半，但是这些援助却没有达到上述效果；<ul>\n<li>缺乏反馈机制；</li>\n<li>委托代理问题，代理人认为花的不是自己的钱</li>\n<li>所托非人问题，慈善基金划拨给早就贫困的地方政务；</li>\n<li>养懒汉效应，扶贫造成懒惰；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"009讲-稀缺\"><a href=\"#009讲-稀缺\" class=\"headerlink\" title=\"009讲 稀缺\"></a>009讲 稀缺</h3><ul>\n<li><p>稀缺是经济学的一个基础，稀缺是指一切有形或无形物质的稀缺，如矿产、水、空气、地理位置、人与人间的信任等；</p>\n</li>\n<li><p>造成稀缺的原因：</p>\n<ul>\n<li>我们想要的东西别人也想要；</li>\n<li>人的需求在不断变化，不断升级；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"010讲-选择和歧视\"><a href=\"#010讲-选择和歧视\" class=\"headerlink\" title=\"010讲 选择和歧视\"></a>010讲 选择和歧视</h3><ul>\n<li>稀缺 -&gt; 对有限资源的选择 -&gt; 标准 -&gt; 区别对待 -&gt; 歧视</li>\n<li>稀缺、选择、区别对待和歧视四者一体，只要其中一个存在，其他三个必然存在；</li>\n<li>歧视的根本原因<ul>\n<li>偏好；</li>\n<li>信息不对称；</li>\n</ul>\n</li>\n<li>歧视必然要付出代价</li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-74a4dc02.png","slug":"Service-And-Kube-proxy-74a4dc02.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0},{"_id":"source/_posts/20201108/20201108-27fff154.png","slug":"20201108-27fff154.png","post":"ckvp2t8u80002hasghuvq74hu","modified":0,"renderable":0},{"_id":"source/_posts/Network-Model-in-Kubernetes/Network-Model-in-Kubernetes-6c165903.png","slug":"Network-Model-in-Kubernetes-6c165903.png","post":"ckvp2t8ue0006hasgb63czmkr","modified":0,"renderable":0},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-02d62faa.png","slug":"Service-And-Kube-proxy-02d62faa.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-323364fe.png","slug":"Service-And-Kube-proxy-323364fe.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-4afab240.png","slug":"Service-And-Kube-proxy-4afab240.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-6cc5b0ce.png","slug":"Service-And-Kube-proxy-6cc5b0ce.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-90b65a4a.png","slug":"Service-And-Kube-proxy-90b65a4a.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-9a3a490b.png","slug":"Service-And-Kube-proxy-9a3a490b.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-9bf039d8.png","slug":"Service-And-Kube-proxy-9bf039d8.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-d314f07b.png","slug":"Service-And-Kube-proxy-d314f07b.png","post":"ckvp2t8uf0007hasgebqm6o8j","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckvp2t8uk000bhasgt3e0x0xn","category_id":"ckvp2t8uq000fhasg35zvob3c","_id":"ckvp2t8ux000phasgu03rzlnf"},{"post_id":"ckvp2t8uz000thasgkxc9a8c3","category_id":"ckvp2t8v0000vhasg8fb2bw9v","_id":"ckvp2t8v10010hasg4j8vproa"}],"PostTag":[{"post_id":"ckvp2t8u20000hasgev0stmgu","tag_id":"ckvp2t8ua0004hasgc42cb967","_id":"ckvp2t8ui0009hasgrcfx16l1"},{"post_id":"ckvp2t8u80002hasghuvq74hu","tag_id":"ckvp2t8ua0004hasgc42cb967","_id":"ckvp2t8un000dhasg9i8439an"},{"post_id":"ckvp2t8ue0006hasgb63czmkr","tag_id":"ckvp2t8um000chasg0p7lfzbt","_id":"ckvp2t8ut000jhasgkrgviuhj"},{"post_id":"ckvp2t8uf0007hasgebqm6o8j","tag_id":"ckvp2t8us000hhasgsbysiuxw","_id":"ckvp2t8uw000nhasgq4snpz1d"},{"post_id":"ckvp2t8uk000bhasgt3e0x0xn","tag_id":"ckvp2t8uu000lhasga51b9o4p","_id":"ckvp2t8uy000shasge6rcr5tf"},{"post_id":"ckvp2t8un000ehasgl7x8r7wz","tag_id":"ckvp2t8ux000qhasgmgn7slkk","_id":"ckvp2t8v0000whasg5nkqdw40"},{"post_id":"ckvp2t8uq000ghasg64bzdo4w","tag_id":"ckvp2t8v0000uhasg7aklp98n","_id":"ckvp2t8v1000yhasgwe7sp7fd"},{"post_id":"ckvp2t8us000ihasgqi2rvm5l","tag_id":"ckvp2t8v0000xhasg47iy6iwv","_id":"ckvp2t8v10011hasg107huh4g"},{"post_id":"ckvp2t8uv000mhasgkny0s8gj","tag_id":"ckvp2t8v0000xhasg47iy6iwv","_id":"ckvp2t8v20013hasge9y9nusf"},{"post_id":"ckvp2t8uw000ohasggqee11pc","tag_id":"ckvp2t8v20012hasgmldhqz0g","_id":"ckvp2t8v20014hasgrzehqwfu"}],"Tag":[{"name":"something of everyday","_id":"ckvp2t8ua0004hasgc42cb967"},{"name":"kubernetes Network","_id":"ckvp2t8um000chasg0p7lfzbt"},{"name":"service","_id":"ckvp2t8us000hhasgsbysiuxw"},{"name":"LeetCode","_id":"ckvp2t8uu000lhasga51b9o4p"},{"name":"golang","_id":"ckvp2t8ux000qhasgmgn7slkk"},{"name":"读书","_id":"ckvp2t8v0000uhasg7aklp98n"},{"name":"alogrithm","_id":"ckvp2t8v0000xhasg47iy6iwv"},{"name":"linux perf tools","_id":"ckvp2t8v20012hasgmldhqz0g"}]}}