{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/20201104.md","hash":"243cfb1e15d59299976d12b35f77bfaf044c808d","modified":1675432838035},{"_id":"source/_posts/20201108.md","hash":"5a04d3ea32cca5d527a45ecd444430d63a17f8f9","modified":1675432838035},{"_id":"source/_posts/DNS-Cache-In-Linux.md","hash":"13cf449960b779d7bf50c27f537be683d5281c26","modified":1675432838035},{"_id":"source/_posts/Network-Model-in-Kubernetes.md","hash":"9e3c80e35bc747d83311029c8fbd2f7af3e7a110","modified":1675432838035},{"_id":"source/_posts/about.md","hash":"4e211a45dee123f6b5151bdc36be3dbf23698329","modified":1675432838039},{"_id":"source/_posts/Service-And-Kube-proxy.md","hash":"c55a97b2d4dc913a70dae566e62fbd105ef8bda5","modified":1675432838035},{"_id":"source/_posts/golang-learning-01.md","hash":"adcf761eeaf516945c55afc1eb547d9f13068f46","modified":1675432838039},{"_id":"source/_posts/how-to-read-a-book.md","hash":"6ce5085698ee666e54af8c9f34103fde790b8977","modified":1675432838039},{"_id":"source/_posts/leetcode01.md","hash":"67220766b7f27b1892fc7a0166443d34a7b91366","modified":1675432838039},{"_id":"source/_posts/leetcode02.md","hash":"058c49cc10441a266f0847c1dccf4b0fce222643","modified":1675432838039},{"_id":"source/_posts/leetcode03.md","hash":"fe37ca72918ae05e63cb360f412459e3ceae606c","modified":1675432838039},{"_id":"source/_posts/leetcode04.md","hash":"e811f3a7befea21ba9ea530d20215bb1a1ab15f4","modified":1675432838039},{"_id":"source/_posts/linux-strace-command-introduction.md","hash":"c9a95b820279c2d57fdcadf4c47ca457dca8cfdb","modified":1675432838039},{"_id":"source/_posts/合并两个有序链表.md","hash":"c2e04d7e09e9552449e32895feffa591febed27f","modified":1675432838039},{"_id":"source/_posts/回文数.md","hash":"3f2ab1aff91d24f71a9356b0df92dc400ced8cac","modified":1675432838039},{"_id":"source/_posts/整数反转.md","hash":"c97a23134c726d9fc99b26f701a432e9a5c4f69e","modified":1675432838039},{"_id":"source/_posts/最长公共前缀.md","hash":"ceb4a31286ea81a46b7501ae9a527f138d6d3545","modified":1675432838039},{"_id":"source/_posts/有效的括号.md","hash":"3a3f92a65dbdc2267a2526c5a353c77c149b7e49","modified":1675432838039},{"_id":"source/_posts/罗马数字转整数.md","hash":"bd63a82cd8ff54eff8ecbbcdc731879958cc071d","modified":1675432838039},{"_id":"source/_posts/薛兆丰经济学讲义读书笔记1.md","hash":"0caa3f511b9afd404ce51cee4609b2863a95f3fd","modified":1675432838039},{"_id":"source/_posts/薛兆丰经济学讲义读书笔记2.md","hash":"e39f327ca991fd5364da98e830dbe475aa10fe35","modified":1675432838039},{"_id":"source/_posts/陪护有感.md","hash":"4efc2e01ff40bd703e8275b045209642f47c4f6a","modified":1675432838039},{"_id":"source/about/index.md","hash":"8cac6783b255e0c8451bf07f3a1877cf135e00b9","modified":1675432838039},{"_id":"source/categories/index.md","hash":"6e949a810bc45814cfeee210b298ef2daec42deb","modified":1675432838039},{"_id":"source/tags/index.md","hash":"b06ba13349d5c83f4db865b7d68b7f572c123850","modified":1675432838039},{"_id":"source/_posts/20201108/20201108-27fff154.png","hash":"94440bd3318f85ccfcb3b5a243a4111e95f6333c","modified":1675432838035},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-02d62faa.png","hash":"79a58615dcc1f621de66fb31206a569abe483ba9","modified":1675432838035},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-4afab240.png","hash":"491a0f6865ddbeab519c405758282ae65948317c","modified":1675432838035},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-90b65a4a.png","hash":"c75a95ceba88cc7a5b68698c2a403b2475c2ecc0","modified":1675432838039},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-9bf039d8.png","hash":"3f20b732fa711033c859624c66787e762f2f8782","modified":1675432838039},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-9a3a490b.png","hash":"6285b2407939dc17a2eb5a0aa5aebe2eda57457e","modified":1675432838039},{"_id":"source/_posts/assets/20201108-1af71d81.png","hash":"04cf2ab77f66ac3453ed89e6d1eaeb8ec85e3d0d","modified":1675432838039},{"_id":"source/_posts/assets/Service-And-Kube-proxy-a219618a.png","hash":"a039f95572d93a7a14956da19c4ffb72c3f6ce22","modified":1675432838039},{"_id":"source/_posts/合并两个有序链表/merge_ex1.jpeg","hash":"93ec53e45e5aeb1e2667a30be9a1527680a3c766","modified":1675432838039},{"_id":"source/_posts/Network-Model-in-Kubernetes/Network-Model-in-Kubernetes-6c165903.png","hash":"671aefe0b91342cfcadc87b64545fdc41ba08427","modified":1675432838035},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-323364fe.png","hash":"81ab8ca6d1d1ed2f1104998b5ea7f8c8cc9eb4e0","modified":1675432838035},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-6cc5b0ce.png","hash":"7cb37151a236268fa1484713eb8a7829363f5748","modified":1675432838035},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-d314f07b.png","hash":"0703aefb7e3dd48c48dfad6d4a728f13b47c4e09","modified":1675432838039},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-74a4dc02.png","hash":"c1302b1886affaf6566687a1ddb5a03e7d9d10bb","modified":1675432838039},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1675432838043},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1675432838043},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1675432838043},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1675432838047},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1675432838043},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1675432838043},{"_id":"themes/next/_config.yml","hash":"9415af81270fb991c4011c0f72e3a653cd400474","modified":1675432838043},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1675432838043},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1675432838043},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1675432838043},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1675432838043},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1675432838043},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1675432838043},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1675432838043},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1675432838043},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1675432838043},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1675432838043},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1675432838043},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1675432838043},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1675432838043},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1675432838043},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1675432838043},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1675432838043},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1675432838043},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1675432838043},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1675432838043},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1675432838043},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1675432838043},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1675432838043},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1675432838043},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1675432838043},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1675432838043},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1675432838047},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1675432838047},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1675432838047},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1675432838047},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1675432838047},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1675432838047},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1675432838047},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1675432838047},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1675432838047},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1675432838047},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1675432838047},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1675432838043},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1675432838043},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1675432838043},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1675432838043},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1675432838043},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1675432838043},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1675432838043},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1675432838043},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1675432838043},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1675432838043},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1675432838043},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1675432838043},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1675432838047},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1675432838043},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1675432838047},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1675432838047},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1675432838047},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1675432838047},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1675432838047},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1675432838047},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1675432838047},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1675432838047},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1675432838047},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1675432838047},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1675432838047},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1675432838047},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1675432838047},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1675432838047},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1675432838047},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1675432838047},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1675432838047},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1675432838047},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1675432838047},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1675432838047},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1675432838047},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1675432838047},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1675432838047},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1675432838047},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1675432838047},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1675432838047},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1675432838047},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1675432838047},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1675432838047},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1675432838047},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1675432838047},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1675432838047},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1675432838047},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1675432838047},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1675432838047},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1675432838047},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1675432838047},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1675432838047},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1675432838051},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1675432838051},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1675432838051},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1675432838051},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1675432838051},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1675432838051},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1675432838051},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1675432838051},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1675432838051},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1675432838051},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1675432838051},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1675432838051},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1675432838051},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1675432838051},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1675432838051},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1675432838051},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1675432838051},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1675432838051},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1675432838047},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1675432838051},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1675432838051},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1675432838047},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1675432838047},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1675432838047},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1675432838051},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1675432838047},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1675432838047},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1675432838047},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1675432838047},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1675432838047},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1675432838047},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1675432838047},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1675432838047},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1675432838047},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1675432838047},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1675432838047},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1675432838047},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1675432838047},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1675432838047},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1675432838047},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1675432838047},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1675432838047},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1675432838047},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1675432838047},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1675432838047},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1675432838047},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1675432838047},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1675432838047},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1675432838047},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1675432838047},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1675432838047},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1675432838047},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1675432838047},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1675432838047},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1675432838047},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1675432838047},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1675432838047},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1675432838047},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1675432838047},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1675432838047},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1675432838047},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1675432838047},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1675432838047},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1675432838047},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1675432838047},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1675432838047},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1675432838047},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1675432838047},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1675432838047},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1675432838047},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1675432838047},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1675432838047},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1675432838047},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1675432838047},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1675432838047},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1675432838047},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1675432838047},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1675432838047},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1675432838047},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1675432838051},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1675432838051},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1675432838051},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1675432838051},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1675432838051},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1675432838047},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1675432838051},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1675432838047},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1675432838051},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1675432838047},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1675432838051},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1675432838047},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1675432838047},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1675432838051},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1675432838051},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1675432838051},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1675432838047},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1675432838051},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1675432838047},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1675432838047},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1675432838047},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1675432838047},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1675432838043},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1675432838043},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1675432838051},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1675432838051},{"_id":"public/tags/index.html","hash":"7673c68bf41df2bb0235cac153177452b6de6264","modified":1676651629212},{"_id":"public/about/index.html","hash":"2f627765741e702b38f17295bfb43e870c1dbd17","modified":1676651629212},{"_id":"public/categories/index.html","hash":"64b0bea536c4f18cc78ee20cbf5ad6649e51266d","modified":1676651629212},{"_id":"public/2021/11/28/有效的括号/index.html","hash":"8901a92e796e9837ce9f6801aa0f86cdcb864113","modified":1676651629212},{"_id":"public/2021/11/21/最长公共前缀/index.html","hash":"730f87395cd3423b233624ecbca1247aa6f07eee","modified":1676651629212},{"_id":"public/2021/11/21/回文数/index.html","hash":"f7b7ce275e208932dab65a777185dc53fbb7f739","modified":1676651629212},{"_id":"public/2021/11/20/整数反转/index.html","hash":"61e8a9c8a28dbafaad67b88bc95a4fac5c0a782f","modified":1676651629212},{"_id":"public/2021/11/20/陪护有感/index.html","hash":"861bf41dd9f82d01441cb7a7c82d90f31d5e5922","modified":1676651629212},{"_id":"public/2020/11/08/20201108/index.html","hash":"ef640747ee41840b5546d433605c2e96515027dc","modified":1676651629212},{"_id":"public/2020/11/05/20201104/index.html","hash":"587de88849f43cc3ff0bee5aaa0cc57df3ed7972","modified":1676651629212},{"_id":"public/2019/03/10/薛兆丰经济学讲义读书笔记2/index.html","hash":"99de8da362034eb3c46e4e5b1ad35eabe11eb5e6","modified":1676651629212},{"_id":"public/2019/03/06/about/index.html","hash":"7b4b3cf8ff204a7f9e997dad595c91d025f4cae2","modified":1676651629212},{"_id":"public/2019/03/06/how-to-read-a-book/index.html","hash":"d1c7c37c7a99056d5d16c430fde1d8b76702b0f2","modified":1676651629212},{"_id":"public/2018/05/28/DNS-Cache-In-Linux/index.html","hash":"658ad8072c455a9950dd7366809c53f9591235b6","modified":1676651629212},{"_id":"public/archives/index.html","hash":"9f20c981adc64d3b91e2d4a2d88af316aaaa2a85","modified":1676651629212},{"_id":"public/archives/page/2/index.html","hash":"6409459a6e0443da35dca70864b86ddeb5e0437d","modified":1676651629212},{"_id":"public/archives/page/3/index.html","hash":"fab136f28d8b8aaf328e3a8c9a0ae6ce7230003b","modified":1676651629212},{"_id":"public/archives/2018/index.html","hash":"8a53cd8b24c449c524ab3ebb2c458755cb0f9f76","modified":1676651629212},{"_id":"public/archives/2018/05/index.html","hash":"b505c7608c34f7bd5093a544e78f69f6a9f1fe2b","modified":1676651629212},{"_id":"public/archives/2019/index.html","hash":"92e035a5a91b2aba9953846fb17295618147045c","modified":1676651629212},{"_id":"public/archives/2019/03/index.html","hash":"487b061773116a600fd51bab248b450e04a5f010","modified":1676651629212},{"_id":"public/archives/2019/05/index.html","hash":"ae2b67ccaf6a7c25747922b9b5fd33dac5669b00","modified":1676651629212},{"_id":"public/archives/2020/index.html","hash":"268a0b1ae387cab1d7d108466e2b3a7f24863bdd","modified":1676651629212},{"_id":"public/archives/2020/11/index.html","hash":"2a104b8802b98304b7d370ed932700eb7311012c","modified":1676651629212},{"_id":"public/archives/2021/index.html","hash":"4e16cc73b246d87f7fb3a55f04bb29703394369f","modified":1676651629212},{"_id":"public/archives/2021/11/index.html","hash":"778580a3ed80b2ea922cc12d8e876ef2765832dd","modified":1676651629212},{"_id":"public/categories/算法/index.html","hash":"c254063cf0b04c0af6cc2f61d3129cd4775ca873","modified":1676651629212},{"_id":"public/categories/reading/index.html","hash":"2da061271a76b1fd2400cb1f84eca737b7a68823","modified":1676651629212},{"_id":"public/page/3/index.html","hash":"e4e8053bf159f8acfb8d75d77378b28ec1cb6c77","modified":1676651629212},{"_id":"public/tags/something-of-everyday/index.html","hash":"72b84d2d16e65e1a61825381faeca8863335d153","modified":1676651629212},{"_id":"public/tags/kubernetes-Network/index.html","hash":"12f7eb5c728d4169a3d2992742bcdb1700d80a9d","modified":1676651629212},{"_id":"public/tags/service/index.html","hash":"f1f6567a40263cce33f0c2f3a902c48f094a4070","modified":1676651629212},{"_id":"public/tags/读书/index.html","hash":"fd85cdf8320e1aed6fe559da850dd09c52fefc5c","modified":1676651629212},{"_id":"public/tags/golang/index.html","hash":"3f20b7f57174efcacd2b3a75fda42d7389c23b14","modified":1676651629212},{"_id":"public/tags/LeetCode/index.html","hash":"b9f4026ce4ccecd2c13887d13f9cbd26a8dfae3f","modified":1676651629212},{"_id":"public/tags/alogrithm/index.html","hash":"222a3ca0c4855c80a1d06989cf33d979338de045","modified":1676651629212},{"_id":"public/tags/linux-perf-tools/index.html","hash":"77eb23415db1259e9b550a7edaaf8b5f3ebdb09e","modified":1676651629212},{"_id":"public/tags/算法/index.html","hash":"7b532eb38b28aad2a4562d4a754c4675ef41fa63","modified":1676651629212},{"_id":"public/tags/生活/index.html","hash":"55d9664065a4634c816a9d4ab743ded0d44df30f","modified":1676651629212},{"_id":"public/2021/11/28/合并两个有序链表/index.html","hash":"426722ea8777ca95649b4eb681ab0f3ede5921bd","modified":1676651629212},{"_id":"public/2021/11/21/罗马数字转整数/index.html","hash":"d216a0095889e383d4bc19a02e418c6ca42b1f84","modified":1676651629212},{"_id":"public/2020/11/14/leetcode04/index.html","hash":"1735b6b6f45e37e3095829b5aa2cb6103ec455dc","modified":1676651629212},{"_id":"public/2019/05/27/linux-strace-command-introduction/index.html","hash":"6f7d5a585b368ea2418e40708c90e9037ad22227","modified":1676651629212},{"_id":"public/2019/05/26/golang-learning-01/index.html","hash":"5be1d2d7caee4a2eb884a85abe728c7b1d521cce","modified":1676651629212},{"_id":"public/2019/05/04/leetcode03/index.html","hash":"ba869c1ce934c13369826a2abcad83478b36146c","modified":1676651629212},{"_id":"public/2019/05/04/leetcode02/index.html","hash":"7df27e78efe97f36fd66fd6d6b63e299ce26af1c","modified":1676651629212},{"_id":"public/2019/05/04/leetcode01/index.html","hash":"6e6b947ca2a220ce85b2d80a40c4fb8e95ed662d","modified":1676651629212},{"_id":"public/2019/03/06/薛兆丰经济学讲义读书笔记1/index.html","hash":"c2bc53e759e5557fe8bd33badc56382b1a72d123","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/index.html","hash":"be7e6ccd67765485efda09ba9f299f669edd5711","modified":1676651629212},{"_id":"public/2018/05/27/Network-Model-in-Kubernetes/index.html","hash":"af83a63d50ebee8a4cf85fafbb894676f572f2f3","modified":1676651629212},{"_id":"public/index.html","hash":"373eecd7e805662147334c5ef2d9571ae66559f3","modified":1676651629212},{"_id":"public/page/2/index.html","hash":"18ceb717a812269feb4325f634d221283902e555","modified":1676651629212},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1676651629212},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1676651629212},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1676651629212},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1676651629212},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1676651629212},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1676651629212},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1676651629212},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1676651629212},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1676651629212},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1676651629212},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1676651629212},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1676651629212},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1676651629212},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1676651629212},{"_id":"public/2020/11/08/20201108/20201108-27fff154.png","hash":"94440bd3318f85ccfcb3b5a243a4111e95f6333c","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-02d62faa.png","hash":"79a58615dcc1f621de66fb31206a569abe483ba9","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-4afab240.png","hash":"491a0f6865ddbeab519c405758282ae65948317c","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-90b65a4a.png","hash":"c75a95ceba88cc7a5b68698c2a403b2475c2ecc0","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-9bf039d8.png","hash":"3f20b732fa711033c859624c66787e762f2f8782","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-9a3a490b.png","hash":"6285b2407939dc17a2eb5a0aa5aebe2eda57457e","modified":1676651629212},{"_id":"public/2021/11/28/合并两个有序链表/merge_ex1.jpeg","hash":"93ec53e45e5aeb1e2667a30be9a1527680a3c766","modified":1676651629212},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1676651629212},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1676651629212},{"_id":"public/2018/05/27/Network-Model-in-Kubernetes/Network-Model-in-Kubernetes-6c165903.png","hash":"671aefe0b91342cfcadc87b64545fdc41ba08427","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-323364fe.png","hash":"81ab8ca6d1d1ed2f1104998b5ea7f8c8cc9eb4e0","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-6cc5b0ce.png","hash":"7cb37151a236268fa1484713eb8a7829363f5748","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-d314f07b.png","hash":"0703aefb7e3dd48c48dfad6d4a728f13b47c4e09","modified":1676651629212},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1676651629212},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1676651629212},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1676651629212},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1676651629212},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1676651629212},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1676651629212},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1676651629212},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1676651629212},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1676651629212},{"_id":"public/css/main.css","hash":"7f5defe13c3bc98f845027fa60c260ac389cae5c","modified":1676651629212},{"_id":"public/2018/05/27/Service-And-Kube-proxy/Service-And-Kube-proxy-74a4dc02.png","hash":"c1302b1886affaf6566687a1ddb5a03e7d9d10bb","modified":1676651629212},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1676651629212},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1676651629212},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1676651629212}],"Category":[{"name":"算法","_id":"cle8r395j000kp0pvf0hd9hih"},{"name":"reading","_id":"cle8r395v0017p0pvetb92mav"}],"Data":[],"Page":[{"title":"标签","date":"2021-04-17T08:25:12.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-04-17 16:25:12\ntype: \"tags\"\n---\n","updated":"2023-02-03T14:00:38.039Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cle8r39530000p0pv8xrkfsbh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-03-06T15:01:17.000Z","_content":"正己，热爱生活、爱coding。\n\nEmail：786594722@qq.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-03-06 23:01:17\n---\n正己，热爱生活、爱coding。\n\nEmail：786594722@qq.com\n","updated":"2023-02-03T14:00:38.039Z","path":"about/index.html","comments":1,"layout":"page","_id":"cle8r39570002p0pvg9w91ri8","content":"<p>正己，热爱生活、爱coding。</p>\n<p>Email：<a href=\"mailto:786594722@qq.com\">786594722@qq.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>正己，热爱生活、爱coding。</p>\n<p>Email：<a href=\"mailto:786594722@qq.com\">786594722@qq.com</a></p>\n"},{"title":"文章分类","date":"2021-04-17T08:20:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2021-04-17 16:20:55\ntype: \"categories\"\n---\n","updated":"2023-02-03T14:00:38.039Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cle8r395a0005p0pv31k453vx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"20201104","date":"2020-11-04T16:15:17.000Z","_content":"\n## 每日一记（1）\n设计系统时，如何正确高效地运用并发是一个比较难的问题。以我个人的经验看，大概可以分为以下几个原则：\n\n* 多读单写，单个线程修改，多条线程读取（一般采用队列方式），适用于读多写少的场景；\n* 多读多写；多条线程同时读写。这种场景比较复杂，可以采用锁或者hash机制；\n","source":"_posts/20201104.md","raw":"---\ntitle: 20201104\ndate: 2020-11-05 00:15:17\ntags: something of everyday\n---\n\n## 每日一记（1）\n设计系统时，如何正确高效地运用并发是一个比较难的问题。以我个人的经验看，大概可以分为以下几个原则：\n\n* 多读单写，单个线程修改，多条线程读取（一般采用队列方式），适用于读多写少的场景；\n* 多读多写；多条线程同时读写。这种场景比较复杂，可以采用锁或者hash机制；\n","slug":"20201104","published":1,"updated":"2023-02-03T14:00:38.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r39550001p0pv4nnx08qb","content":"<h2 id=\"每日一记（1）\"><a href=\"#每日一记（1）\" class=\"headerlink\" title=\"每日一记（1）\"></a>每日一记（1）</h2><p>设计系统时，如何正确高效地运用并发是一个比较难的问题。以我个人的经验看，大概可以分为以下几个原则：</p>\n<ul>\n<li>多读单写，单个线程修改，多条线程读取（一般采用队列方式），适用于读多写少的场景；</li>\n<li>多读多写；多条线程同时读写。这种场景比较复杂，可以采用锁或者hash机制；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"每日一记（1）\"><a href=\"#每日一记（1）\" class=\"headerlink\" title=\"每日一记（1）\"></a>每日一记（1）</h2><p>设计系统时，如何正确高效地运用并发是一个比较难的问题。以我个人的经验看，大概可以分为以下几个原则：</p>\n<ul>\n<li>多读单写，单个线程修改，多条线程读取（一般采用队列方式），适用于读多写少的场景；</li>\n<li>多读多写；多条线程同时读写。这种场景比较复杂，可以采用锁或者hash机制；</li>\n</ul>\n"},{"title":"20201108","date":"2020-11-08T14:16:44.000Z","_content":"\n## hexo无法展示的问题\n\n前几天遇到了一个问题：博客完成后本地预览没问题，hexo deploy也正常，但是博客网站无法显示最新博客。\n\n<!---more -->\n\n### 现象\n\n如前所述，新部署的博客无法正常展示，进入博客详情页面会显示404；\n\n### 原因\n\ngithub pages配置的source有问题，当前配置为了hexo分支，如图下图。但是，在deploy时提交到了master分支，导致无法显示最新博客；\n\n![](20201108-27fff154.png)\n\n### 解决方案\n修改GitHub pages source配置，改为master即可；\n\n### 总结\n出现这个问题的本质原因还是对GitHub Pages工作原理不甚了解。特此记录一下，希望对其他人有帮助。\n","source":"_posts/20201108.md","raw":"---\ntitle: 20201108\ndate: 2020-11-08 22:16:44\ntags: something of everyday\n---\n\n## hexo无法展示的问题\n\n前几天遇到了一个问题：博客完成后本地预览没问题，hexo deploy也正常，但是博客网站无法显示最新博客。\n\n<!---more -->\n\n### 现象\n\n如前所述，新部署的博客无法正常展示，进入博客详情页面会显示404；\n\n### 原因\n\ngithub pages配置的source有问题，当前配置为了hexo分支，如图下图。但是，在deploy时提交到了master分支，导致无法显示最新博客；\n\n![](20201108-27fff154.png)\n\n### 解决方案\n修改GitHub pages source配置，改为master即可；\n\n### 总结\n出现这个问题的本质原因还是对GitHub Pages工作原理不甚了解。特此记录一下，希望对其他人有帮助。\n","slug":"20201108","published":1,"updated":"2023-02-03T14:00:38.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r39580003p0pv0brg6uny","content":"<h2 id=\"hexo无法展示的问题\"><a href=\"#hexo无法展示的问题\" class=\"headerlink\" title=\"hexo无法展示的问题\"></a>hexo无法展示的问题</h2><p>前几天遇到了一个问题：博客完成后本地预览没问题，hexo deploy也正常，但是博客网站无法显示最新博客。</p>\n<!---more -->\n<h3 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h3><p>如前所述，新部署的博客无法正常展示，进入博客详情页面会显示404；</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>github pages配置的source有问题，当前配置为了hexo分支，如图下图。但是，在deploy时提交到了master分支，导致无法显示最新博客；</p>\n<p><img src=\"20201108-27fff154.png\" alt=\"\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>修改GitHub pages source配置，改为master即可；</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>出现这个问题的本质原因还是对GitHub Pages工作原理不甚了解。特此记录一下，希望对其他人有帮助。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hexo无法展示的问题\"><a href=\"#hexo无法展示的问题\" class=\"headerlink\" title=\"hexo无法展示的问题\"></a>hexo无法展示的问题</h2><p>前几天遇到了一个问题：博客完成后本地预览没问题，hexo deploy也正常，但是博客网站无法显示最新博客。</p>\n<!---more -->\n<h3 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h3><p>如前所述，新部署的博客无法正常展示，进入博客详情页面会显示404；</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>github pages配置的source有问题，当前配置为了hexo分支，如图下图。但是，在deploy时提交到了master分支，导致无法显示最新博客；</p>\n<p><img src=\"20201108-27fff154.png\" alt=\"\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>修改GitHub pages source配置，改为master即可；</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>出现这个问题的本质原因还是对GitHub Pages工作原理不甚了解。特此记录一下，希望对其他人有帮助。</p>\n"},{"title":"DNS Cache In Linux","date":"2018-05-28T11:42:03.000Z","_content":"","source":"_posts/DNS-Cache-In-Linux.md","raw":"---\ntitle: DNS Cache In Linux\ndate: 2018-05-28 19:42:03\ntags:\n---\n","slug":"DNS-Cache-In-Linux","published":1,"updated":"2023-02-03T14:00:38.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395b0006p0pv4ij6255z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Network Model in Kubernetes","date":"2018-05-27T11:00:45.000Z","_content":"本文主要剖析kubernetes中网络模型，详细介绍pod之间的通信流程。\n\n## 网络模型概况\n### kubernetes对网络的要求\n* 所有的容器都可以在不用NAT的方式下同别的容器通信\n* 所有容器节点都可以在不用NAT的方式下同所有容器通信\n* 容器的地址和别人看到的地址是同一个地址\n<!--more-->\n### kubernetes的网络场景\n* 容器间直接通信\n\n  同一个pod中，不通容器共享一个网络命名空间，共享同一个Linux协议栈，可以直接通过localhost通信。\n* 同一个Node上pod间的通信\n\n  同一个Node内，不同的Pod都有一个全局IP，可以直接通过Pod的IP进行通信。Pod地址和docker0在同一个网段\n\n* 不同Node上的pod间通信\n\n  docker0网桥与宿主机网卡是两个完全不同的IP网段，并且Node之间的通信只能通过宿主机的物理网卡进行，因此要想实现位于不同Node上的Pod容器之间的通信，就必须想办法通过主机的IP地址进行寻址和通信。Kubernetes会记录所有正在运行的Pod的IP分配信息，并且将这些信息保存在etcd中（作为service的Endpoint）。\n\n  因此，实现不同Node上pod之间的通信，需要两个条件\n    * pod IP做整体规划，整个kubernetes集群内的pod IP不能有冲突，一般通过第三方开源工具管理，如flannel\n    * 将Node IP与该Node内的pod IP关联起来，通过Node IP转发到pod IP\n\n* pod到service的通信\n\n  pod到service的通信通过kube-proxy实现，底层通过修改iptables规则实现，后文具体介绍。\n\n* 集群外部与内部组件的通信\n\n  通过NodePort或者Ingress实现；\n\n### kubernetes网络结构\n为了满足上述要求和场景，kubernetes集群的网络分为三层：\n\n* 集群物理网络，即Node节点所属网络；\n* Node内部的容器网络，一般是docker0网卡负责管理；\n* Node网络和容器网络的连接器，overlay网络，一般flannel负责管理；\n\n三层网络的结构下图：\n\n![](Network-Model-in-Kubernetes-6c165903.png)\n\n<center>kubernetes网络结构</center>\n<br/>\n<br/>\n\n其中，docker0是Node内部不通pod间的默认路由，pod的IP地址从docker0动态分配；flannel负责overylay网络维护，把docker0内的私网和Node节点的网络打通；GateWay则是Node网络中的默认路由，负责物理网络数据包转发。\n\n### 开源网络组件Flannel\n在kubernetes中，flannel的左右有以下两点：\n* 给每个Node上的Docker容器分配不冲突的IP地址\n* 在这些IP之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络，将数据包原封不动的传递到目标容器内\n\n首先，flannel创建一个flannel0网桥，一端连接docker0网桥，另一端连接flanneld的服务进程。flanneld进程跟kubernetes集群中的etcd通信，管理网段资源，同时监控每个pod的实际地址，并在内存中建立一个pod节点的路由表。flanneld进程一端连接flannel0网桥，另一端连接物理网络。\n\n<br/>\n\n综上，以pod0和pod2的通信为例，数据的流转是这样的：\n\npod0 --> docker0 --> flannel0 --> flanneld --> Node0物理网卡 --> Node1物理网卡 --> flanneld --> flannel0 --> docker0 --> pod2\n","source":"_posts/Network-Model-in-Kubernetes.md","raw":"---\ntitle: Network Model in Kubernetes\ndate: 2018-05-27 19:00:45\ntags: kubernetes Network\n---\n本文主要剖析kubernetes中网络模型，详细介绍pod之间的通信流程。\n\n## 网络模型概况\n### kubernetes对网络的要求\n* 所有的容器都可以在不用NAT的方式下同别的容器通信\n* 所有容器节点都可以在不用NAT的方式下同所有容器通信\n* 容器的地址和别人看到的地址是同一个地址\n<!--more-->\n### kubernetes的网络场景\n* 容器间直接通信\n\n  同一个pod中，不通容器共享一个网络命名空间，共享同一个Linux协议栈，可以直接通过localhost通信。\n* 同一个Node上pod间的通信\n\n  同一个Node内，不同的Pod都有一个全局IP，可以直接通过Pod的IP进行通信。Pod地址和docker0在同一个网段\n\n* 不同Node上的pod间通信\n\n  docker0网桥与宿主机网卡是两个完全不同的IP网段，并且Node之间的通信只能通过宿主机的物理网卡进行，因此要想实现位于不同Node上的Pod容器之间的通信，就必须想办法通过主机的IP地址进行寻址和通信。Kubernetes会记录所有正在运行的Pod的IP分配信息，并且将这些信息保存在etcd中（作为service的Endpoint）。\n\n  因此，实现不同Node上pod之间的通信，需要两个条件\n    * pod IP做整体规划，整个kubernetes集群内的pod IP不能有冲突，一般通过第三方开源工具管理，如flannel\n    * 将Node IP与该Node内的pod IP关联起来，通过Node IP转发到pod IP\n\n* pod到service的通信\n\n  pod到service的通信通过kube-proxy实现，底层通过修改iptables规则实现，后文具体介绍。\n\n* 集群外部与内部组件的通信\n\n  通过NodePort或者Ingress实现；\n\n### kubernetes网络结构\n为了满足上述要求和场景，kubernetes集群的网络分为三层：\n\n* 集群物理网络，即Node节点所属网络；\n* Node内部的容器网络，一般是docker0网卡负责管理；\n* Node网络和容器网络的连接器，overlay网络，一般flannel负责管理；\n\n三层网络的结构下图：\n\n![](Network-Model-in-Kubernetes-6c165903.png)\n\n<center>kubernetes网络结构</center>\n<br/>\n<br/>\n\n其中，docker0是Node内部不通pod间的默认路由，pod的IP地址从docker0动态分配；flannel负责overylay网络维护，把docker0内的私网和Node节点的网络打通；GateWay则是Node网络中的默认路由，负责物理网络数据包转发。\n\n### 开源网络组件Flannel\n在kubernetes中，flannel的左右有以下两点：\n* 给每个Node上的Docker容器分配不冲突的IP地址\n* 在这些IP之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络，将数据包原封不动的传递到目标容器内\n\n首先，flannel创建一个flannel0网桥，一端连接docker0网桥，另一端连接flanneld的服务进程。flanneld进程跟kubernetes集群中的etcd通信，管理网段资源，同时监控每个pod的实际地址，并在内存中建立一个pod节点的路由表。flanneld进程一端连接flannel0网桥，另一端连接物理网络。\n\n<br/>\n\n综上，以pod0和pod2的通信为例，数据的流转是这样的：\n\npod0 --> docker0 --> flannel0 --> flanneld --> Node0物理网卡 --> Node1物理网卡 --> flanneld --> flannel0 --> docker0 --> pod2\n","slug":"Network-Model-in-Kubernetes","published":1,"updated":"2023-02-03T14:00:38.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395b0007p0pv1mll2cbt","content":"<p>本文主要剖析kubernetes中网络模型，详细介绍pod之间的通信流程。</p>\n<h2 id=\"网络模型概况\"><a href=\"#网络模型概况\" class=\"headerlink\" title=\"网络模型概况\"></a>网络模型概况</h2><h3 id=\"kubernetes对网络的要求\"><a href=\"#kubernetes对网络的要求\" class=\"headerlink\" title=\"kubernetes对网络的要求\"></a>kubernetes对网络的要求</h3><ul>\n<li>所有的容器都可以在不用NAT的方式下同别的容器通信</li>\n<li>所有容器节点都可以在不用NAT的方式下同所有容器通信</li>\n<li>容器的地址和别人看到的地址是同一个地址<span id=\"more\"></span>\n<h3 id=\"kubernetes的网络场景\"><a href=\"#kubernetes的网络场景\" class=\"headerlink\" title=\"kubernetes的网络场景\"></a>kubernetes的网络场景</h3></li>\n<li><p>容器间直接通信</p>\n<p>同一个pod中，不通容器共享一个网络命名空间，共享同一个Linux协议栈，可以直接通过localhost通信。</p>\n</li>\n<li><p>同一个Node上pod间的通信</p>\n<p>同一个Node内，不同的Pod都有一个全局IP，可以直接通过Pod的IP进行通信。Pod地址和docker0在同一个网段</p>\n</li>\n<li><p>不同Node上的pod间通信</p>\n<p>docker0网桥与宿主机网卡是两个完全不同的IP网段，并且Node之间的通信只能通过宿主机的物理网卡进行，因此要想实现位于不同Node上的Pod容器之间的通信，就必须想办法通过主机的IP地址进行寻址和通信。Kubernetes会记录所有正在运行的Pod的IP分配信息，并且将这些信息保存在etcd中（作为service的Endpoint）。</p>\n<p>因此，实现不同Node上pod之间的通信，需要两个条件</p>\n<ul>\n<li>pod IP做整体规划，整个kubernetes集群内的pod IP不能有冲突，一般通过第三方开源工具管理，如flannel</li>\n<li>将Node IP与该Node内的pod IP关联起来，通过Node IP转发到pod IP</li>\n</ul>\n</li>\n<li><p>pod到service的通信</p>\n<p>pod到service的通信通过kube-proxy实现，底层通过修改iptables规则实现，后文具体介绍。</p>\n</li>\n<li><p>集群外部与内部组件的通信</p>\n<p>通过NodePort或者Ingress实现；</p>\n</li>\n</ul>\n<h3 id=\"kubernetes网络结构\"><a href=\"#kubernetes网络结构\" class=\"headerlink\" title=\"kubernetes网络结构\"></a>kubernetes网络结构</h3><p>为了满足上述要求和场景，kubernetes集群的网络分为三层：</p>\n<ul>\n<li>集群物理网络，即Node节点所属网络；</li>\n<li>Node内部的容器网络，一般是docker0网卡负责管理；</li>\n<li>Node网络和容器网络的连接器，overlay网络，一般flannel负责管理；</li>\n</ul>\n<p>三层网络的结构下图：</p>\n<p><img src=\"Network-Model-in-Kubernetes-6c165903.png\" alt=\"\"></p>\n<p><center>kubernetes网络结构</center><br><br/><br><br/></p>\n<p>其中，docker0是Node内部不通pod间的默认路由，pod的IP地址从docker0动态分配；flannel负责overylay网络维护，把docker0内的私网和Node节点的网络打通；GateWay则是Node网络中的默认路由，负责物理网络数据包转发。</p>\n<h3 id=\"开源网络组件Flannel\"><a href=\"#开源网络组件Flannel\" class=\"headerlink\" title=\"开源网络组件Flannel\"></a>开源网络组件Flannel</h3><p>在kubernetes中，flannel的左右有以下两点：</p>\n<ul>\n<li>给每个Node上的Docker容器分配不冲突的IP地址</li>\n<li>在这些IP之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络，将数据包原封不动的传递到目标容器内</li>\n</ul>\n<p>首先，flannel创建一个flannel0网桥，一端连接docker0网桥，另一端连接flanneld的服务进程。flanneld进程跟kubernetes集群中的etcd通信，管理网段资源，同时监控每个pod的实际地址，并在内存中建立一个pod节点的路由表。flanneld进程一端连接flannel0网桥，另一端连接物理网络。</p>\n<p><br/></p>\n<p>综上，以pod0和pod2的通信为例，数据的流转是这样的：</p>\n<p>pod0 –&gt; docker0 –&gt; flannel0 –&gt; flanneld –&gt; Node0物理网卡 –&gt; Node1物理网卡 –&gt; flanneld –&gt; flannel0 –&gt; docker0 –&gt; pod2</p>\n","site":{"data":{}},"excerpt":"<p>本文主要剖析kubernetes中网络模型，详细介绍pod之间的通信流程。</p>\n<h2 id=\"网络模型概况\"><a href=\"#网络模型概况\" class=\"headerlink\" title=\"网络模型概况\"></a>网络模型概况</h2><h3 id=\"kubernetes对网络的要求\"><a href=\"#kubernetes对网络的要求\" class=\"headerlink\" title=\"kubernetes对网络的要求\"></a>kubernetes对网络的要求</h3><ul>\n<li>所有的容器都可以在不用NAT的方式下同别的容器通信</li>\n<li>所有容器节点都可以在不用NAT的方式下同所有容器通信</li>\n<li>容器的地址和别人看到的地址是同一个地址","more":"<h3 id=\"kubernetes的网络场景\"><a href=\"#kubernetes的网络场景\" class=\"headerlink\" title=\"kubernetes的网络场景\"></a>kubernetes的网络场景</h3></li>\n<li><p>容器间直接通信</p>\n<p>同一个pod中，不通容器共享一个网络命名空间，共享同一个Linux协议栈，可以直接通过localhost通信。</p>\n</li>\n<li><p>同一个Node上pod间的通信</p>\n<p>同一个Node内，不同的Pod都有一个全局IP，可以直接通过Pod的IP进行通信。Pod地址和docker0在同一个网段</p>\n</li>\n<li><p>不同Node上的pod间通信</p>\n<p>docker0网桥与宿主机网卡是两个完全不同的IP网段，并且Node之间的通信只能通过宿主机的物理网卡进行，因此要想实现位于不同Node上的Pod容器之间的通信，就必须想办法通过主机的IP地址进行寻址和通信。Kubernetes会记录所有正在运行的Pod的IP分配信息，并且将这些信息保存在etcd中（作为service的Endpoint）。</p>\n<p>因此，实现不同Node上pod之间的通信，需要两个条件</p>\n<ul>\n<li>pod IP做整体规划，整个kubernetes集群内的pod IP不能有冲突，一般通过第三方开源工具管理，如flannel</li>\n<li>将Node IP与该Node内的pod IP关联起来，通过Node IP转发到pod IP</li>\n</ul>\n</li>\n<li><p>pod到service的通信</p>\n<p>pod到service的通信通过kube-proxy实现，底层通过修改iptables规则实现，后文具体介绍。</p>\n</li>\n<li><p>集群外部与内部组件的通信</p>\n<p>通过NodePort或者Ingress实现；</p>\n</li>\n</ul>\n<h3 id=\"kubernetes网络结构\"><a href=\"#kubernetes网络结构\" class=\"headerlink\" title=\"kubernetes网络结构\"></a>kubernetes网络结构</h3><p>为了满足上述要求和场景，kubernetes集群的网络分为三层：</p>\n<ul>\n<li>集群物理网络，即Node节点所属网络；</li>\n<li>Node内部的容器网络，一般是docker0网卡负责管理；</li>\n<li>Node网络和容器网络的连接器，overlay网络，一般flannel负责管理；</li>\n</ul>\n<p>三层网络的结构下图：</p>\n<p><img src=\"Network-Model-in-Kubernetes-6c165903.png\" alt=\"\"></p>\n<p><center>kubernetes网络结构</center><br><br/><br><br/></p>\n<p>其中，docker0是Node内部不通pod间的默认路由，pod的IP地址从docker0动态分配；flannel负责overylay网络维护，把docker0内的私网和Node节点的网络打通；GateWay则是Node网络中的默认路由，负责物理网络数据包转发。</p>\n<h3 id=\"开源网络组件Flannel\"><a href=\"#开源网络组件Flannel\" class=\"headerlink\" title=\"开源网络组件Flannel\"></a>开源网络组件Flannel</h3><p>在kubernetes中，flannel的左右有以下两点：</p>\n<ul>\n<li>给每个Node上的Docker容器分配不冲突的IP地址</li>\n<li>在这些IP之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络，将数据包原封不动的传递到目标容器内</li>\n</ul>\n<p>首先，flannel创建一个flannel0网桥，一端连接docker0网桥，另一端连接flanneld的服务进程。flanneld进程跟kubernetes集群中的etcd通信，管理网段资源，同时监控每个pod的实际地址，并在内存中建立一个pod节点的路由表。flanneld进程一端连接flannel0网桥，另一端连接物理网络。</p>\n<p><br/></p>\n<p>综上，以pod0和pod2的通信为例，数据的流转是这样的：</p>\n<p>pod0 –&gt; docker0 –&gt; flannel0 –&gt; flanneld –&gt; Node0物理网卡 –&gt; Node1物理网卡 –&gt; flanneld –&gt; flannel0 –&gt; docker0 –&gt; pod2</p>"},{"title":"about","date":"2019-03-06T14:55:10.000Z","_content":"正己，Java工程师。\n","source":"_posts/about.md","raw":"---\ntitle: about\ndate: 2019-03-06 22:55:10\ntags:\n---\n正己，Java工程师。\n","slug":"about","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395c0008p0pv0c1v2whd","content":"<p>正己，Java工程师。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>正己，Java工程师。</p>\n"},{"title":"Service And Kube-proxy","date":"2018-05-27T15:07:15.000Z","_content":"## Introduction\n本文探究kubernetes架构中，服务发现的具体工作原理，涉及到service定义、服务发现与coredns，kube-proxy工作原理等。\n<!--more-->\n## Service\nkubernetes架构中，Service是对一组提供相同功能pod的抽象。Service通过标签选取服务后端。Service有四种类型：\n  * ClusterIP: 默认类型，为服务自动分配一个虚拟ip，该ip仅集群内部可见\n  * NodePort: 在ClusterIP的基础上，为Service在每台机器上绑定一个端口，外部请求可以通过NodeIP:NodePort访问服务\n  * LoadBalancer: 在NodePort的基础上，通过云服务厂商创建一个外部的负载均衡器\n  * ExternalName: 把服务通过CNAME的方式转发到制定的域名。\n  <br/>\n\n### 创建Service\n  * 一般，在创建服务时，需要指定selector，该selector会和特定label关联，通过和pod的label对比，选择相应的pod作为该服务的endpoints；\n  * 如果不指定selector，可以自己定义endpoint，需要创建一个和Service同名的Endpoints资源，在endpoint中配置指定的ip和端口；\n  * 还有一种情况不需要指定selectors，就是通过DNS CNAME方式把服务转发到指定的域名；\n  <br/>\n\n### headless 服务\nheadless服务是指不需要ClusterIP的服务，在创建服务时指定```spec.clusterIP=None```, 包括两类：\n  * 不指定selectors，但设置externalName；\n  * 不指定selectors，通过A记录设置后段endpoint列表；\n\n## Service Discovery\n服务发现分两种类型：\n* 环境变量\n  * kubelet 会为每个活跃的 Service 添加一组环境变量，要求 Pod 想要访问的任何 Service 必须在 Pod 自己之前被创建\n* DNS\n  * DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录, k8s体系中，DNS服务发现的结构如下图：\n    ![](Service-And-Kube-proxy-9a3a490b.png)\n\n  如上图所示，kube-dns 或 coredns会watch api-server上Service的变化，并根据规则自动生成DNS A记录。\n\n## Kube-proxy\n用户创建service后，k8s会为这个LB提供一个IP，一般称为cluster IP。 kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。\n\nkube-proxy内部实现原理主要是使用iptables规则，更改filter和nat表。filter表中增加KUBE-FIREWALL和KUBE-SERVICES两个规则链。所有出的报文都经过KUBE-SERVICES，如果没有找到endpoint，则丢弃报文。nat表则设置的规则比较多，主要是各种跳转，下图1中给出了部分。nat表的处理主要步骤为：\n* inbound：在PREROUTING阶段，将所有报文转发到KUBE-SERVICES\n* outbound：在OUTPUT阶段，将所有报文转发到KUBE-SERVICES\n* outbound：在POSTROUTING阶段，将所有报文转发到KUBE-POSTROUTING\n\n以my-nginx服务为例，该服务clusterIP为10.254.82.158，有两个pod，ip分贝为172.30.39.3和172.30.23.8，如下图：\n\n  ![](Service-And-Kube-proxy-02d62faa.png)\n\n使用sudo iptables -t nat -L命令查看nat转发表，只截出了相关的部分，如下图1。\n* 首先pod通过dns查询到clusterIP 10.254.82.158，然后发起调用；\n* 请求进入KUBE-SVC-BEPXDJBUHFCSYIC3\n* KUBE-SVC-BEPXDJBUHFCSYIC3配置了两个pod的概率，0.5\n* 然后请求按照一定概率被转发到另个目的pod，如图2和图3\n\n  ![](Service-And-Kube-proxy-74a4dc02.png)\n  <center>图1</center>\n\n  ![](Service-And-Kube-proxy-90b65a4a.png)\n  <center>图2</center>\n\n  ![](Service-And-Kube-proxy-9bf039d8.png)\n  <center>图3</center>\n\n综上，数据包发到Node的处理过程：\n\n![](Service-And-Kube-proxy-6cc5b0ce.png)\n<center>图片来自http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</center>\n\n\nNode发出的包的处理过程：\n![](Service-And-Kube-proxy-d314f07b.png)\n<center>图片来自http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</center>\n\n## CoreDNS\nCoreDNS在k8s中主要负责把Service转换成DNS域名并添加相应的A记录。CoreDNS支持标准的dns协议，插件化，支持多种数据源。\n\n![](Service-And-Kube-proxy-323364fe.png)\n\n## Conclusion\n综上，本文简单介绍了kubernetes体系中，服务发现相关的概念及原理，包括服务类型、服务定义、服务发现方式及kube-proxy的工作原理。\n","source":"_posts/Service-And-Kube-proxy.md","raw":"---\ntitle: Service And Kube-proxy\ndate: 2018-05-27 23:07:15\ntags: service\n---\n## Introduction\n本文探究kubernetes架构中，服务发现的具体工作原理，涉及到service定义、服务发现与coredns，kube-proxy工作原理等。\n<!--more-->\n## Service\nkubernetes架构中，Service是对一组提供相同功能pod的抽象。Service通过标签选取服务后端。Service有四种类型：\n  * ClusterIP: 默认类型，为服务自动分配一个虚拟ip，该ip仅集群内部可见\n  * NodePort: 在ClusterIP的基础上，为Service在每台机器上绑定一个端口，外部请求可以通过NodeIP:NodePort访问服务\n  * LoadBalancer: 在NodePort的基础上，通过云服务厂商创建一个外部的负载均衡器\n  * ExternalName: 把服务通过CNAME的方式转发到制定的域名。\n  <br/>\n\n### 创建Service\n  * 一般，在创建服务时，需要指定selector，该selector会和特定label关联，通过和pod的label对比，选择相应的pod作为该服务的endpoints；\n  * 如果不指定selector，可以自己定义endpoint，需要创建一个和Service同名的Endpoints资源，在endpoint中配置指定的ip和端口；\n  * 还有一种情况不需要指定selectors，就是通过DNS CNAME方式把服务转发到指定的域名；\n  <br/>\n\n### headless 服务\nheadless服务是指不需要ClusterIP的服务，在创建服务时指定```spec.clusterIP=None```, 包括两类：\n  * 不指定selectors，但设置externalName；\n  * 不指定selectors，通过A记录设置后段endpoint列表；\n\n## Service Discovery\n服务发现分两种类型：\n* 环境变量\n  * kubelet 会为每个活跃的 Service 添加一组环境变量，要求 Pod 想要访问的任何 Service 必须在 Pod 自己之前被创建\n* DNS\n  * DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录, k8s体系中，DNS服务发现的结构如下图：\n    ![](Service-And-Kube-proxy-9a3a490b.png)\n\n  如上图所示，kube-dns 或 coredns会watch api-server上Service的变化，并根据规则自动生成DNS A记录。\n\n## Kube-proxy\n用户创建service后，k8s会为这个LB提供一个IP，一般称为cluster IP。 kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。\n\nkube-proxy内部实现原理主要是使用iptables规则，更改filter和nat表。filter表中增加KUBE-FIREWALL和KUBE-SERVICES两个规则链。所有出的报文都经过KUBE-SERVICES，如果没有找到endpoint，则丢弃报文。nat表则设置的规则比较多，主要是各种跳转，下图1中给出了部分。nat表的处理主要步骤为：\n* inbound：在PREROUTING阶段，将所有报文转发到KUBE-SERVICES\n* outbound：在OUTPUT阶段，将所有报文转发到KUBE-SERVICES\n* outbound：在POSTROUTING阶段，将所有报文转发到KUBE-POSTROUTING\n\n以my-nginx服务为例，该服务clusterIP为10.254.82.158，有两个pod，ip分贝为172.30.39.3和172.30.23.8，如下图：\n\n  ![](Service-And-Kube-proxy-02d62faa.png)\n\n使用sudo iptables -t nat -L命令查看nat转发表，只截出了相关的部分，如下图1。\n* 首先pod通过dns查询到clusterIP 10.254.82.158，然后发起调用；\n* 请求进入KUBE-SVC-BEPXDJBUHFCSYIC3\n* KUBE-SVC-BEPXDJBUHFCSYIC3配置了两个pod的概率，0.5\n* 然后请求按照一定概率被转发到另个目的pod，如图2和图3\n\n  ![](Service-And-Kube-proxy-74a4dc02.png)\n  <center>图1</center>\n\n  ![](Service-And-Kube-proxy-90b65a4a.png)\n  <center>图2</center>\n\n  ![](Service-And-Kube-proxy-9bf039d8.png)\n  <center>图3</center>\n\n综上，数据包发到Node的处理过程：\n\n![](Service-And-Kube-proxy-6cc5b0ce.png)\n<center>图片来自http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</center>\n\n\nNode发出的包的处理过程：\n![](Service-And-Kube-proxy-d314f07b.png)\n<center>图片来自http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</center>\n\n## CoreDNS\nCoreDNS在k8s中主要负责把Service转换成DNS域名并添加相应的A记录。CoreDNS支持标准的dns协议，插件化，支持多种数据源。\n\n![](Service-And-Kube-proxy-323364fe.png)\n\n## Conclusion\n综上，本文简单介绍了kubernetes体系中，服务发现相关的概念及原理，包括服务类型、服务定义、服务发现方式及kube-proxy的工作原理。\n","slug":"Service-And-Kube-proxy","published":1,"updated":"2023-02-03T14:00:38.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395e000bp0pv4ka6da04","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>本文探究kubernetes架构中，服务发现的具体工作原理，涉及到service定义、服务发现与coredns，kube-proxy工作原理等。<br><span id=\"more\"></span></p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>kubernetes架构中，Service是对一组提供相同功能pod的抽象。Service通过标签选取服务后端。Service有四种类型：</p>\n<ul>\n<li>ClusterIP: 默认类型，为服务自动分配一个虚拟ip，该ip仅集群内部可见</li>\n<li>NodePort: 在ClusterIP的基础上，为Service在每台机器上绑定一个端口，外部请求可以通过NodeIP:NodePort访问服务</li>\n<li>LoadBalancer: 在NodePort的基础上，通过云服务厂商创建一个外部的负载均衡器</li>\n<li>ExternalName: 把服务通过CNAME的方式转发到制定的域名。<br><br/></li>\n</ul>\n<h3 id=\"创建Service\"><a href=\"#创建Service\" class=\"headerlink\" title=\"创建Service\"></a>创建Service</h3><ul>\n<li>一般，在创建服务时，需要指定selector，该selector会和特定label关联，通过和pod的label对比，选择相应的pod作为该服务的endpoints；</li>\n<li>如果不指定selector，可以自己定义endpoint，需要创建一个和Service同名的Endpoints资源，在endpoint中配置指定的ip和端口；</li>\n<li>还有一种情况不需要指定selectors，就是通过DNS CNAME方式把服务转发到指定的域名；<br><br/></li>\n</ul>\n<h3 id=\"headless-服务\"><a href=\"#headless-服务\" class=\"headerlink\" title=\"headless 服务\"></a>headless 服务</h3><p>headless服务是指不需要ClusterIP的服务，在创建服务时指定<code>spec.clusterIP=None</code>, 包括两类：</p>\n<ul>\n<li>不指定selectors，但设置externalName；</li>\n<li>不指定selectors，通过A记录设置后段endpoint列表；</li>\n</ul>\n<h2 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h2><p>服务发现分两种类型：</p>\n<ul>\n<li>环境变量<ul>\n<li>kubelet 会为每个活跃的 Service 添加一组环境变量，要求 Pod 想要访问的任何 Service 必须在 Pod 自己之前被创建</li>\n</ul>\n</li>\n<li><p>DNS</p>\n<ul>\n<li>DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录, k8s体系中，DNS服务发现的结构如下图：<br><img src=\"Service-And-Kube-proxy-9a3a490b.png\" alt=\"\"></li>\n</ul>\n<p>如上图所示，kube-dns 或 coredns会watch api-server上Service的变化，并根据规则自动生成DNS A记录。</p>\n</li>\n</ul>\n<h2 id=\"Kube-proxy\"><a href=\"#Kube-proxy\" class=\"headerlink\" title=\"Kube-proxy\"></a>Kube-proxy</h2><p>用户创建service后，k8s会为这个LB提供一个IP，一般称为cluster IP。 kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。</p>\n<p>kube-proxy内部实现原理主要是使用iptables规则，更改filter和nat表。filter表中增加KUBE-FIREWALL和KUBE-SERVICES两个规则链。所有出的报文都经过KUBE-SERVICES，如果没有找到endpoint，则丢弃报文。nat表则设置的规则比较多，主要是各种跳转，下图1中给出了部分。nat表的处理主要步骤为：</p>\n<ul>\n<li>inbound：在PREROUTING阶段，将所有报文转发到KUBE-SERVICES</li>\n<li>outbound：在OUTPUT阶段，将所有报文转发到KUBE-SERVICES</li>\n<li>outbound：在POSTROUTING阶段，将所有报文转发到KUBE-POSTROUTING</li>\n</ul>\n<p>以my-nginx服务为例，该服务clusterIP为10.254.82.158，有两个pod，ip分贝为172.30.39.3和172.30.23.8，如下图：</p>\n<p>  <img src=\"Service-And-Kube-proxy-02d62faa.png\" alt=\"\"></p>\n<p>使用sudo iptables -t nat -L命令查看nat转发表，只截出了相关的部分，如下图1。</p>\n<ul>\n<li>首先pod通过dns查询到clusterIP 10.254.82.158，然后发起调用；</li>\n<li>请求进入KUBE-SVC-BEPXDJBUHFCSYIC3</li>\n<li>KUBE-SVC-BEPXDJBUHFCSYIC3配置了两个pod的概率，0.5</li>\n<li><p>然后请求按照一定概率被转发到另个目的pod，如图2和图3</p>\n<p><img src=\"Service-And-Kube-proxy-74a4dc02.png\" alt=\"\"></p>\n<center>图1</center>\n\n<p><img src=\"Service-And-Kube-proxy-90b65a4a.png\" alt=\"\"></p>\n<center>图2</center>\n\n<p><img src=\"Service-And-Kube-proxy-9bf039d8.png\" alt=\"\"></p>\n<center>图3</center>\n\n</li>\n</ul>\n<p>综上，数据包发到Node的处理过程：</p>\n<p><img src=\"Service-And-Kube-proxy-6cc5b0ce.png\" alt=\"\"></p>\n<center>图片来自<a href=\"http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html\">http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</a></center>\n\n\n<p>Node发出的包的处理过程：<br><img src=\"Service-And-Kube-proxy-d314f07b.png\" alt=\"\"></p>\n<center>图片来自<a href=\"http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html\">http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</a></center>\n\n<h2 id=\"CoreDNS\"><a href=\"#CoreDNS\" class=\"headerlink\" title=\"CoreDNS\"></a>CoreDNS</h2><p>CoreDNS在k8s中主要负责把Service转换成DNS域名并添加相应的A记录。CoreDNS支持标准的dns协议，插件化，支持多种数据源。</p>\n<p><img src=\"Service-And-Kube-proxy-323364fe.png\" alt=\"\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>综上，本文简单介绍了kubernetes体系中，服务发现相关的概念及原理，包括服务类型、服务定义、服务发现方式及kube-proxy的工作原理。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>本文探究kubernetes架构中，服务发现的具体工作原理，涉及到service定义、服务发现与coredns，kube-proxy工作原理等。<br>","more":"</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>kubernetes架构中，Service是对一组提供相同功能pod的抽象。Service通过标签选取服务后端。Service有四种类型：</p>\n<ul>\n<li>ClusterIP: 默认类型，为服务自动分配一个虚拟ip，该ip仅集群内部可见</li>\n<li>NodePort: 在ClusterIP的基础上，为Service在每台机器上绑定一个端口，外部请求可以通过NodeIP:NodePort访问服务</li>\n<li>LoadBalancer: 在NodePort的基础上，通过云服务厂商创建一个外部的负载均衡器</li>\n<li>ExternalName: 把服务通过CNAME的方式转发到制定的域名。<br><br/></li>\n</ul>\n<h3 id=\"创建Service\"><a href=\"#创建Service\" class=\"headerlink\" title=\"创建Service\"></a>创建Service</h3><ul>\n<li>一般，在创建服务时，需要指定selector，该selector会和特定label关联，通过和pod的label对比，选择相应的pod作为该服务的endpoints；</li>\n<li>如果不指定selector，可以自己定义endpoint，需要创建一个和Service同名的Endpoints资源，在endpoint中配置指定的ip和端口；</li>\n<li>还有一种情况不需要指定selectors，就是通过DNS CNAME方式把服务转发到指定的域名；<br><br/></li>\n</ul>\n<h3 id=\"headless-服务\"><a href=\"#headless-服务\" class=\"headerlink\" title=\"headless 服务\"></a>headless 服务</h3><p>headless服务是指不需要ClusterIP的服务，在创建服务时指定<code>spec.clusterIP=None</code>, 包括两类：</p>\n<ul>\n<li>不指定selectors，但设置externalName；</li>\n<li>不指定selectors，通过A记录设置后段endpoint列表；</li>\n</ul>\n<h2 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h2><p>服务发现分两种类型：</p>\n<ul>\n<li>环境变量<ul>\n<li>kubelet 会为每个活跃的 Service 添加一组环境变量，要求 Pod 想要访问的任何 Service 必须在 Pod 自己之前被创建</li>\n</ul>\n</li>\n<li><p>DNS</p>\n<ul>\n<li>DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录, k8s体系中，DNS服务发现的结构如下图：<br><img src=\"Service-And-Kube-proxy-9a3a490b.png\" alt=\"\"></li>\n</ul>\n<p>如上图所示，kube-dns 或 coredns会watch api-server上Service的变化，并根据规则自动生成DNS A记录。</p>\n</li>\n</ul>\n<h2 id=\"Kube-proxy\"><a href=\"#Kube-proxy\" class=\"headerlink\" title=\"Kube-proxy\"></a>Kube-proxy</h2><p>用户创建service后，k8s会为这个LB提供一个IP，一般称为cluster IP。 kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。</p>\n<p>kube-proxy内部实现原理主要是使用iptables规则，更改filter和nat表。filter表中增加KUBE-FIREWALL和KUBE-SERVICES两个规则链。所有出的报文都经过KUBE-SERVICES，如果没有找到endpoint，则丢弃报文。nat表则设置的规则比较多，主要是各种跳转，下图1中给出了部分。nat表的处理主要步骤为：</p>\n<ul>\n<li>inbound：在PREROUTING阶段，将所有报文转发到KUBE-SERVICES</li>\n<li>outbound：在OUTPUT阶段，将所有报文转发到KUBE-SERVICES</li>\n<li>outbound：在POSTROUTING阶段，将所有报文转发到KUBE-POSTROUTING</li>\n</ul>\n<p>以my-nginx服务为例，该服务clusterIP为10.254.82.158，有两个pod，ip分贝为172.30.39.3和172.30.23.8，如下图：</p>\n<p>  <img src=\"Service-And-Kube-proxy-02d62faa.png\" alt=\"\"></p>\n<p>使用sudo iptables -t nat -L命令查看nat转发表，只截出了相关的部分，如下图1。</p>\n<ul>\n<li>首先pod通过dns查询到clusterIP 10.254.82.158，然后发起调用；</li>\n<li>请求进入KUBE-SVC-BEPXDJBUHFCSYIC3</li>\n<li>KUBE-SVC-BEPXDJBUHFCSYIC3配置了两个pod的概率，0.5</li>\n<li><p>然后请求按照一定概率被转发到另个目的pod，如图2和图3</p>\n<p><img src=\"Service-And-Kube-proxy-74a4dc02.png\" alt=\"\"></p>\n<center>图1</center>\n\n<p><img src=\"Service-And-Kube-proxy-90b65a4a.png\" alt=\"\"></p>\n<center>图2</center>\n\n<p><img src=\"Service-And-Kube-proxy-9bf039d8.png\" alt=\"\"></p>\n<center>图3</center>\n\n</li>\n</ul>\n<p>综上，数据包发到Node的处理过程：</p>\n<p><img src=\"Service-And-Kube-proxy-6cc5b0ce.png\" alt=\"\"></p>\n<center>图片来自<a href=\"http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html\">http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</a></center>\n\n\n<p>Node发出的包的处理过程：<br><img src=\"Service-And-Kube-proxy-d314f07b.png\" alt=\"\"></p>\n<center>图片来自<a href=\"http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html\">http://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html</a></center>\n\n<h2 id=\"CoreDNS\"><a href=\"#CoreDNS\" class=\"headerlink\" title=\"CoreDNS\"></a>CoreDNS</h2><p>CoreDNS在k8s中主要负责把Service转换成DNS域名并添加相应的A记录。CoreDNS支持标准的dns协议，插件化，支持多种数据源。</p>\n<p><img src=\"Service-And-Kube-proxy-323364fe.png\" alt=\"\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>综上，本文简单介绍了kubernetes体系中，服务发现相关的概念及原理，包括服务类型、服务定义、服务发现方式及kube-proxy的工作原理。</p>"},{"title":"how to read a book","date":"2019-03-06T14:23:47.000Z","_content":"## 如何阅读一本书，读书笔记\n本文记录《如何阅读一本书》的摘要笔记。\n\n### 实用型书阅读方法\n四个问题：\n* 这本书在谈什么，做出大纲架构；\n* 找出作者的共识，主旨和论述；\n* 内容是真是的吗?\n* 这本书与我何干？\n","source":"_posts/how-to-read-a-book.md","raw":"---\ntitle: how to read a book\ndate: 2019-03-06 22:23:47\ntags: 读书\n---\n## 如何阅读一本书，读书笔记\n本文记录《如何阅读一本书》的摘要笔记。\n\n### 实用型书阅读方法\n四个问题：\n* 这本书在谈什么，做出大纲架构；\n* 找出作者的共识，主旨和论述；\n* 内容是真是的吗?\n* 这本书与我何干？\n","slug":"how-to-read-a-book","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395f000cp0pvcf6uh5xk","content":"<h2 id=\"如何阅读一本书，读书笔记\"><a href=\"#如何阅读一本书，读书笔记\" class=\"headerlink\" title=\"如何阅读一本书，读书笔记\"></a>如何阅读一本书，读书笔记</h2><p>本文记录《如何阅读一本书》的摘要笔记。</p>\n<h3 id=\"实用型书阅读方法\"><a href=\"#实用型书阅读方法\" class=\"headerlink\" title=\"实用型书阅读方法\"></a>实用型书阅读方法</h3><p>四个问题：</p>\n<ul>\n<li>这本书在谈什么，做出大纲架构；</li>\n<li>找出作者的共识，主旨和论述；</li>\n<li>内容是真是的吗?</li>\n<li>这本书与我何干？</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何阅读一本书，读书笔记\"><a href=\"#如何阅读一本书，读书笔记\" class=\"headerlink\" title=\"如何阅读一本书，读书笔记\"></a>如何阅读一本书，读书笔记</h2><p>本文记录《如何阅读一本书》的摘要笔记。</p>\n<h3 id=\"实用型书阅读方法\"><a href=\"#实用型书阅读方法\" class=\"headerlink\" title=\"实用型书阅读方法\"></a>实用型书阅读方法</h3><p>四个问题：</p>\n<ul>\n<li>这本书在谈什么，做出大纲架构；</li>\n<li>找出作者的共识，主旨和论述；</li>\n<li>内容是真是的吗?</li>\n<li>这本书与我何干？</li>\n</ul>\n"},{"title":"golang learning 01","date":"2019-05-26T14:09:52.000Z","_content":"\n今天开始，深入学习golang语言，记录下来以备后用。\n\n## 变量\n### 变量定义\n* var用于定义变量，类型放在变量名后面，变脸定义之后会被初始化为零值。\n ```golang\n var x int\n var y = false\n ```\n* 可以一次定义多个变量，包括不同初始值定义不同类型\n ```golang\n var x, y int\n var a, s = 100, \"abc\"\n ```\n<!--more-->\n\n### 简短模式\n```golang\nfunc main() {\n  x := 100\n  a, s := 1, \"abc\"\n}\n```\n如上段代码，简短模式的限制条件\n* 定义变量的同时显式初始化；\n* 不能提供数据类型；\n* **只能在韩式内部使用**；\n\n**简短模式的退化赋值**： 最少有一个新变量被定义，且必须在同一个作用域\n```golang\n  func main() {\n    x := 12\n    x, y := 20, 15 // x为退化赋值，y是新定义\n  }\n```\n\n### 多变量赋值\n```golang\nfunc main() {\n  x, y := 1, 2\n  x, y = y + 3, x + 2\n}\n```\n多变量赋值时，首先计算等号右侧的值，在对左侧变量赋值；\n\n### 空标识符\n_ 是空标识符，用作忽略占位符。\n\n## 常量\ngolang常量用const关键字定义\n\n```golang\nconst x, y int = 123, 0x22\nconst s = \"hello world\"\n\nconst {\n  i, f = 1, 0.123\n  b = false\n}\n```\n此外，也可以在函数内部定义常量，不被使用的常量不会再编译期报错；\n\n在常量组中，如果没有指定类型和初始化值，则与上一行非空常量右值相同\n```golang\nfunc main() {\n  const {\n    x uint16 = 120\n    y\n    s = \"abc\"\n    z\n  }\n}\n```\n\n## 枚举\ngolang中没有enum的定义，不过可以借助iota标识符实现一组自增常量值实现枚举；\n```golang\n  const {\n    x = iota // 0\n    y        // 1\n    z        // 2\n  }\n```\n\n## 引用类型\n特指 slice、map和channel三种类型，引用类型必须通过make函数创建。\n","source":"_posts/golang-learning-01.md","raw":"---\ntitle: golang learning 01\ndate: 2019-05-26 22:09:52\ntags: golang\n---\n\n今天开始，深入学习golang语言，记录下来以备后用。\n\n## 变量\n### 变量定义\n* var用于定义变量，类型放在变量名后面，变脸定义之后会被初始化为零值。\n ```golang\n var x int\n var y = false\n ```\n* 可以一次定义多个变量，包括不同初始值定义不同类型\n ```golang\n var x, y int\n var a, s = 100, \"abc\"\n ```\n<!--more-->\n\n### 简短模式\n```golang\nfunc main() {\n  x := 100\n  a, s := 1, \"abc\"\n}\n```\n如上段代码，简短模式的限制条件\n* 定义变量的同时显式初始化；\n* 不能提供数据类型；\n* **只能在韩式内部使用**；\n\n**简短模式的退化赋值**： 最少有一个新变量被定义，且必须在同一个作用域\n```golang\n  func main() {\n    x := 12\n    x, y := 20, 15 // x为退化赋值，y是新定义\n  }\n```\n\n### 多变量赋值\n```golang\nfunc main() {\n  x, y := 1, 2\n  x, y = y + 3, x + 2\n}\n```\n多变量赋值时，首先计算等号右侧的值，在对左侧变量赋值；\n\n### 空标识符\n_ 是空标识符，用作忽略占位符。\n\n## 常量\ngolang常量用const关键字定义\n\n```golang\nconst x, y int = 123, 0x22\nconst s = \"hello world\"\n\nconst {\n  i, f = 1, 0.123\n  b = false\n}\n```\n此外，也可以在函数内部定义常量，不被使用的常量不会再编译期报错；\n\n在常量组中，如果没有指定类型和初始化值，则与上一行非空常量右值相同\n```golang\nfunc main() {\n  const {\n    x uint16 = 120\n    y\n    s = \"abc\"\n    z\n  }\n}\n```\n\n## 枚举\ngolang中没有enum的定义，不过可以借助iota标识符实现一组自增常量值实现枚举；\n```golang\n  const {\n    x = iota // 0\n    y        // 1\n    z        // 2\n  }\n```\n\n## 引用类型\n特指 slice、map和channel三种类型，引用类型必须通过make函数创建。\n","slug":"golang-learning-01","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395g000fp0pvbwb69qv9","content":"<p>今天开始，深入学习golang语言，记录下来以备后用。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"变量定义\"><a href=\"#变量定义\" class=\"headerlink\" title=\"变量定义\"></a>变量定义</h3><ul>\n<li>var用于定义变量，类型放在变量名后面，变脸定义之后会被初始化为零值。<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></li>\n<li>可以一次定义多个变量，包括不同初始值定义不同类型<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x, y <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a, s = <span class=\"number\">100</span>, <span class=\"string\">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n</li>\n</ul>\n<h3 id=\"简短模式\"><a href=\"#简短模式\" class=\"headerlink\" title=\"简短模式\"></a>简短模式</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x := <span class=\"number\">100</span></span><br><span class=\"line\">  a, s := <span class=\"number\">1</span>, <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上段代码，简短模式的限制条件</p>\n<ul>\n<li>定义变量的同时显式初始化；</li>\n<li>不能提供数据类型；</li>\n<li><strong>只能在韩式内部使用</strong>；</li>\n</ul>\n<p><strong>简短模式的退化赋值</strong>： 最少有一个新变量被定义，且必须在同一个作用域<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x := <span class=\"number\">12</span></span><br><span class=\"line\">  x, y := <span class=\"number\">20</span>, <span class=\"number\">15</span> <span class=\"comment\">// x为退化赋值，y是新定义</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多变量赋值\"><a href=\"#多变量赋值\" class=\"headerlink\" title=\"多变量赋值\"></a>多变量赋值</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x, y := <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">  x, y = y + <span class=\"number\">3</span>, x + <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多变量赋值时，首先计算等号右侧的值，在对左侧变量赋值；</p>\n<h3 id=\"空标识符\"><a href=\"#空标识符\" class=\"headerlink\" title=\"空标识符\"></a>空标识符</h3><p>_ 是空标识符，用作忽略占位符。</p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>golang常量用const关键字定义</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x, y <span class=\"type\">int</span> = <span class=\"number\">123</span>, <span class=\"number\">0x22</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  i, f = <span class=\"number\">1</span>, <span class=\"number\">0.123</span></span><br><span class=\"line\">  b = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，也可以在函数内部定义常量，不被使用的常量不会再编译期报错；</p>\n<p>在常量组中，如果没有指定类型和初始化值，则与上一行非空常量右值相同<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    x <span class=\"type\">uint16</span> = <span class=\"number\">120</span></span><br><span class=\"line\">    y</span><br><span class=\"line\">    s = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">    z</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>golang中没有enum的定义，不过可以借助iota标识符实现一组自增常量值实现枚举；<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  x = <span class=\"literal\">iota</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">  y        <span class=\"comment\">// 1</span></span><br><span class=\"line\">  z        <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><p>特指 slice、map和channel三种类型，引用类型必须通过make函数创建。</p>\n","site":{"data":{}},"excerpt":"<p>今天开始，深入学习golang语言，记录下来以备后用。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"变量定义\"><a href=\"#变量定义\" class=\"headerlink\" title=\"变量定义\"></a>变量定义</h3><ul>\n<li>var用于定义变量，类型放在变量名后面，变脸定义之后会被初始化为零值。<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></li>\n<li>可以一次定义多个变量，包括不同初始值定义不同类型<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x, y <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a, s = <span class=\"number\">100</span>, <span class=\"string\">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>","more":"</li>\n</ul>\n<h3 id=\"简短模式\"><a href=\"#简短模式\" class=\"headerlink\" title=\"简短模式\"></a>简短模式</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x := <span class=\"number\">100</span></span><br><span class=\"line\">  a, s := <span class=\"number\">1</span>, <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上段代码，简短模式的限制条件</p>\n<ul>\n<li>定义变量的同时显式初始化；</li>\n<li>不能提供数据类型；</li>\n<li><strong>只能在韩式内部使用</strong>；</li>\n</ul>\n<p><strong>简短模式的退化赋值</strong>： 最少有一个新变量被定义，且必须在同一个作用域<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x := <span class=\"number\">12</span></span><br><span class=\"line\">  x, y := <span class=\"number\">20</span>, <span class=\"number\">15</span> <span class=\"comment\">// x为退化赋值，y是新定义</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多变量赋值\"><a href=\"#多变量赋值\" class=\"headerlink\" title=\"多变量赋值\"></a>多变量赋值</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  x, y := <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">  x, y = y + <span class=\"number\">3</span>, x + <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多变量赋值时，首先计算等号右侧的值，在对左侧变量赋值；</p>\n<h3 id=\"空标识符\"><a href=\"#空标识符\" class=\"headerlink\" title=\"空标识符\"></a>空标识符</h3><p>_ 是空标识符，用作忽略占位符。</p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>golang常量用const关键字定义</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x, y <span class=\"type\">int</span> = <span class=\"number\">123</span>, <span class=\"number\">0x22</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  i, f = <span class=\"number\">1</span>, <span class=\"number\">0.123</span></span><br><span class=\"line\">  b = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，也可以在函数内部定义常量，不被使用的常量不会再编译期报错；</p>\n<p>在常量组中，如果没有指定类型和初始化值，则与上一行非空常量右值相同<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    x <span class=\"type\">uint16</span> = <span class=\"number\">120</span></span><br><span class=\"line\">    y</span><br><span class=\"line\">    s = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">    z</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>golang中没有enum的定义，不过可以借助iota标识符实现一组自增常量值实现枚举；<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  x = <span class=\"literal\">iota</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">  y        <span class=\"comment\">// 1</span></span><br><span class=\"line\">  z        <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><p>特指 slice、map和channel三种类型，引用类型必须通过make函数创建。</p>"},{"title":"leetcode01","date":"2019-05-04T14:09:11.000Z","_content":"## Add two numbers\n### 问题描述\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nExample:\n```\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n```\n<!--more-->\n\n### 解答\n```\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\nfunc addTwoNumbers1(x, y, val int) (int, int) {\n\tv1 := x + y + val - 10\n\tv2 := 0\n\tif v1 >= 0 {\n\t\tv2 = 1\n\t} else {\n\t\tv1 = x + y + val\n\t}\n\n\treturn v1, v2\n}\n\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n\tnode0 := ListNode{0, nil}\n\tl4 := &node0\n\thead := &node0\n\tv3 := 0\n\tfor ; l1 != nil || l2 != nil; {\n\t\tv1, v2 := 0, 0\n\t\tif l1 != nil && l2 != nil {\n\t\t\tv1, v2 = addTwoNumbers1(l1.Val, l2.Val, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\n\t\t\tl1 = l1.Next\n\t\t\tl2 = l2.Next\n\t\t\tif l1 != nil || l2 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t} else if l2 == nil {\n\t\t\tv1, v2 = addTwoNumbers1(l1.Val, 0, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\t\t\tl1 = l1.Next\n\t\t\tif l1 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t} else if l1 == nil {\n\t\t\tv1, v2 = addTwoNumbers1(0, l2.Val, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\t\t\tl2 = l2.Next\n\t\t\tif l2 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t}\n\t}\n\n\tif v3 > 0 {\n\t\tl4.Next = &ListNode{v3, nil}\n\t}\n\n\treturn head\n}\n```\n\n\n## Reverse Integer\n### 问题描述\nGiven a 32-bit signed integer, reverse digits of an integer.\n\n#### Example 1:\n```\nInput: 123\nOutput: 321\n```\n\n#### Example 2:\n```\nInput: -123\nOutput: -321\n```\n\n#### Example 3:\n```\nInput: 120\nOutput: 21\n```\n\n**Note:**\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n\n### 解答\n```\nclass Solution {\n    public int reverse(int x) {\n        if (x == Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        List<Integer> digitals = getNumbers(x);\n\n        long value = 0;\n\n        for (int i = digitals.size() - 1; i >= 0; i--) {\n            int a = digitals.get(i);\n            value += (a * Math.pow(10, digitals.size() - i - 1));\n        }\n\n        if (x < 0) {\n            value = value * (-1);\n        }\n\n        if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        return (int) value;\n    }\n\n    private List<Integer> getNumbers(int x) {\n        List<Integer> digitals = new ArrayList<Integer>();\n        long y = (long)x;\n        if (x < 0) {\n            y = (long)x * (-1);\n        }\n\n        for (;y > 0;) {\n            int z = (int) (y % 10);\n            digitals.add(z);\n            y = y / 10;\n        }\n\n        return digitals;\n    }\n}\n```\n","source":"_posts/leetcode01.md","raw":"---\ntitle: leetcode01\ndate: 2019-05-04 22:09:11\ntags:\n- LeetCode\ncategories:\n- 算法\n---\n## Add two numbers\n### 问题描述\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nExample:\n```\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n```\n<!--more-->\n\n### 解答\n```\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\nfunc addTwoNumbers1(x, y, val int) (int, int) {\n\tv1 := x + y + val - 10\n\tv2 := 0\n\tif v1 >= 0 {\n\t\tv2 = 1\n\t} else {\n\t\tv1 = x + y + val\n\t}\n\n\treturn v1, v2\n}\n\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n\tnode0 := ListNode{0, nil}\n\tl4 := &node0\n\thead := &node0\n\tv3 := 0\n\tfor ; l1 != nil || l2 != nil; {\n\t\tv1, v2 := 0, 0\n\t\tif l1 != nil && l2 != nil {\n\t\t\tv1, v2 = addTwoNumbers1(l1.Val, l2.Val, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\n\t\t\tl1 = l1.Next\n\t\t\tl2 = l2.Next\n\t\t\tif l1 != nil || l2 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t} else if l2 == nil {\n\t\t\tv1, v2 = addTwoNumbers1(l1.Val, 0, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\t\t\tl1 = l1.Next\n\t\t\tif l1 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t} else if l1 == nil {\n\t\t\tv1, v2 = addTwoNumbers1(0, l2.Val, v3)\n\t\t\tv3 = v2\n\t\t\tl4.Val = v1\n\t\t\tl2 = l2.Next\n\t\t\tif l2 != nil {\n\t\t\t\tl4.Next = &ListNode{0, nil}\n\t\t\t\tl4 = l4.Next\n\t\t\t}\n\t\t}\n\t}\n\n\tif v3 > 0 {\n\t\tl4.Next = &ListNode{v3, nil}\n\t}\n\n\treturn head\n}\n```\n\n\n## Reverse Integer\n### 问题描述\nGiven a 32-bit signed integer, reverse digits of an integer.\n\n#### Example 1:\n```\nInput: 123\nOutput: 321\n```\n\n#### Example 2:\n```\nInput: -123\nOutput: -321\n```\n\n#### Example 3:\n```\nInput: 120\nOutput: 21\n```\n\n**Note:**\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n\n### 解答\n```\nclass Solution {\n    public int reverse(int x) {\n        if (x == Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        List<Integer> digitals = getNumbers(x);\n\n        long value = 0;\n\n        for (int i = digitals.size() - 1; i >= 0; i--) {\n            int a = digitals.get(i);\n            value += (a * Math.pow(10, digitals.size() - i - 1));\n        }\n\n        if (x < 0) {\n            value = value * (-1);\n        }\n\n        if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {\n            return 0;\n        }\n\n        return (int) value;\n    }\n\n    private List<Integer> getNumbers(int x) {\n        List<Integer> digitals = new ArrayList<Integer>();\n        long y = (long)x;\n        if (x < 0) {\n            y = (long)x * (-1);\n        }\n\n        for (;y > 0;) {\n            int z = (int) (y % 10);\n            digitals.add(z);\n            y = y / 10;\n        }\n\n        return digitals;\n    }\n}\n```\n","slug":"leetcode01","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395h000gp0pv8h3veaf8","content":"<h2 id=\"Add-two-numbers\"><a href=\"#Add-two-numbers\" class=\"headerlink\" title=\"Add two numbers\"></a>Add two numbers</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>Example:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span></p>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * type ListNode struct &#123;</span><br><span class=\"line\"> *     Val int</span><br><span class=\"line\"> *     Next *ListNode</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">func addTwoNumbers1(x, y, val int) (int, int) &#123;</span><br><span class=\"line\">\tv1 := x + y + val - 10</span><br><span class=\"line\">\tv2 := 0</span><br><span class=\"line\">\tif v1 &gt;= 0 &#123;</span><br><span class=\"line\">\t\tv2 = 1</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tv1 = x + y + val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn v1, v2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode &#123;</span><br><span class=\"line\">\tnode0 := ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\tl4 := &amp;node0</span><br><span class=\"line\">\thead := &amp;node0</span><br><span class=\"line\">\tv3 := 0</span><br><span class=\"line\">\tfor ; l1 != nil || l2 != nil; &#123;</span><br><span class=\"line\">\t\tv1, v2 := 0, 0</span><br><span class=\"line\">\t\tif l1 != nil &amp;&amp; l2 != nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(l1.Val, l2.Val, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tl1 = l1.Next</span><br><span class=\"line\">\t\t\tl2 = l2.Next</span><br><span class=\"line\">\t\t\tif l1 != nil || l2 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if l2 == nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(l1.Val, 0, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\">\t\t\tl1 = l1.Next</span><br><span class=\"line\">\t\t\tif l1 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if l1 == nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(0, l2.Val, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\">\t\t\tl2 = l2.Next</span><br><span class=\"line\">\t\t\tif l2 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif v3 &gt; 0 &#123;</span><br><span class=\"line\">\t\tl4.Next = &amp;ListNode&#123;v3, nil&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a>Reverse Integer</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 123</span><br><span class=\"line\">Output: 321</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2:\"></a>Example 2:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: -123</span><br><span class=\"line\">Output: -321</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example 3:\"></a>Example 3:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 120</span><br><span class=\"line\">Output: 21</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int reverse(int x) &#123;</span><br><span class=\"line\">        if (x == Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; digitals = getNumbers(x);</span><br><span class=\"line\"></span><br><span class=\"line\">        long value = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = digitals.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">            int a = digitals.get(i);</span><br><span class=\"line\">            value += (a * Math.pow(10, digitals.size() - i - 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            value = value * (-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (value &gt; Integer.MAX_VALUE || value &lt; Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return (int) value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; getNumbers(int x) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; digitals = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        long y = (long)x;</span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            y = (long)x * (-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (;y &gt; 0;) &#123;</span><br><span class=\"line\">            int z = (int) (y % 10);</span><br><span class=\"line\">            digitals.add(z);</span><br><span class=\"line\">            y = y / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return digitals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Add-two-numbers\"><a href=\"#Add-two-numbers\" class=\"headerlink\" title=\"Add two numbers\"></a>Add two numbers</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>Example:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure><br>","more":"</p>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * type ListNode struct &#123;</span><br><span class=\"line\"> *     Val int</span><br><span class=\"line\"> *     Next *ListNode</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">func addTwoNumbers1(x, y, val int) (int, int) &#123;</span><br><span class=\"line\">\tv1 := x + y + val - 10</span><br><span class=\"line\">\tv2 := 0</span><br><span class=\"line\">\tif v1 &gt;= 0 &#123;</span><br><span class=\"line\">\t\tv2 = 1</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tv1 = x + y + val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn v1, v2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode &#123;</span><br><span class=\"line\">\tnode0 := ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\tl4 := &amp;node0</span><br><span class=\"line\">\thead := &amp;node0</span><br><span class=\"line\">\tv3 := 0</span><br><span class=\"line\">\tfor ; l1 != nil || l2 != nil; &#123;</span><br><span class=\"line\">\t\tv1, v2 := 0, 0</span><br><span class=\"line\">\t\tif l1 != nil &amp;&amp; l2 != nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(l1.Val, l2.Val, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tl1 = l1.Next</span><br><span class=\"line\">\t\t\tl2 = l2.Next</span><br><span class=\"line\">\t\t\tif l1 != nil || l2 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if l2 == nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(l1.Val, 0, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\">\t\t\tl1 = l1.Next</span><br><span class=\"line\">\t\t\tif l1 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if l1 == nil &#123;</span><br><span class=\"line\">\t\t\tv1, v2 = addTwoNumbers1(0, l2.Val, v3)</span><br><span class=\"line\">\t\t\tv3 = v2</span><br><span class=\"line\">\t\t\tl4.Val = v1</span><br><span class=\"line\">\t\t\tl2 = l2.Next</span><br><span class=\"line\">\t\t\tif l2 != nil &#123;</span><br><span class=\"line\">\t\t\t\tl4.Next = &amp;ListNode&#123;0, nil&#125;</span><br><span class=\"line\">\t\t\t\tl4 = l4.Next</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif v3 &gt; 0 &#123;</span><br><span class=\"line\">\t\tl4.Next = &amp;ListNode&#123;v3, nil&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a>Reverse Integer</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 123</span><br><span class=\"line\">Output: 321</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2:\"></a>Example 2:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: -123</span><br><span class=\"line\">Output: -321</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example 3:\"></a>Example 3:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 120</span><br><span class=\"line\">Output: 21</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int reverse(int x) &#123;</span><br><span class=\"line\">        if (x == Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; digitals = getNumbers(x);</span><br><span class=\"line\"></span><br><span class=\"line\">        long value = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = digitals.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">            int a = digitals.get(i);</span><br><span class=\"line\">            value += (a * Math.pow(10, digitals.size() - i - 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            value = value * (-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (value &gt; Integer.MAX_VALUE || value &lt; Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return (int) value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; getNumbers(int x) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; digitals = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        long y = (long)x;</span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            y = (long)x * (-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (;y &gt; 0;) &#123;</span><br><span class=\"line\">            int z = (int) (y % 10);</span><br><span class=\"line\">            digitals.add(z);</span><br><span class=\"line\">            y = y / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return digitals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode02","date":"2019-05-04T14:21:52.000Z","_content":"## Palindrome Number\n### 问题描述\nDetermine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n<!--more-->\n\n#### Example 1:\n```\nInput: 121\nOutput: true\n```\n#### Example 2:\n\n```\nInput: -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n```\n\n#### Example 3:\n```\nInput: 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n```\n\n### 解答\n```\nclass Solution {\n    public boolean isPalindrome(int x) {\n        if (x < 0) {\n            return false;\n        }\n\n        List<Integer> digitals = getNumbers(x);\n        int count = digitals.size();\n        for (int i = 0; i < count / 2; i++) {\n            if (digitals.get(i) != digitals.get(count - 1 - i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private List<Integer> getNumbers(int x) {\n        List<Integer> digitals = new ArrayList<Integer>();\n        long y = (long)x;\n        for (;y > 0;) {\n            int z = (int) (y % 10);\n            digitals.add(z);\n            y = y / 10;\n        }\n\n        return digitals;\n    }\n}\n```\n\n## \tRoman to Integer\n### [问题描述](https://leetcode.com/problems/roman-to-integer/)\n### 解答\n```\nclass Solution {\n    public int romanToInt(String s) {\n\t\tint num = 0;\n\t\tchar[] chars = s.toCharArray();\n\n\t\tfor (int i = 0; i < chars.length; ) {\n\t\t\tchar cur = chars[i];\n\n\t\t\tswitch (cur) {\n\t\t\tcase 'I':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 1;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'V') {\n\t\t\t\t\t\tnum += 4;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'X') {\n\t\t\t\t\t\tnum += 9;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 1;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'X':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 10;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'L') {\n\t\t\t\t\t\tnum += 40;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'C') {\n\t\t\t\t\t\tnum += 90;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 10;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 100;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'D') {\n\t\t\t\t\t\tnum += 400;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'M') {\n\t\t\t\t\t\tnum += 900;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 100;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'V':\n\t\t\t\tnum += 5;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tnum += 50;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tnum += 500;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tnum += 1000;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\treturn num;\n\t}\n}\n```\n","source":"_posts/leetcode02.md","raw":"---\ntitle: leetcode02\ndate: 2019-05-04 22:21:52\ntags: alogrithm\n---\n## Palindrome Number\n### 问题描述\nDetermine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n<!--more-->\n\n#### Example 1:\n```\nInput: 121\nOutput: true\n```\n#### Example 2:\n\n```\nInput: -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n```\n\n#### Example 3:\n```\nInput: 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n```\n\n### 解答\n```\nclass Solution {\n    public boolean isPalindrome(int x) {\n        if (x < 0) {\n            return false;\n        }\n\n        List<Integer> digitals = getNumbers(x);\n        int count = digitals.size();\n        for (int i = 0; i < count / 2; i++) {\n            if (digitals.get(i) != digitals.get(count - 1 - i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private List<Integer> getNumbers(int x) {\n        List<Integer> digitals = new ArrayList<Integer>();\n        long y = (long)x;\n        for (;y > 0;) {\n            int z = (int) (y % 10);\n            digitals.add(z);\n            y = y / 10;\n        }\n\n        return digitals;\n    }\n}\n```\n\n## \tRoman to Integer\n### [问题描述](https://leetcode.com/problems/roman-to-integer/)\n### 解答\n```\nclass Solution {\n    public int romanToInt(String s) {\n\t\tint num = 0;\n\t\tchar[] chars = s.toCharArray();\n\n\t\tfor (int i = 0; i < chars.length; ) {\n\t\t\tchar cur = chars[i];\n\n\t\t\tswitch (cur) {\n\t\t\tcase 'I':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 1;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'V') {\n\t\t\t\t\t\tnum += 4;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'X') {\n\t\t\t\t\t\tnum += 9;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 1;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'X':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 10;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'L') {\n\t\t\t\t\t\tnum += 40;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'C') {\n\t\t\t\t\t\tnum += 90;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 10;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tif (i == chars.length - 1) {\n\t\t\t\t\tnum += 100;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tchar next = chars[i + 1];\n\t\t\t\t\tif (next == 'D') {\n\t\t\t\t\t\tnum += 400;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next == 'M') {\n\t\t\t\t\t\tnum += 900;\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnum += 100;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'V':\n\t\t\t\tnum += 5;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tnum += 50;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tnum += 500;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tnum += 1000;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\treturn num;\n\t}\n}\n```\n","slug":"leetcode02","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395i000ip0pv8rmqasyq","content":"<h2 id=\"Palindrome-Number\"><a href=\"#Palindrome-Number\" class=\"headerlink\" title=\"Palindrome Number\"></a>Palindrome Number</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.<br><span id=\"more\"></span></p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 121</span><br><span class=\"line\">Output: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2:\"></a>Example 2:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: -121</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example 3:\"></a>Example 3:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 10</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isPalindrome(int x) &#123;</span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; digitals = getNumbers(x);</span><br><span class=\"line\">        int count = digitals.size();</span><br><span class=\"line\">        for (int i = 0; i &lt; count / 2; i++) &#123;</span><br><span class=\"line\">            if (digitals.get(i) != digitals.get(count - 1 - i)) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; getNumbers(int x) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; digitals = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        long y = (long)x;</span><br><span class=\"line\">        for (;y &gt; 0;) &#123;</span><br><span class=\"line\">            int z = (int) (y % 10);</span><br><span class=\"line\">            digitals.add(z);</span><br><span class=\"line\">            y = y / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return digitals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Roman-to-Integer\"><a href=\"#Roman-to-Integer\" class=\"headerlink\" title=\"Roman to Integer\"></a>Roman to Integer</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/roman-to-integer/\">问题描述</a></h3><h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int romanToInt(String s) &#123;</span><br><span class=\"line\">\t\tint num = 0;</span><br><span class=\"line\">\t\tchar[] chars = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; chars.length; ) &#123;</span><br><span class=\"line\">\t\t\tchar cur = chars[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tswitch (cur) &#123;</span><br><span class=\"line\">\t\t\tcase &#x27;I&#x27;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 1;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &#x27;V&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 4;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &#x27;X&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 9;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 1;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;X&#x27;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 10;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &#x27;L&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 40;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &#x27;C&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 90;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 10;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;C&#x27;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 100;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &#x27;D&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 400;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &#x27;M&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 900;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 100;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcase &#x27;V&#x27;:</span><br><span class=\"line\">\t\t\t\tnum += 5;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;L&#x27;:</span><br><span class=\"line\">\t\t\t\tnum += 50;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;D&#x27;:</span><br><span class=\"line\">\t\t\t\tnum += 500;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;M&#x27;:</span><br><span class=\"line\">\t\t\t\tnum += 1000;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Palindrome-Number\"><a href=\"#Palindrome-Number\" class=\"headerlink\" title=\"Palindrome Number\"></a>Palindrome Number</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.<br>","more":"</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 121</span><br><span class=\"line\">Output: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2:\"></a>Example 2:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: -121</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example 3:\"></a>Example 3:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 10</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isPalindrome(int x) &#123;</span><br><span class=\"line\">        if (x &lt; 0) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; digitals = getNumbers(x);</span><br><span class=\"line\">        int count = digitals.size();</span><br><span class=\"line\">        for (int i = 0; i &lt; count / 2; i++) &#123;</span><br><span class=\"line\">            if (digitals.get(i) != digitals.get(count - 1 - i)) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; getNumbers(int x) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; digitals = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        long y = (long)x;</span><br><span class=\"line\">        for (;y &gt; 0;) &#123;</span><br><span class=\"line\">            int z = (int) (y % 10);</span><br><span class=\"line\">            digitals.add(z);</span><br><span class=\"line\">            y = y / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return digitals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Roman-to-Integer\"><a href=\"#Roman-to-Integer\" class=\"headerlink\" title=\"Roman to Integer\"></a>Roman to Integer</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/roman-to-integer/\">问题描述</a></h3><h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int romanToInt(String s) &#123;</span><br><span class=\"line\">\t\tint num = 0;</span><br><span class=\"line\">\t\tchar[] chars = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; chars.length; ) &#123;</span><br><span class=\"line\">\t\t\tchar cur = chars[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tswitch (cur) &#123;</span><br><span class=\"line\">\t\t\tcase &#x27;I&#x27;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 1;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &#x27;V&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 4;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &#x27;X&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 9;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 1;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;X&#x27;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 10;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &#x27;L&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 40;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &#x27;C&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 90;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 10;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;C&#x27;:</span><br><span class=\"line\">\t\t\t\tif (i == chars.length - 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tnum += 100;</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tchar next = chars[i + 1];</span><br><span class=\"line\">\t\t\t\t\tif (next == &#x27;D&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 400;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (next == &#x27;M&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 900;</span><br><span class=\"line\">\t\t\t\t\t\ti += 2;</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum += 100;</span><br><span class=\"line\">\t\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcase &#x27;V&#x27;:</span><br><span class=\"line\">\t\t\t\tnum += 5;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;L&#x27;:</span><br><span class=\"line\">\t\t\t\tnum += 50;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;D&#x27;:</span><br><span class=\"line\">\t\t\t\tnum += 500;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &#x27;M&#x27;:</span><br><span class=\"line\">\t\t\t\tnum += 1000;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode04","date":"2020-11-14T09:40:15.000Z","_content":"## 两数相加\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n链接：https://leetcode-cn.com/problems/add-two-numbers\n\n<!--more-->\n\n## 解题思路\n\n1. 两个非负整数相加有可能超过10，因此需要一个变量标记链表中两个节点之和是否超过10；\n2. 第二个关键点是如何判断指针是否到了链表尾部，分为2中情况\n```\n1、2个链表不一样长；\n2、2个链表一样长；\n其实上面2中情况可以通过一定的手段归结为一种情况，即：对于较短的链表，在其尾部补上值为0的节点即可；\n3、我们需要2个指针分表指向当前节点\n```\n\n3. 为了减少内存开销，我们可以把计算结果存储到两个链表中的一个。\n4. 因为我们前面同步补0的方式把两个链表长度变为一样长，因此需要标志位标记下什么时候2个链表被补齐了；\n\n## 实现\n综上，总体算法如下：\n\n```golang\nfunc AddTowNumber(l1 *ListNode, l2 *ListNode) *ListNode {\n\th1 := l1\n\th2 := l2\n\tbefore := h1\n\tcarry := 0\n\tflag := false\n\tflag1 := false\n\n\tfor ; ; {\n\t\tif h1.Next == nil {\n\t\t\th1.Next = &ListNode{0 , nil}\n\t\t\tflag = true\n\t\t}\n\n\t\tif h2.Next == nil {\n\t\t\th2.Next = &ListNode{0, nil}\n\t\t\tflag1 = true\n\t\t}\n\n\t\tif h1.Val == 0 && h2.Val == 0 && flag1 && flag{\n\t\t\tbreak\n\t\t}\n\n\t\tsum := h1.Val + h2.Val + carry\n\t\tif sum >= 10 {\n\t\t\tcarry = 1\n\t\t\tsum -= 10\n\t\t} else {\n\t\t\tcarry = 0\n\t\t}\n\t\th1.Val = sum\n\t\tbefore = h1\n\t\th1 = h1.Next\n\t\th2 = h2.Next\n\t}\n\n\tbefore.Next = nil\n\th1 = before\n\n\tif carry > 0 {\n\t\ttmp := ListNode{1, nil}\n\t\th1.Next = &tmp\n\t}\n\n\tfor ; l1.Next != nil; l1 = l1.Next {\n\t\tfmt.Println(l1.Val)\n\t}\n\n\tfmt.Println(l1.Val)\n\n\treturn l1\n}\n```\n","source":"_posts/leetcode04.md","raw":"---\ntitle: leetcode04\ndate: 2020-11-14 17:40:15\ntags: alogrithm\n---\n## 两数相加\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n链接：https://leetcode-cn.com/problems/add-two-numbers\n\n<!--more-->\n\n## 解题思路\n\n1. 两个非负整数相加有可能超过10，因此需要一个变量标记链表中两个节点之和是否超过10；\n2. 第二个关键点是如何判断指针是否到了链表尾部，分为2中情况\n```\n1、2个链表不一样长；\n2、2个链表一样长；\n其实上面2中情况可以通过一定的手段归结为一种情况，即：对于较短的链表，在其尾部补上值为0的节点即可；\n3、我们需要2个指针分表指向当前节点\n```\n\n3. 为了减少内存开销，我们可以把计算结果存储到两个链表中的一个。\n4. 因为我们前面同步补0的方式把两个链表长度变为一样长，因此需要标志位标记下什么时候2个链表被补齐了；\n\n## 实现\n综上，总体算法如下：\n\n```golang\nfunc AddTowNumber(l1 *ListNode, l2 *ListNode) *ListNode {\n\th1 := l1\n\th2 := l2\n\tbefore := h1\n\tcarry := 0\n\tflag := false\n\tflag1 := false\n\n\tfor ; ; {\n\t\tif h1.Next == nil {\n\t\t\th1.Next = &ListNode{0 , nil}\n\t\t\tflag = true\n\t\t}\n\n\t\tif h2.Next == nil {\n\t\t\th2.Next = &ListNode{0, nil}\n\t\t\tflag1 = true\n\t\t}\n\n\t\tif h1.Val == 0 && h2.Val == 0 && flag1 && flag{\n\t\t\tbreak\n\t\t}\n\n\t\tsum := h1.Val + h2.Val + carry\n\t\tif sum >= 10 {\n\t\t\tcarry = 1\n\t\t\tsum -= 10\n\t\t} else {\n\t\t\tcarry = 0\n\t\t}\n\t\th1.Val = sum\n\t\tbefore = h1\n\t\th1 = h1.Next\n\t\th2 = h2.Next\n\t}\n\n\tbefore.Next = nil\n\th1 = before\n\n\tif carry > 0 {\n\t\ttmp := ListNode{1, nil}\n\t\th1.Next = &tmp\n\t}\n\n\tfor ; l1.Next != nil; l1 = l1.Next {\n\t\tfmt.Println(l1.Val)\n\t}\n\n\tfmt.Println(l1.Val)\n\n\treturn l1\n}\n```\n","slug":"leetcode04","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395j000lp0pv6o32hml1","content":"<h2 id=\"两数相加\"><a href=\"#两数相加\" class=\"headerlink\" title=\"两数相加\"></a>两数相加</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/add-two-numbers\">https://leetcode-cn.com/problems/add-two-numbers</a></p>\n<span id=\"more\"></span>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>两个非负整数相加有可能超过10，因此需要一个变量标记链表中两个节点之和是否超过10；</li>\n<li><p>第二个关键点是如何判断指针是否到了链表尾部，分为2中情况</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、2个链表不一样长；</span><br><span class=\"line\">2、2个链表一样长；</span><br><span class=\"line\">其实上面2中情况可以通过一定的手段归结为一种情况，即：对于较短的链表，在其尾部补上值为0的节点即可；</span><br><span class=\"line\">3、我们需要2个指针分表指向当前节点</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了减少内存开销，我们可以把计算结果存储到两个链表中的一个。</p>\n</li>\n<li>因为我们前面同步补0的方式把两个链表长度变为一样长，因此需要标志位标记下什么时候2个链表被补齐了；</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>综上，总体算法如下：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddTowNumber</span><span class=\"params\">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;</span><br><span class=\"line\">\th1 := l1</span><br><span class=\"line\">\th2 := l2</span><br><span class=\"line\">\tbefore := h1</span><br><span class=\"line\">\tcarry := <span class=\"number\">0</span></span><br><span class=\"line\">\tflag := <span class=\"literal\">false</span></span><br><span class=\"line\">\tflag1 := <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; ; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h1.Next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\th1.Next = &amp;ListNode&#123;<span class=\"number\">0</span> , <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h2.Next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\th2.Next = &amp;ListNode&#123;<span class=\"number\">0</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\t\tflag1 = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h1.Val == <span class=\"number\">0</span> &amp;&amp; h2.Val == <span class=\"number\">0</span> &amp;&amp; flag1 &amp;&amp; flag&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsum := h1.Val + h2.Val + carry</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sum &gt;= <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\tcarry = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tsum -= <span class=\"number\">10</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcarry = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th1.Val = sum</span><br><span class=\"line\">\t\tbefore = h1</span><br><span class=\"line\">\t\th1 = h1.Next</span><br><span class=\"line\">\t\th2 = h2.Next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbefore.Next = <span class=\"literal\">nil</span></span><br><span class=\"line\">\th1 = before</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> carry &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttmp := ListNode&#123;<span class=\"number\">1</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\th1.Next = &amp;tmp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; l1.Next != <span class=\"literal\">nil</span>; l1 = l1.Next &#123;</span><br><span class=\"line\">\t\tfmt.Println(l1.Val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(l1.Val)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"两数相加\"><a href=\"#两数相加\" class=\"headerlink\" title=\"两数相加\"></a>两数相加</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/add-two-numbers\">https://leetcode-cn.com/problems/add-two-numbers</a></p>","more":"<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>两个非负整数相加有可能超过10，因此需要一个变量标记链表中两个节点之和是否超过10；</li>\n<li><p>第二个关键点是如何判断指针是否到了链表尾部，分为2中情况</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、2个链表不一样长；</span><br><span class=\"line\">2、2个链表一样长；</span><br><span class=\"line\">其实上面2中情况可以通过一定的手段归结为一种情况，即：对于较短的链表，在其尾部补上值为0的节点即可；</span><br><span class=\"line\">3、我们需要2个指针分表指向当前节点</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了减少内存开销，我们可以把计算结果存储到两个链表中的一个。</p>\n</li>\n<li>因为我们前面同步补0的方式把两个链表长度变为一样长，因此需要标志位标记下什么时候2个链表被补齐了；</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>综上，总体算法如下：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddTowNumber</span><span class=\"params\">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;</span><br><span class=\"line\">\th1 := l1</span><br><span class=\"line\">\th2 := l2</span><br><span class=\"line\">\tbefore := h1</span><br><span class=\"line\">\tcarry := <span class=\"number\">0</span></span><br><span class=\"line\">\tflag := <span class=\"literal\">false</span></span><br><span class=\"line\">\tflag1 := <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; ; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h1.Next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\th1.Next = &amp;ListNode&#123;<span class=\"number\">0</span> , <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h2.Next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\th2.Next = &amp;ListNode&#123;<span class=\"number\">0</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\t\tflag1 = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> h1.Val == <span class=\"number\">0</span> &amp;&amp; h2.Val == <span class=\"number\">0</span> &amp;&amp; flag1 &amp;&amp; flag&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsum := h1.Val + h2.Val + carry</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sum &gt;= <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\tcarry = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tsum -= <span class=\"number\">10</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcarry = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th1.Val = sum</span><br><span class=\"line\">\t\tbefore = h1</span><br><span class=\"line\">\t\th1 = h1.Next</span><br><span class=\"line\">\t\th2 = h2.Next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbefore.Next = <span class=\"literal\">nil</span></span><br><span class=\"line\">\th1 = before</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> carry &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttmp := ListNode&#123;<span class=\"number\">1</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">\t\th1.Next = &amp;tmp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; l1.Next != <span class=\"literal\">nil</span>; l1 = l1.Next &#123;</span><br><span class=\"line\">\t\tfmt.Println(l1.Val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(l1.Val)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"linux strace command introduction","date":"2019-05-27T15:23:02.000Z","_content":"## Linux strace 命令\n\n### 简介\nstrace（trace system calls and signals）命令是linux系统下的一款调试利器，用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间等。\n\n<!--more-->\n\n### 安装\nUbuntu系统已默认安装了strace，centos系列可以使用yum命令安装。当然，也可以直接通过源码安装，源码链接：https://github.com/strace/strace\n\n### 常见用法\n```shell\nstrace [-ACdffhikqrtttTvVxxy] [-ACdffhiqrtttTvVxxy] [-I n]\n              [-b execve] [-e expr]... [-a column] [-o file] [-s strsize]\n              [-X format] [-P path]... [-p pid]... { -p pid | [-D]\n              [-E var[=val]]... [-u username] command [args] }\n\nstrace -c [-df] [-I n] [-b execve] [-e expr]... [-O overhead]\n              [-S sortby] [-P path]... [-p pid]... { -p pid | [-D]\n              [-E var[=val]]... [-u username] command [args] }\n\n```\n\n常见参数说明\n\n```\n1. -c -- count time, calls, and errors for each syscall and report summary\n为每个系统调用计算时间、调用、错误，并报告摘要\n\n2. -f -- follow forks, -ff -- with output into separate files\n-f 跟踪fork的进程；-ff 把输出定向到独立的文件\n\n3. -F -- attempt to follow vforks, -h -- print help message\n-F 尝试跟踪vfork的进程，当今平台与-f功能相同；-h 打印帮助信息\n\n4. -i -- print instruction pointer at time of syscall\n在系统调用时，打印指令指针\n\n5. -q -- suppress messages about attaching, detaching, etc.\n抑制附加、分离等信息\n\n6. -r -- print relative timestamp, -t -- absolute timestamp, -tt -- with usecs\n-r 打印相对时间戳；-t 绝对时间戳；-tt 微秒\n\n7. -T -- print time spent in each syscall, -V -- print version\n-T 打印每个系统调用的时间花费；-V 打印版本\n\n8. -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args\n-v 详细模式，打印非简略的参数、状态、termio[s]等\n\n9. -x -- print non-ascii strings in hex, -xx -- print all strings in hex\n-x 打印非ascii的字符串为16进制；-xx 打印所有的字符串为16进制\n\n10. -a column -- alignment COLUMN for printing syscall results (default 40)\n对系统调用结果对齐列（默认为40列）\n\n11. -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...\n    options: trace, abbrev, verbose, raw, signal, read, or write\n在-e后附表达式。一个合格的表达式：选项=[!]所有 或者 选项=[!]值1[,值2]....；可选项:跟踪、缩写、冗长、原始的东东、信号、读、写。\n\n12. -o file -- send trace output to FILE instead of stderr\n发送跟踪输出到文件，而不是stderr\n\n13. -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs\n设置跟踪系统调用的最大时间\n\n14. -p pid -- trace process with process id PID, may be repeated\n跟踪值为ID的进程，可以重复多个哦(注：最多32个)\n\n15. -s strsize -- limit length of print strings to STRSIZE chars (default 32)\n限制打印字符串的最大长度，默认为32字节\n\n16. -S sortby -- sort syscall counts by: time, calls, name, nothing (default time)\n排序，以系统调用过程中的时间、或者调用名等作为排序项。\n\n17. -u username -- run command as username handling setuid and/or setgid\n以其他用户名或者组名运行命令\n\n18. -E var=val -- put var=val in the environment for command\n设置环境变量\n\n19. -E var -- remove var from the environment for command\n清除环境变量\n```\n\n更详细的用法可以用man strace获取。\n","source":"_posts/linux-strace-command-introduction.md","raw":"---\ntitle: linux strace command introduction\ndate: 2019-05-27 23:23:02\ntags: linux perf tools\n---\n## Linux strace 命令\n\n### 简介\nstrace（trace system calls and signals）命令是linux系统下的一款调试利器，用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间等。\n\n<!--more-->\n\n### 安装\nUbuntu系统已默认安装了strace，centos系列可以使用yum命令安装。当然，也可以直接通过源码安装，源码链接：https://github.com/strace/strace\n\n### 常见用法\n```shell\nstrace [-ACdffhikqrtttTvVxxy] [-ACdffhiqrtttTvVxxy] [-I n]\n              [-b execve] [-e expr]... [-a column] [-o file] [-s strsize]\n              [-X format] [-P path]... [-p pid]... { -p pid | [-D]\n              [-E var[=val]]... [-u username] command [args] }\n\nstrace -c [-df] [-I n] [-b execve] [-e expr]... [-O overhead]\n              [-S sortby] [-P path]... [-p pid]... { -p pid | [-D]\n              [-E var[=val]]... [-u username] command [args] }\n\n```\n\n常见参数说明\n\n```\n1. -c -- count time, calls, and errors for each syscall and report summary\n为每个系统调用计算时间、调用、错误，并报告摘要\n\n2. -f -- follow forks, -ff -- with output into separate files\n-f 跟踪fork的进程；-ff 把输出定向到独立的文件\n\n3. -F -- attempt to follow vforks, -h -- print help message\n-F 尝试跟踪vfork的进程，当今平台与-f功能相同；-h 打印帮助信息\n\n4. -i -- print instruction pointer at time of syscall\n在系统调用时，打印指令指针\n\n5. -q -- suppress messages about attaching, detaching, etc.\n抑制附加、分离等信息\n\n6. -r -- print relative timestamp, -t -- absolute timestamp, -tt -- with usecs\n-r 打印相对时间戳；-t 绝对时间戳；-tt 微秒\n\n7. -T -- print time spent in each syscall, -V -- print version\n-T 打印每个系统调用的时间花费；-V 打印版本\n\n8. -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args\n-v 详细模式，打印非简略的参数、状态、termio[s]等\n\n9. -x -- print non-ascii strings in hex, -xx -- print all strings in hex\n-x 打印非ascii的字符串为16进制；-xx 打印所有的字符串为16进制\n\n10. -a column -- alignment COLUMN for printing syscall results (default 40)\n对系统调用结果对齐列（默认为40列）\n\n11. -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...\n    options: trace, abbrev, verbose, raw, signal, read, or write\n在-e后附表达式。一个合格的表达式：选项=[!]所有 或者 选项=[!]值1[,值2]....；可选项:跟踪、缩写、冗长、原始的东东、信号、读、写。\n\n12. -o file -- send trace output to FILE instead of stderr\n发送跟踪输出到文件，而不是stderr\n\n13. -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs\n设置跟踪系统调用的最大时间\n\n14. -p pid -- trace process with process id PID, may be repeated\n跟踪值为ID的进程，可以重复多个哦(注：最多32个)\n\n15. -s strsize -- limit length of print strings to STRSIZE chars (default 32)\n限制打印字符串的最大长度，默认为32字节\n\n16. -S sortby -- sort syscall counts by: time, calls, name, nothing (default time)\n排序，以系统调用过程中的时间、或者调用名等作为排序项。\n\n17. -u username -- run command as username handling setuid and/or setgid\n以其他用户名或者组名运行命令\n\n18. -E var=val -- put var=val in the environment for command\n设置环境变量\n\n19. -E var -- remove var from the environment for command\n清除环境变量\n```\n\n更详细的用法可以用man strace获取。\n","slug":"linux-strace-command-introduction","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395m000np0pvalciegyk","content":"<h2 id=\"Linux-strace-命令\"><a href=\"#Linux-strace-命令\" class=\"headerlink\" title=\"Linux strace 命令\"></a>Linux strace 命令</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>strace（trace system calls and signals）命令是linux系统下的一款调试利器，用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间等。</p>\n<span id=\"more\"></span>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Ubuntu系统已默认安装了strace，centos系列可以使用yum命令安装。当然，也可以直接通过源码安装，源码链接：<a href=\"https://github.com/strace/strace\">https://github.com/strace/strace</a></p>\n<h3 id=\"常见用法\"><a href=\"#常见用法\" class=\"headerlink\" title=\"常见用法\"></a>常见用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace [-ACdffhikqrtttTvVxxy] [-ACdffhiqrtttTvVxxy] [-I n]</span><br><span class=\"line\">              [-b execve] [-e expr]... [-a column] [-o file] [-s strsize]</span><br><span class=\"line\">              [-X format] [-P path]... [-p pid]... &#123; -p pid | [-D]</span><br><span class=\"line\">              [-E var[=val]]... [-u username] command [args] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">strace -c [-df] [-I n] [-b execve] [-e expr]... [-O overhead]</span><br><span class=\"line\">              [-S sortby] [-P path]... [-p pid]... &#123; -p pid | [-D]</span><br><span class=\"line\">              [-E var[=val]]... [-u username] command [args] &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>常见参数说明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. -c -- count time, calls, and errors for each syscall and report summary</span><br><span class=\"line\">为每个系统调用计算时间、调用、错误，并报告摘要</span><br><span class=\"line\"></span><br><span class=\"line\">2. -f -- follow forks, -ff -- with output into separate files</span><br><span class=\"line\">-f 跟踪fork的进程；-ff 把输出定向到独立的文件</span><br><span class=\"line\"></span><br><span class=\"line\">3. -F -- attempt to follow vforks, -h -- print help message</span><br><span class=\"line\">-F 尝试跟踪vfork的进程，当今平台与-f功能相同；-h 打印帮助信息</span><br><span class=\"line\"></span><br><span class=\"line\">4. -i -- print instruction pointer at time of syscall</span><br><span class=\"line\">在系统调用时，打印指令指针</span><br><span class=\"line\"></span><br><span class=\"line\">5. -q -- suppress messages about attaching, detaching, etc.</span><br><span class=\"line\">抑制附加、分离等信息</span><br><span class=\"line\"></span><br><span class=\"line\">6. -r -- print relative timestamp, -t -- absolute timestamp, -tt -- with usecs</span><br><span class=\"line\">-r 打印相对时间戳；-t 绝对时间戳；-tt 微秒</span><br><span class=\"line\"></span><br><span class=\"line\">7. -T -- print time spent in each syscall, -V -- print version</span><br><span class=\"line\">-T 打印每个系统调用的时间花费；-V 打印版本</span><br><span class=\"line\"></span><br><span class=\"line\">8. -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args</span><br><span class=\"line\">-v 详细模式，打印非简略的参数、状态、termio[s]等</span><br><span class=\"line\"></span><br><span class=\"line\">9. -x -- print non-ascii strings in hex, -xx -- print all strings in hex</span><br><span class=\"line\">-x 打印非ascii的字符串为16进制；-xx 打印所有的字符串为16进制</span><br><span class=\"line\"></span><br><span class=\"line\">10. -a column -- alignment COLUMN for printing syscall results (default 40)</span><br><span class=\"line\">对系统调用结果对齐列（默认为40列）</span><br><span class=\"line\"></span><br><span class=\"line\">11. -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...</span><br><span class=\"line\">    options: trace, abbrev, verbose, raw, signal, read, or write</span><br><span class=\"line\">在-e后附表达式。一个合格的表达式：选项=[!]所有 或者 选项=[!]值1[,值2]....；可选项:跟踪、缩写、冗长、原始的东东、信号、读、写。</span><br><span class=\"line\"></span><br><span class=\"line\">12. -o file -- send trace output to FILE instead of stderr</span><br><span class=\"line\">发送跟踪输出到文件，而不是stderr</span><br><span class=\"line\"></span><br><span class=\"line\">13. -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs</span><br><span class=\"line\">设置跟踪系统调用的最大时间</span><br><span class=\"line\"></span><br><span class=\"line\">14. -p pid -- trace process with process id PID, may be repeated</span><br><span class=\"line\">跟踪值为ID的进程，可以重复多个哦(注：最多32个)</span><br><span class=\"line\"></span><br><span class=\"line\">15. -s strsize -- limit length of print strings to STRSIZE chars (default 32)</span><br><span class=\"line\">限制打印字符串的最大长度，默认为32字节</span><br><span class=\"line\"></span><br><span class=\"line\">16. -S sortby -- sort syscall counts by: time, calls, name, nothing (default time)</span><br><span class=\"line\">排序，以系统调用过程中的时间、或者调用名等作为排序项。</span><br><span class=\"line\"></span><br><span class=\"line\">17. -u username -- run command as username handling setuid and/or setgid</span><br><span class=\"line\">以其他用户名或者组名运行命令</span><br><span class=\"line\"></span><br><span class=\"line\">18. -E var=val -- put var=val in the environment for command</span><br><span class=\"line\">设置环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">19. -E var -- remove var from the environment for command</span><br><span class=\"line\">清除环境变量</span><br></pre></td></tr></table></figure>\n<p>更详细的用法可以用man strace获取。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Linux-strace-命令\"><a href=\"#Linux-strace-命令\" class=\"headerlink\" title=\"Linux strace 命令\"></a>Linux strace 命令</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>strace（trace system calls and signals）命令是linux系统下的一款调试利器，用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间等。</p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Ubuntu系统已默认安装了strace，centos系列可以使用yum命令安装。当然，也可以直接通过源码安装，源码链接：<a href=\"https://github.com/strace/strace\">https://github.com/strace/strace</a></p>\n<h3 id=\"常见用法\"><a href=\"#常见用法\" class=\"headerlink\" title=\"常见用法\"></a>常见用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace [-ACdffhikqrtttTvVxxy] [-ACdffhiqrtttTvVxxy] [-I n]</span><br><span class=\"line\">              [-b execve] [-e expr]... [-a column] [-o file] [-s strsize]</span><br><span class=\"line\">              [-X format] [-P path]... [-p pid]... &#123; -p pid | [-D]</span><br><span class=\"line\">              [-E var[=val]]... [-u username] command [args] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">strace -c [-df] [-I n] [-b execve] [-e expr]... [-O overhead]</span><br><span class=\"line\">              [-S sortby] [-P path]... [-p pid]... &#123; -p pid | [-D]</span><br><span class=\"line\">              [-E var[=val]]... [-u username] command [args] &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>常见参数说明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. -c -- count time, calls, and errors for each syscall and report summary</span><br><span class=\"line\">为每个系统调用计算时间、调用、错误，并报告摘要</span><br><span class=\"line\"></span><br><span class=\"line\">2. -f -- follow forks, -ff -- with output into separate files</span><br><span class=\"line\">-f 跟踪fork的进程；-ff 把输出定向到独立的文件</span><br><span class=\"line\"></span><br><span class=\"line\">3. -F -- attempt to follow vforks, -h -- print help message</span><br><span class=\"line\">-F 尝试跟踪vfork的进程，当今平台与-f功能相同；-h 打印帮助信息</span><br><span class=\"line\"></span><br><span class=\"line\">4. -i -- print instruction pointer at time of syscall</span><br><span class=\"line\">在系统调用时，打印指令指针</span><br><span class=\"line\"></span><br><span class=\"line\">5. -q -- suppress messages about attaching, detaching, etc.</span><br><span class=\"line\">抑制附加、分离等信息</span><br><span class=\"line\"></span><br><span class=\"line\">6. -r -- print relative timestamp, -t -- absolute timestamp, -tt -- with usecs</span><br><span class=\"line\">-r 打印相对时间戳；-t 绝对时间戳；-tt 微秒</span><br><span class=\"line\"></span><br><span class=\"line\">7. -T -- print time spent in each syscall, -V -- print version</span><br><span class=\"line\">-T 打印每个系统调用的时间花费；-V 打印版本</span><br><span class=\"line\"></span><br><span class=\"line\">8. -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args</span><br><span class=\"line\">-v 详细模式，打印非简略的参数、状态、termio[s]等</span><br><span class=\"line\"></span><br><span class=\"line\">9. -x -- print non-ascii strings in hex, -xx -- print all strings in hex</span><br><span class=\"line\">-x 打印非ascii的字符串为16进制；-xx 打印所有的字符串为16进制</span><br><span class=\"line\"></span><br><span class=\"line\">10. -a column -- alignment COLUMN for printing syscall results (default 40)</span><br><span class=\"line\">对系统调用结果对齐列（默认为40列）</span><br><span class=\"line\"></span><br><span class=\"line\">11. -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...</span><br><span class=\"line\">    options: trace, abbrev, verbose, raw, signal, read, or write</span><br><span class=\"line\">在-e后附表达式。一个合格的表达式：选项=[!]所有 或者 选项=[!]值1[,值2]....；可选项:跟踪、缩写、冗长、原始的东东、信号、读、写。</span><br><span class=\"line\"></span><br><span class=\"line\">12. -o file -- send trace output to FILE instead of stderr</span><br><span class=\"line\">发送跟踪输出到文件，而不是stderr</span><br><span class=\"line\"></span><br><span class=\"line\">13. -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs</span><br><span class=\"line\">设置跟踪系统调用的最大时间</span><br><span class=\"line\"></span><br><span class=\"line\">14. -p pid -- trace process with process id PID, may be repeated</span><br><span class=\"line\">跟踪值为ID的进程，可以重复多个哦(注：最多32个)</span><br><span class=\"line\"></span><br><span class=\"line\">15. -s strsize -- limit length of print strings to STRSIZE chars (default 32)</span><br><span class=\"line\">限制打印字符串的最大长度，默认为32字节</span><br><span class=\"line\"></span><br><span class=\"line\">16. -S sortby -- sort syscall counts by: time, calls, name, nothing (default time)</span><br><span class=\"line\">排序，以系统调用过程中的时间、或者调用名等作为排序项。</span><br><span class=\"line\"></span><br><span class=\"line\">17. -u username -- run command as username handling setuid and/or setgid</span><br><span class=\"line\">以其他用户名或者组名运行命令</span><br><span class=\"line\"></span><br><span class=\"line\">18. -E var=val -- put var=val in the environment for command</span><br><span class=\"line\">设置环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">19. -E var -- remove var from the environment for command</span><br><span class=\"line\">清除环境变量</span><br></pre></td></tr></table></figure>\n<p>更详细的用法可以用man strace获取。</p>"},{"title":"合并两个有序链表","date":"2021-11-28T06:08:02.000Z","_content":"\n## 题目\n将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\n\n<!--more-->\n\n示例：\n\n![](merge_ex1.jpeg)\n\n## 解法\n\n```\n\n type ListNode struct {\n    Val int\n    Next *ListNode\n }\n\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    if list1 ==  nil {\n\t\treturn list2\n\t}\n\n\tif list2 == nil {\n\t\treturn list1\n\t}\n\t\n\thead := list1\n\tif list1.Val > list2.Val {\n\t\thead = list2\n\t\tlist2 = list2.Next\n\t} else {\n\t\tlist1 = list1.Next\n\t}\n\n\ttail := head\n\n\tfor ;list1 != nil && list2 != nil; {\n\t\tif list1.Val <= list2.Val {\n\t\t\ttail.Next = list1\n\t\t\ttail = tail.Next\n\t\t\tlist1 = list1.Next\n\t\t} else {\n\t\t\ttail.Next = list2\n\t\t\ttail = tail.Next\n\t\t\tlist2 = list2.Next\n\t\t}\n\t}\n\n\tif list1 == nil {\n\t\ttail.Next = list2\n\t}\n\n\tif list2 == nil {\n\t\ttail.Next = list1\n\t}\n\n\treturn head\n}\n```","source":"_posts/合并两个有序链表.md","raw":"---\ntitle: 合并两个有序链表\ndate: 2021-11-28 14:08:02\ntags: 算法\n---\n\n## 题目\n将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\n\n<!--more-->\n\n示例：\n\n![](merge_ex1.jpeg)\n\n## 解法\n\n```\n\n type ListNode struct {\n    Val int\n    Next *ListNode\n }\n\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    if list1 ==  nil {\n\t\treturn list2\n\t}\n\n\tif list2 == nil {\n\t\treturn list1\n\t}\n\t\n\thead := list1\n\tif list1.Val > list2.Val {\n\t\thead = list2\n\t\tlist2 = list2.Next\n\t} else {\n\t\tlist1 = list1.Next\n\t}\n\n\ttail := head\n\n\tfor ;list1 != nil && list2 != nil; {\n\t\tif list1.Val <= list2.Val {\n\t\t\ttail.Next = list1\n\t\t\ttail = tail.Next\n\t\t\tlist1 = list1.Next\n\t\t} else {\n\t\t\ttail.Next = list2\n\t\t\ttail = tail.Next\n\t\t\tlist2 = list2.Next\n\t\t}\n\t}\n\n\tif list1 == nil {\n\t\ttail.Next = list2\n\t}\n\n\tif list2 == nil {\n\t\ttail.Next = list1\n\t}\n\n\treturn head\n}\n```","slug":"合并两个有序链表","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395m000pp0pv4uqy66rq","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n<span id=\"more\"></span>\n<p>示例：</p>\n<p><img src=\"merge_ex1.jpeg\" alt=\"\"></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> type ListNode struct &#123;</span><br><span class=\"line\">    Val int</span><br><span class=\"line\">    Next *ListNode</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode &#123;</span><br><span class=\"line\">    if list1 ==  nil &#123;</span><br><span class=\"line\">\t\treturn list2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif list2 == nil &#123;</span><br><span class=\"line\">\t\treturn list1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\thead := list1</span><br><span class=\"line\">\tif list1.Val &gt; list2.Val &#123;</span><br><span class=\"line\">\t\thead = list2</span><br><span class=\"line\">\t\tlist2 = list2.Next</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tlist1 = list1.Next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttail := head</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor ;list1 != nil &amp;&amp; list2 != nil; &#123;</span><br><span class=\"line\">\t\tif list1.Val &lt;= list2.Val &#123;</span><br><span class=\"line\">\t\t\ttail.Next = list1</span><br><span class=\"line\">\t\t\ttail = tail.Next</span><br><span class=\"line\">\t\t\tlist1 = list1.Next</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\ttail.Next = list2</span><br><span class=\"line\">\t\t\ttail = tail.Next</span><br><span class=\"line\">\t\t\tlist2 = list2.Next</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif list1 == nil &#123;</span><br><span class=\"line\">\t\ttail.Next = list2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif list2 == nil &#123;</span><br><span class=\"line\">\t\ttail.Next = list1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>","more":"<p>示例：</p>\n<p><img src=\"merge_ex1.jpeg\" alt=\"\"></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> type ListNode struct &#123;</span><br><span class=\"line\">    Val int</span><br><span class=\"line\">    Next *ListNode</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode &#123;</span><br><span class=\"line\">    if list1 ==  nil &#123;</span><br><span class=\"line\">\t\treturn list2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif list2 == nil &#123;</span><br><span class=\"line\">\t\treturn list1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\thead := list1</span><br><span class=\"line\">\tif list1.Val &gt; list2.Val &#123;</span><br><span class=\"line\">\t\thead = list2</span><br><span class=\"line\">\t\tlist2 = list2.Next</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tlist1 = list1.Next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttail := head</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor ;list1 != nil &amp;&amp; list2 != nil; &#123;</span><br><span class=\"line\">\t\tif list1.Val &lt;= list2.Val &#123;</span><br><span class=\"line\">\t\t\ttail.Next = list1</span><br><span class=\"line\">\t\t\ttail = tail.Next</span><br><span class=\"line\">\t\t\tlist1 = list1.Next</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\ttail.Next = list2</span><br><span class=\"line\">\t\t\ttail = tail.Next</span><br><span class=\"line\">\t\t\tlist2 = list2.Next</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif list1 == nil &#123;</span><br><span class=\"line\">\t\ttail.Next = list2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif list2 == nil &#123;</span><br><span class=\"line\">\t\ttail.Next = list1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode03","date":"2019-05-04T14:30:10.000Z","_content":"## \tLongest Common Prefix\n### [问题描述](https://leetcode.com/problems/longest-common-prefix/)\n<!--more-->\n### 解答\n```\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length < 1) {\n            return \"\";\n        }\n\n\t\tList<char[]> chars = new ArrayList<>();\n\t\tint _minLength = strs[0].length();\n\t\tfor (String s: strs) {\n\t\t\tchars.add(s.toCharArray());\n\t\t\tif (_minLength > s.length()) {\n\t\t\t\t_minLength = s.length();\n\t\t\t}\n\t\t}\n\n\t\tList<Character> result = new ArrayList<>();\n\t\tboolean breaked = false;\n\t\tfor (int i = 0; i < _minLength; i++) {\n\t\t\tchar ch1 = chars.get(0)[i];\n\t\t\tfor (int j = 1; j < strs.length; j++) {\n\t\t\t\tif (chars.get(j)[i] != ch1) {\n\t\t\t\t\tbreaked = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (breaked) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult.add(ch1);\n\t\t}\n\n\t\tif (result.size() == 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (Character character: result) {\n\t\t\t\tsb.append(character);\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n}\n```\n\n## Valid Parentheses\n\n### [问题描述](https://leetcode.com/problems/valid-parentheses/)\n### 解答\n```\nclass Solution {\n   public boolean isValid(String s) {\n        char[] chars = s.toCharArray();\n\n       if (chars.length == 0 ) {\n           return true;\n       }\n\n       if (chars.length < 2 || chars.length % 2 != 0) {\n           return false;\n       }\n\n        char[] stack = new char[chars.length];\n        int j = 0;\n        stack[0] = chars[0];\n        for (int i = 1; i < chars.length; i++) {\n            if (j >= 0 && (stack[j] == '('  && chars[i] == ')'\n                    || stack[j] == '[' && chars[i] == ']'\n                    || stack[j] == '{' && chars[i] == '}') ) {\n                j--;\n            } else {\n                stack[j+1] = chars[i];\n                j = j + 1;\n            }\n        }\n\n        if (j == -1) {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n$$\n\\sum\n$$\n","source":"_posts/leetcode03.md","raw":"---\ntitle: leetcode03\ndate: 2019-05-04 22:30:10\ntags:\n---\n## \tLongest Common Prefix\n### [问题描述](https://leetcode.com/problems/longest-common-prefix/)\n<!--more-->\n### 解答\n```\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length < 1) {\n            return \"\";\n        }\n\n\t\tList<char[]> chars = new ArrayList<>();\n\t\tint _minLength = strs[0].length();\n\t\tfor (String s: strs) {\n\t\t\tchars.add(s.toCharArray());\n\t\t\tif (_minLength > s.length()) {\n\t\t\t\t_minLength = s.length();\n\t\t\t}\n\t\t}\n\n\t\tList<Character> result = new ArrayList<>();\n\t\tboolean breaked = false;\n\t\tfor (int i = 0; i < _minLength; i++) {\n\t\t\tchar ch1 = chars.get(0)[i];\n\t\t\tfor (int j = 1; j < strs.length; j++) {\n\t\t\t\tif (chars.get(j)[i] != ch1) {\n\t\t\t\t\tbreaked = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (breaked) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult.add(ch1);\n\t\t}\n\n\t\tif (result.size() == 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (Character character: result) {\n\t\t\t\tsb.append(character);\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n}\n```\n\n## Valid Parentheses\n\n### [问题描述](https://leetcode.com/problems/valid-parentheses/)\n### 解答\n```\nclass Solution {\n   public boolean isValid(String s) {\n        char[] chars = s.toCharArray();\n\n       if (chars.length == 0 ) {\n           return true;\n       }\n\n       if (chars.length < 2 || chars.length % 2 != 0) {\n           return false;\n       }\n\n        char[] stack = new char[chars.length];\n        int j = 0;\n        stack[0] = chars[0];\n        for (int i = 1; i < chars.length; i++) {\n            if (j >= 0 && (stack[j] == '('  && chars[i] == ')'\n                    || stack[j] == '[' && chars[i] == ']'\n                    || stack[j] == '{' && chars[i] == '}') ) {\n                j--;\n            } else {\n                stack[j+1] = chars[i];\n                j = j + 1;\n            }\n        }\n\n        if (j == -1) {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n$$\n\\sum\n$$\n","slug":"leetcode03","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395n000rp0pv061bczjm","content":"<h2 id=\"Longest-Common-Prefix\"><a href=\"#Longest-Common-Prefix\" class=\"headerlink\" title=\"Longest Common Prefix\"></a>Longest Common Prefix</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/\">问题描述</a></h3><span id=\"more\"></span>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public String longestCommonPrefix(String[] strs) &#123;</span><br><span class=\"line\">        if (strs.length &lt; 1) &#123;</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;char[]&gt; chars = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tint _minLength = strs[0].length();</span><br><span class=\"line\">\t\tfor (String s: strs) &#123;</span><br><span class=\"line\">\t\t\tchars.add(s.toCharArray());</span><br><span class=\"line\">\t\t\tif (_minLength &gt; s.length()) &#123;</span><br><span class=\"line\">\t\t\t\t_minLength = s.length();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;Character&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tboolean breaked = false;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; _minLength; i++) &#123;</span><br><span class=\"line\">\t\t\tchar ch1 = chars.get(0)[i];</span><br><span class=\"line\">\t\t\tfor (int j = 1; j &lt; strs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (chars.get(j)[i] != ch1) &#123;</span><br><span class=\"line\">\t\t\t\t\tbreaked = true;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (breaked) &#123;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresult.add(ch1);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (result.size() == 0) &#123;</span><br><span class=\"line\">\t\t\treturn &quot;&quot;;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tStringBuilder sb = new StringBuilder();</span><br><span class=\"line\">\t\t\tfor (Character character: result) &#123;</span><br><span class=\"line\">\t\t\t\tsb.append(character);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn sb.toString();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Valid-Parentheses\"><a href=\"#Valid-Parentheses\" class=\"headerlink\" title=\"Valid Parentheses\"></a>Valid Parentheses</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/\">问题描述</a></h3><h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">   public boolean isValid(String s) &#123;</span><br><span class=\"line\">        char[] chars = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (chars.length == 0 ) &#123;</span><br><span class=\"line\">           return true;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (chars.length &lt; 2 || chars.length % 2 != 0) &#123;</span><br><span class=\"line\">           return false;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        char[] stack = new char[chars.length];</span><br><span class=\"line\">        int j = 0;</span><br><span class=\"line\">        stack[0] = chars[0];</span><br><span class=\"line\">        for (int i = 1; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">            if (j &gt;= 0 &amp;&amp; (stack[j] == &#x27;(&#x27;  &amp;&amp; chars[i] == &#x27;)&#x27;</span><br><span class=\"line\">                    || stack[j] == &#x27;[&#x27; &amp;&amp; chars[i] == &#x27;]&#x27;</span><br><span class=\"line\">                    || stack[j] == &#x27;&#123;&#x27; &amp;&amp; chars[i] == &#x27;&#125;&#x27;) ) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                stack[j+1] = chars[i];</span><br><span class=\"line\">                j = j + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (j == -1) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$$<br>\\sum<br>$$</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Longest-Common-Prefix\"><a href=\"#Longest-Common-Prefix\" class=\"headerlink\" title=\"Longest Common Prefix\"></a>Longest Common Prefix</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/\">问题描述</a></h3>","more":"<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public String longestCommonPrefix(String[] strs) &#123;</span><br><span class=\"line\">        if (strs.length &lt; 1) &#123;</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;char[]&gt; chars = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tint _minLength = strs[0].length();</span><br><span class=\"line\">\t\tfor (String s: strs) &#123;</span><br><span class=\"line\">\t\t\tchars.add(s.toCharArray());</span><br><span class=\"line\">\t\t\tif (_minLength &gt; s.length()) &#123;</span><br><span class=\"line\">\t\t\t\t_minLength = s.length();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;Character&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tboolean breaked = false;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; _minLength; i++) &#123;</span><br><span class=\"line\">\t\t\tchar ch1 = chars.get(0)[i];</span><br><span class=\"line\">\t\t\tfor (int j = 1; j &lt; strs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (chars.get(j)[i] != ch1) &#123;</span><br><span class=\"line\">\t\t\t\t\tbreaked = true;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (breaked) &#123;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresult.add(ch1);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (result.size() == 0) &#123;</span><br><span class=\"line\">\t\t\treturn &quot;&quot;;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tStringBuilder sb = new StringBuilder();</span><br><span class=\"line\">\t\t\tfor (Character character: result) &#123;</span><br><span class=\"line\">\t\t\t\tsb.append(character);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn sb.toString();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Valid-Parentheses\"><a href=\"#Valid-Parentheses\" class=\"headerlink\" title=\"Valid Parentheses\"></a>Valid Parentheses</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/\">问题描述</a></h3><h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">   public boolean isValid(String s) &#123;</span><br><span class=\"line\">        char[] chars = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (chars.length == 0 ) &#123;</span><br><span class=\"line\">           return true;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (chars.length &lt; 2 || chars.length % 2 != 0) &#123;</span><br><span class=\"line\">           return false;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        char[] stack = new char[chars.length];</span><br><span class=\"line\">        int j = 0;</span><br><span class=\"line\">        stack[0] = chars[0];</span><br><span class=\"line\">        for (int i = 1; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">            if (j &gt;= 0 &amp;&amp; (stack[j] == &#x27;(&#x27;  &amp;&amp; chars[i] == &#x27;)&#x27;</span><br><span class=\"line\">                    || stack[j] == &#x27;[&#x27; &amp;&amp; chars[i] == &#x27;]&#x27;</span><br><span class=\"line\">                    || stack[j] == &#x27;&#123;&#x27; &amp;&amp; chars[i] == &#x27;&#125;&#x27;) ) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                stack[j+1] = chars[i];</span><br><span class=\"line\">                j = j + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (j == -1) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$$<br>\\sum<br>$$</p>"},{"title":"回文数","date":"2021-11-21T08:48:47.000Z","_content":"\n## 题目\n给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。\n\n回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。\n\n<!--more-->\n\n## 解法\n\n```\nfunc isPalindrome(x int) bool {\n    if x < 0 {\n\t\treturn false\n\t}\n\n\tif x < 10 {\n\t\treturn true\n\t}\n\n\tbytes := make([]byte, 0)\n\n\tfor i := 1;;i++ {\n\t\tif x < 10 {\n\t\t\tbytes = append(bytes, byte(x))\n\t\t\tbreak\n\t\t}\n\t\ty := x %10\n\t\tbytes = append(bytes, byte(y))\n\t\tx = x / 10\n\t}\n\n\tlength := len(bytes)\n\ti := 0\n\tfor ; i < length; i++ {\n\t\tif bytes[i] == bytes[length -1 - i] {\n\t\t\tcontinue\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif i == length {\n\t\treturn true\n\t}\n\n\treturn false\n}\n\n```","source":"_posts/回文数.md","raw":"---\ntitle: 回文数\ndate: 2021-11-21 16:48:47\ntags: 算法\n---\n\n## 题目\n给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。\n\n回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。\n\n<!--more-->\n\n## 解法\n\n```\nfunc isPalindrome(x int) bool {\n    if x < 0 {\n\t\treturn false\n\t}\n\n\tif x < 10 {\n\t\treturn true\n\t}\n\n\tbytes := make([]byte, 0)\n\n\tfor i := 1;;i++ {\n\t\tif x < 10 {\n\t\t\tbytes = append(bytes, byte(x))\n\t\t\tbreak\n\t\t}\n\t\ty := x %10\n\t\tbytes = append(bytes, byte(y))\n\t\tx = x / 10\n\t}\n\n\tlength := len(bytes)\n\ti := 0\n\tfor ; i < length; i++ {\n\t\tif bytes[i] == bytes[length -1 - i] {\n\t\t\tcontinue\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif i == length {\n\t\treturn true\n\t}\n\n\treturn false\n}\n\n```","slug":"回文数","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395o000tp0pv28speyen","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p>\n<span id=\"more\"></span>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func isPalindrome(x int) bool &#123;</span><br><span class=\"line\">    if x &lt; 0 &#123;</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif x &lt; 10 &#123;</span><br><span class=\"line\">\t\treturn true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbytes := make([]byte, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 1;;i++ &#123;</span><br><span class=\"line\">\t\tif x &lt; 10 &#123;</span><br><span class=\"line\">\t\t\tbytes = append(bytes, byte(x))</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ty := x %10</span><br><span class=\"line\">\t\tbytes = append(bytes, byte(y))</span><br><span class=\"line\">\t\tx = x / 10</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlength := len(bytes)</span><br><span class=\"line\">\ti := 0</span><br><span class=\"line\">\tfor ; i &lt; length; i++ &#123;</span><br><span class=\"line\">\t\tif bytes[i] == bytes[length -1 - i] &#123;</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif i == length &#123;</span><br><span class=\"line\">\t\treturn true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p>","more":"<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func isPalindrome(x int) bool &#123;</span><br><span class=\"line\">    if x &lt; 0 &#123;</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif x &lt; 10 &#123;</span><br><span class=\"line\">\t\treturn true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbytes := make([]byte, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 1;;i++ &#123;</span><br><span class=\"line\">\t\tif x &lt; 10 &#123;</span><br><span class=\"line\">\t\t\tbytes = append(bytes, byte(x))</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ty := x %10</span><br><span class=\"line\">\t\tbytes = append(bytes, byte(y))</span><br><span class=\"line\">\t\tx = x / 10</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlength := len(bytes)</span><br><span class=\"line\">\ti := 0</span><br><span class=\"line\">\tfor ; i &lt; length; i++ &#123;</span><br><span class=\"line\">\t\tif bytes[i] == bytes[length -1 - i] &#123;</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif i == length &#123;</span><br><span class=\"line\">\t\treturn true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"整数反转","date":"2021-11-20T08:47:34.000Z","_content":"\n## 题目\n\n给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。\n\n如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。\n\n假设环境不允许存储 64 位整数（有符号或无符号）。\n\n<!--more-->\n\n## 解法\n```\nfunc reverse(x int) int {\n\tnegative := false\n\tif x < 0 {\n\t\tnegative = true\n\t}\n\tvar tmp int64\n\tif negative {\n\t\ttmp = -1 * int64(x)\n\t} else {\n\t\ttmp = int64(x)\n\t}\n\n\tvar y int64\n\n\tfor i := 1; ; i++ {\n\t\tif tmp / 10 == 0 {\n\t\t\ty = y * 10 + tmp % 10\n\t\t\tbreak\n\t\t}\n\t\ty = y * 10 + tmp % 10\n\t\ttmp = tmp / 10\n\t}\n\n\tif y > (1 << 31 -1) {\n\t\treturn 0\n\t}\n\n\tif negative {\n\t\treturn  int(-1 * y)\n\t}\n\n\treturn int(y)\n}\n```\n\n","source":"_posts/整数反转.md","raw":"---\ntitle: 整数反转\ndate: 2021-11-20 16:47:34\ntags: 算法\n---\n\n## 题目\n\n给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。\n\n如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。\n\n假设环境不允许存储 64 位整数（有符号或无符号）。\n\n<!--more-->\n\n## 解法\n```\nfunc reverse(x int) int {\n\tnegative := false\n\tif x < 0 {\n\t\tnegative = true\n\t}\n\tvar tmp int64\n\tif negative {\n\t\ttmp = -1 * int64(x)\n\t} else {\n\t\ttmp = int64(x)\n\t}\n\n\tvar y int64\n\n\tfor i := 1; ; i++ {\n\t\tif tmp / 10 == 0 {\n\t\t\ty = y * 10 + tmp % 10\n\t\t\tbreak\n\t\t}\n\t\ty = y * 10 + tmp % 10\n\t\ttmp = tmp / 10\n\t}\n\n\tif y > (1 << 31 -1) {\n\t\treturn 0\n\t}\n\n\tif negative {\n\t\treturn  int(-1 * y)\n\t}\n\n\treturn int(y)\n}\n```\n\n","slug":"整数反转","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395p000vp0pv3d8dfhkp","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p>\n<p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p>\n<p>假设环境不允许存储 64 位整数（有符号或无符号）。</p>\n<span id=\"more\"></span>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func reverse(x int) int &#123;</span><br><span class=\"line\">\tnegative := false</span><br><span class=\"line\">\tif x &lt; 0 &#123;</span><br><span class=\"line\">\t\tnegative = true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar tmp int64</span><br><span class=\"line\">\tif negative &#123;</span><br><span class=\"line\">\t\ttmp = -1 * int64(x)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\ttmp = int64(x)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar y int64</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 1; ; i++ &#123;</span><br><span class=\"line\">\t\tif tmp / 10 == 0 &#123;</span><br><span class=\"line\">\t\t\ty = y * 10 + tmp % 10</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ty = y * 10 + tmp % 10</span><br><span class=\"line\">\t\ttmp = tmp / 10</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif y &gt; (1 &lt;&lt; 31 -1) &#123;</span><br><span class=\"line\">\t\treturn 0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif negative &#123;</span><br><span class=\"line\">\t\treturn  int(-1 * y)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn int(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p>\n<p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p>\n<p>假设环境不允许存储 64 位整数（有符号或无符号）。</p>","more":"<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func reverse(x int) int &#123;</span><br><span class=\"line\">\tnegative := false</span><br><span class=\"line\">\tif x &lt; 0 &#123;</span><br><span class=\"line\">\t\tnegative = true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar tmp int64</span><br><span class=\"line\">\tif negative &#123;</span><br><span class=\"line\">\t\ttmp = -1 * int64(x)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\ttmp = int64(x)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar y int64</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 1; ; i++ &#123;</span><br><span class=\"line\">\t\tif tmp / 10 == 0 &#123;</span><br><span class=\"line\">\t\t\ty = y * 10 + tmp % 10</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ty = y * 10 + tmp % 10</span><br><span class=\"line\">\t\ttmp = tmp / 10</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif y &gt; (1 &lt;&lt; 31 -1) &#123;</span><br><span class=\"line\">\t\treturn 0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif negative &#123;</span><br><span class=\"line\">\t\treturn  int(-1 * y)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn int(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"最长公共前缀","date":"2021-11-21T12:34:33.000Z","_content":"\n## 题目\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 \"\"。\n\n<!--more-->\n\n## 解法\n```\nfunc longestCommonPrefix(strs []string) string {\n\tif len(strs) == 1 {\n\t\treturn strs[0]\n\t}\n\n\tminLength := len(strs[0])\n\tminIndex := 0\n\tfor i := 0; i < len(strs); i++ {\n\t\tif len(strs[i]) < minLength {\n\t\t\tminLength = len(strs[i])\n\t\t\tminIndex = i\n\t\t}\n\t}\n\n\n\ti := minLength - 1\n\tfor ; i >= 0; i-- {\n\t\tboolVar := true\n\t\tfor j := 0; j < len(strs); j++ {\n\t\t\tif strs[j][:i+1] != strs[minIndex][:i+1] {\n\t\t\t\tboolVar = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif boolVar {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif i < 0 {\n\t\treturn \"\"\n\t}\n\n\treturn strs[minIndex][:i+1]\n}\n\n```","source":"_posts/最长公共前缀.md","raw":"---\ntitle: 最长公共前缀\ndate: 2021-11-21 20:34:33\ntags: 算法\n---\n\n## 题目\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 \"\"。\n\n<!--more-->\n\n## 解法\n```\nfunc longestCommonPrefix(strs []string) string {\n\tif len(strs) == 1 {\n\t\treturn strs[0]\n\t}\n\n\tminLength := len(strs[0])\n\tminIndex := 0\n\tfor i := 0; i < len(strs); i++ {\n\t\tif len(strs[i]) < minLength {\n\t\t\tminLength = len(strs[i])\n\t\t\tminIndex = i\n\t\t}\n\t}\n\n\n\ti := minLength - 1\n\tfor ; i >= 0; i-- {\n\t\tboolVar := true\n\t\tfor j := 0; j < len(strs); j++ {\n\t\t\tif strs[j][:i+1] != strs[minIndex][:i+1] {\n\t\t\t\tboolVar = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif boolVar {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif i < 0 {\n\t\treturn \"\"\n\t}\n\n\treturn strs[minIndex][:i+1]\n}\n\n```","slug":"最长公共前缀","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395q000yp0pva5sl4o56","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串 “”。</p>\n<span id=\"more\"></span>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func longestCommonPrefix(strs []string) string &#123;</span><br><span class=\"line\">\tif len(strs) == 1 &#123;</span><br><span class=\"line\">\t\treturn strs[0]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tminLength := len(strs[0])</span><br><span class=\"line\">\tminIndex := 0</span><br><span class=\"line\">\tfor i := 0; i &lt; len(strs); i++ &#123;</span><br><span class=\"line\">\t\tif len(strs[i]) &lt; minLength &#123;</span><br><span class=\"line\">\t\t\tminLength = len(strs[i])</span><br><span class=\"line\">\t\t\tminIndex = i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\ti := minLength - 1</span><br><span class=\"line\">\tfor ; i &gt;= 0; i-- &#123;</span><br><span class=\"line\">\t\tboolVar := true</span><br><span class=\"line\">\t\tfor j := 0; j &lt; len(strs); j++ &#123;</span><br><span class=\"line\">\t\t\tif strs[j][:i+1] != strs[minIndex][:i+1] &#123;</span><br><span class=\"line\">\t\t\t\tboolVar = false</span><br><span class=\"line\">\t\t\t\tbreak</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif boolVar &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif i &lt; 0 &#123;</span><br><span class=\"line\">\t\treturn &quot;&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn strs[minIndex][:i+1]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串 “”。</p>","more":"<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func longestCommonPrefix(strs []string) string &#123;</span><br><span class=\"line\">\tif len(strs) == 1 &#123;</span><br><span class=\"line\">\t\treturn strs[0]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tminLength := len(strs[0])</span><br><span class=\"line\">\tminIndex := 0</span><br><span class=\"line\">\tfor i := 0; i &lt; len(strs); i++ &#123;</span><br><span class=\"line\">\t\tif len(strs[i]) &lt; minLength &#123;</span><br><span class=\"line\">\t\t\tminLength = len(strs[i])</span><br><span class=\"line\">\t\t\tminIndex = i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\ti := minLength - 1</span><br><span class=\"line\">\tfor ; i &gt;= 0; i-- &#123;</span><br><span class=\"line\">\t\tboolVar := true</span><br><span class=\"line\">\t\tfor j := 0; j &lt; len(strs); j++ &#123;</span><br><span class=\"line\">\t\t\tif strs[j][:i+1] != strs[minIndex][:i+1] &#123;</span><br><span class=\"line\">\t\t\t\tboolVar = false</span><br><span class=\"line\">\t\t\t\tbreak</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif boolVar &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif i &lt; 0 &#123;</span><br><span class=\"line\">\t\treturn &quot;&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn strs[minIndex][:i+1]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"罗马数字转整数","date":"2021-11-21T09:23:42.000Z","_content":"\n## 题目\n\n罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。\n<!--more-->\n```\n字符          数值\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n```\n例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：\n\nI 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。\nX 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 \nC 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。\n给定一个罗马数字，将其转换成整数。\n\n\n## 解法\n\n```\nfunc romanToInt(s string) int {\n    bytes := []byte(s)\n\n\tresult := 0\n\tfor i := 0; i < len(bytes); {\n\t\tc := bytes[i]\n\t\tif i == len(bytes) -1 {\n\t\t\tif c == 'I' {\n\t\t\t\tresult += 1\n\t\t\t} else if c == 'X' {\n\t\t\t\tresult += 10\n\t\t\t} else if c == 'C' {\n\t\t\t\tresult += 100\n\t\t\t} else if c == 'V' {\n\t\t\t\tresult += 5\n\t\t\t} else if c == 'L' {\n\t\t\t\tresult += 50\n\t\t\t} else if c == 'D' {\n\t\t\t\tresult += 500\n\t\t\t} else if c == 'M' {\n\t\t\t\tresult += 1000\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tif c == 'I' {\n\t\t\tif bytes[i + 1] == 'V'  {\n\t\t\t\tresult += 4\n\t\t\t\ti +=2\n\t\t\t} else if bytes[i + 1] == 'X' {\n\t\t\t\tresult += 9\n\t\t\t\ti += 2\n\t\t\t} else {\n\t\t\t\tresult += 1\n\t\t\t\ti += 1\n\t\t\t}\n\t\t} else if c == 'X' {\n\t\t\tif bytes[i + 1] == 'L'  {\n\t\t\t\tresult += 40\n\t\t\t\ti +=2\n\t\t\t} else if bytes[i + 1] == 'C' {\n\t\t\t\tresult += 90\n\t\t\t\ti += 2\n\t\t\t} else {\n\t\t\t\tresult += 10\n\t\t\t\ti += 1\n\t\t\t}\n\t\t} else if c == 'C' {\n\t\t\tif bytes[i + 1] == 'D'  {\n\t\t\t\tresult += 400\n\t\t\t\ti +=2\n\t\t\t} else if bytes[i + 1] == 'M' {\n\t\t\t\tresult += 900\n\t\t\t\ti += 2\n\t\t\t} else {\n\t\t\t\tresult += 100\n\t\t\t\ti += 1\n\t\t\t}\n\t\t} else if c == 'V' {\n\t\t\tresult += 5\n\t\t\ti += 1\n\t\t} else if c == 'L' {\n\t\t\tresult += 50\n\t\t\ti += 1\n\t\t} else if c == 'D' {\n\t\t\tresult += 500\n\t\t\ti += 1\n\t\t} else if c == 'M' {\n\t\t\tresult += 1000\n\t\t\ti += 1\n\t\t}\n\t}\n\n\treturn result\n}\n```\n","source":"_posts/罗马数字转整数.md","raw":"---\ntitle: 罗马数字转整数\ndate: 2021-11-21 17:23:42\ntags: 算法\n---\n\n## 题目\n\n罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。\n<!--more-->\n```\n字符          数值\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n```\n例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：\n\nI 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。\nX 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 \nC 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。\n给定一个罗马数字，将其转换成整数。\n\n\n## 解法\n\n```\nfunc romanToInt(s string) int {\n    bytes := []byte(s)\n\n\tresult := 0\n\tfor i := 0; i < len(bytes); {\n\t\tc := bytes[i]\n\t\tif i == len(bytes) -1 {\n\t\t\tif c == 'I' {\n\t\t\t\tresult += 1\n\t\t\t} else if c == 'X' {\n\t\t\t\tresult += 10\n\t\t\t} else if c == 'C' {\n\t\t\t\tresult += 100\n\t\t\t} else if c == 'V' {\n\t\t\t\tresult += 5\n\t\t\t} else if c == 'L' {\n\t\t\t\tresult += 50\n\t\t\t} else if c == 'D' {\n\t\t\t\tresult += 500\n\t\t\t} else if c == 'M' {\n\t\t\t\tresult += 1000\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tif c == 'I' {\n\t\t\tif bytes[i + 1] == 'V'  {\n\t\t\t\tresult += 4\n\t\t\t\ti +=2\n\t\t\t} else if bytes[i + 1] == 'X' {\n\t\t\t\tresult += 9\n\t\t\t\ti += 2\n\t\t\t} else {\n\t\t\t\tresult += 1\n\t\t\t\ti += 1\n\t\t\t}\n\t\t} else if c == 'X' {\n\t\t\tif bytes[i + 1] == 'L'  {\n\t\t\t\tresult += 40\n\t\t\t\ti +=2\n\t\t\t} else if bytes[i + 1] == 'C' {\n\t\t\t\tresult += 90\n\t\t\t\ti += 2\n\t\t\t} else {\n\t\t\t\tresult += 10\n\t\t\t\ti += 1\n\t\t\t}\n\t\t} else if c == 'C' {\n\t\t\tif bytes[i + 1] == 'D'  {\n\t\t\t\tresult += 400\n\t\t\t\ti +=2\n\t\t\t} else if bytes[i + 1] == 'M' {\n\t\t\t\tresult += 900\n\t\t\t\ti += 2\n\t\t\t} else {\n\t\t\t\tresult += 100\n\t\t\t\ti += 1\n\t\t\t}\n\t\t} else if c == 'V' {\n\t\t\tresult += 5\n\t\t\ti += 1\n\t\t} else if c == 'L' {\n\t\t\tresult += 50\n\t\t\ti += 1\n\t\t} else if c == 'D' {\n\t\t\tresult += 500\n\t\t\ti += 1\n\t\t} else if c == 'M' {\n\t\t\tresult += 1000\n\t\t\ti += 1\n\t\t}\n\t}\n\n\treturn result\n}\n```\n","slug":"罗马数字转整数","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395q000zp0pva4i14nr9","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。<br><span id=\"more\"></span><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符          数值</span><br><span class=\"line\">I             1</span><br><span class=\"line\">V             5</span><br><span class=\"line\">X             10</span><br><span class=\"line\">L             50</span><br><span class=\"line\">C             100</span><br><span class=\"line\">D             500</span><br><span class=\"line\">M             1000</span><br></pre></td></tr></table></figure><br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>\n<p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func romanToInt(s string) int &#123;</span><br><span class=\"line\">    bytes := []byte(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\tresult := 0</span><br><span class=\"line\">\tfor i := 0; i &lt; len(bytes); &#123;</span><br><span class=\"line\">\t\tc := bytes[i]</span><br><span class=\"line\">\t\tif i == len(bytes) -1 &#123;</span><br><span class=\"line\">\t\t\tif c == &#x27;I&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 1</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;X&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 10</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;C&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 100</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;V&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 5</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;L&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 50</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;D&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 500</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;M&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 1000</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif c == &#x27;I&#x27; &#123;</span><br><span class=\"line\">\t\t\tif bytes[i + 1] == &#x27;V&#x27;  &#123;</span><br><span class=\"line\">\t\t\t\tresult += 4</span><br><span class=\"line\">\t\t\t\ti +=2</span><br><span class=\"line\">\t\t\t&#125; else if bytes[i + 1] == &#x27;X&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 9</span><br><span class=\"line\">\t\t\t\ti += 2</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tresult += 1</span><br><span class=\"line\">\t\t\t\ti += 1</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;X&#x27; &#123;</span><br><span class=\"line\">\t\t\tif bytes[i + 1] == &#x27;L&#x27;  &#123;</span><br><span class=\"line\">\t\t\t\tresult += 40</span><br><span class=\"line\">\t\t\t\ti +=2</span><br><span class=\"line\">\t\t\t&#125; else if bytes[i + 1] == &#x27;C&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 90</span><br><span class=\"line\">\t\t\t\ti += 2</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tresult += 10</span><br><span class=\"line\">\t\t\t\ti += 1</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;C&#x27; &#123;</span><br><span class=\"line\">\t\t\tif bytes[i + 1] == &#x27;D&#x27;  &#123;</span><br><span class=\"line\">\t\t\t\tresult += 400</span><br><span class=\"line\">\t\t\t\ti +=2</span><br><span class=\"line\">\t\t\t&#125; else if bytes[i + 1] == &#x27;M&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 900</span><br><span class=\"line\">\t\t\t\ti += 2</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tresult += 100</span><br><span class=\"line\">\t\t\t\ti += 1</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;V&#x27; &#123;</span><br><span class=\"line\">\t\t\tresult += 5</span><br><span class=\"line\">\t\t\ti += 1</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;L&#x27; &#123;</span><br><span class=\"line\">\t\t\tresult += 50</span><br><span class=\"line\">\t\t\ti += 1</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;D&#x27; &#123;</span><br><span class=\"line\">\t\t\tresult += 500</span><br><span class=\"line\">\t\t\ti += 1</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;M&#x27; &#123;</span><br><span class=\"line\">\t\t\tresult += 1000</span><br><span class=\"line\">\t\t\ti += 1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。<br>","more":"<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符          数值</span><br><span class=\"line\">I             1</span><br><span class=\"line\">V             5</span><br><span class=\"line\">X             10</span><br><span class=\"line\">L             50</span><br><span class=\"line\">C             100</span><br><span class=\"line\">D             500</span><br><span class=\"line\">M             1000</span><br></pre></td></tr></table></figure><br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>\n<p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func romanToInt(s string) int &#123;</span><br><span class=\"line\">    bytes := []byte(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\tresult := 0</span><br><span class=\"line\">\tfor i := 0; i &lt; len(bytes); &#123;</span><br><span class=\"line\">\t\tc := bytes[i]</span><br><span class=\"line\">\t\tif i == len(bytes) -1 &#123;</span><br><span class=\"line\">\t\t\tif c == &#x27;I&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 1</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;X&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 10</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;C&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 100</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;V&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 5</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;L&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 50</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;D&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 500</span><br><span class=\"line\">\t\t\t&#125; else if c == &#x27;M&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 1000</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif c == &#x27;I&#x27; &#123;</span><br><span class=\"line\">\t\t\tif bytes[i + 1] == &#x27;V&#x27;  &#123;</span><br><span class=\"line\">\t\t\t\tresult += 4</span><br><span class=\"line\">\t\t\t\ti +=2</span><br><span class=\"line\">\t\t\t&#125; else if bytes[i + 1] == &#x27;X&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 9</span><br><span class=\"line\">\t\t\t\ti += 2</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tresult += 1</span><br><span class=\"line\">\t\t\t\ti += 1</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;X&#x27; &#123;</span><br><span class=\"line\">\t\t\tif bytes[i + 1] == &#x27;L&#x27;  &#123;</span><br><span class=\"line\">\t\t\t\tresult += 40</span><br><span class=\"line\">\t\t\t\ti +=2</span><br><span class=\"line\">\t\t\t&#125; else if bytes[i + 1] == &#x27;C&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 90</span><br><span class=\"line\">\t\t\t\ti += 2</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tresult += 10</span><br><span class=\"line\">\t\t\t\ti += 1</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;C&#x27; &#123;</span><br><span class=\"line\">\t\t\tif bytes[i + 1] == &#x27;D&#x27;  &#123;</span><br><span class=\"line\">\t\t\t\tresult += 400</span><br><span class=\"line\">\t\t\t\ti +=2</span><br><span class=\"line\">\t\t\t&#125; else if bytes[i + 1] == &#x27;M&#x27; &#123;</span><br><span class=\"line\">\t\t\t\tresult += 900</span><br><span class=\"line\">\t\t\t\ti += 2</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tresult += 100</span><br><span class=\"line\">\t\t\t\ti += 1</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;V&#x27; &#123;</span><br><span class=\"line\">\t\t\tresult += 5</span><br><span class=\"line\">\t\t\ti += 1</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;L&#x27; &#123;</span><br><span class=\"line\">\t\t\tresult += 50</span><br><span class=\"line\">\t\t\ti += 1</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;D&#x27; &#123;</span><br><span class=\"line\">\t\t\tresult += 500</span><br><span class=\"line\">\t\t\ti += 1</span><br><span class=\"line\">\t\t&#125; else if c == &#x27;M&#x27; &#123;</span><br><span class=\"line\">\t\t\tresult += 1000</span><br><span class=\"line\">\t\t\ti += 1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"有效的括号","date":"2021-11-28T05:37:37.000Z","_content":"\n## 题目\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n<!--more-->\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n## 解法\n\n```\nfunc isValid(s string) bool {\n    brakets := []byte(s)\n\tstack := make([]byte, len(brakets))\n\tstack[0] = brakets[0]\n\tindex := 1\n\tfor i := 1; i < len(brakets); i++ {\n\t\tif brakets[i] == ')' && index - 1 >= 0 && stack[index - 1] == '(' {\n\t\t\tindex -= 1\n\t\t\tcontinue\n\t\t}\n\t\tif brakets[i] == ']' && index - 1 >= 0 && stack[index - 1] == '[' {\n\t\t\tindex -= 1\n\t\t\tcontinue\n\t\t}\n\n\t\tif brakets[i] == '}' && index - 1 >= 0 && stack[index - 1] == '{' {\n\t\t\tindex -= 1\n\t\t\tcontinue\n\t\t}\n\n\t\tstack[index] = brakets[i]\n\t\tindex += 1\n\t}\n\n\treturn index == 0\n}\n```\n","source":"_posts/有效的括号.md","raw":"---\ntitle: 有效的括号\ndate: 2021-11-28 13:37:37\ntags: 算法\n---\n\n## 题目\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n<!--more-->\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n## 解法\n\n```\nfunc isValid(s string) bool {\n    brakets := []byte(s)\n\tstack := make([]byte, len(brakets))\n\tstack[0] = brakets[0]\n\tindex := 1\n\tfor i := 1; i < len(brakets); i++ {\n\t\tif brakets[i] == ')' && index - 1 >= 0 && stack[index - 1] == '(' {\n\t\t\tindex -= 1\n\t\t\tcontinue\n\t\t}\n\t\tif brakets[i] == ']' && index - 1 >= 0 && stack[index - 1] == '[' {\n\t\t\tindex -= 1\n\t\t\tcontinue\n\t\t}\n\n\t\tif brakets[i] == '}' && index - 1 >= 0 && stack[index - 1] == '{' {\n\t\t\tindex -= 1\n\t\t\tcontinue\n\t\t}\n\n\t\tstack[index] = brakets[i]\n\t\tindex += 1\n\t}\n\n\treturn index == 0\n}\n```\n","slug":"有效的括号","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395r0011p0pvh4lc4tr6","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>\n<span id=\"more\"></span>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func isValid(s string) bool &#123;</span><br><span class=\"line\">    brakets := []byte(s)</span><br><span class=\"line\">\tstack := make([]byte, len(brakets))</span><br><span class=\"line\">\tstack[0] = brakets[0]</span><br><span class=\"line\">\tindex := 1</span><br><span class=\"line\">\tfor i := 1; i &lt; len(brakets); i++ &#123;</span><br><span class=\"line\">\t\tif brakets[i] == &#x27;)&#x27; &amp;&amp; index - 1 &gt;= 0 &amp;&amp; stack[index - 1] == &#x27;(&#x27; &#123;</span><br><span class=\"line\">\t\t\tindex -= 1</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif brakets[i] == &#x27;]&#x27; &amp;&amp; index - 1 &gt;= 0 &amp;&amp; stack[index - 1] == &#x27;[&#x27; &#123;</span><br><span class=\"line\">\t\t\tindex -= 1</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif brakets[i] == &#x27;&#125;&#x27; &amp;&amp; index - 1 &gt;= 0 &amp;&amp; stack[index - 1] == &#x27;&#123;&#x27; &#123;</span><br><span class=\"line\">\t\t\tindex -= 1</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstack[index] = brakets[i]</span><br><span class=\"line\">\t\tindex += 1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn index == 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>","more":"<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func isValid(s string) bool &#123;</span><br><span class=\"line\">    brakets := []byte(s)</span><br><span class=\"line\">\tstack := make([]byte, len(brakets))</span><br><span class=\"line\">\tstack[0] = brakets[0]</span><br><span class=\"line\">\tindex := 1</span><br><span class=\"line\">\tfor i := 1; i &lt; len(brakets); i++ &#123;</span><br><span class=\"line\">\t\tif brakets[i] == &#x27;)&#x27; &amp;&amp; index - 1 &gt;= 0 &amp;&amp; stack[index - 1] == &#x27;(&#x27; &#123;</span><br><span class=\"line\">\t\t\tindex -= 1</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif brakets[i] == &#x27;]&#x27; &amp;&amp; index - 1 &gt;= 0 &amp;&amp; stack[index - 1] == &#x27;[&#x27; &#123;</span><br><span class=\"line\">\t\t\tindex -= 1</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif brakets[i] == &#x27;&#125;&#x27; &amp;&amp; index - 1 &gt;= 0 &amp;&amp; stack[index - 1] == &#x27;&#123;&#x27; &#123;</span><br><span class=\"line\">\t\t\tindex -= 1</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstack[index] = brakets[i]</span><br><span class=\"line\">\t\tindex += 1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn index == 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"薛兆丰经济学讲义读书笔记1","date":"2019-03-06T15:24:27.000Z","_content":"#\n* 阿曼·阿尔钦\n  * 经济学研究的是在什么样的情况下，人能够存活下来，而如果条件发生了改变，人们存活的情况又会发生怎样的改变。\n\n### 006讲 亚当·斯密的人性观\n* 人性自私推动社会进步；\n* 人性自私，同时具有同情心和爱心；\n* 人的爱心有限，随着距离拉远而减弱；\n* 仅靠爱心不够，陌生人互助需要市场协调。市场是一个陌生人和陌生人打交道的地方，是一个陌生人服务陌生人的地方。\n* 人际互动二分法：小圈子靠爱心，大世界靠市场；不要再家庭、朋友圈里斤斤计较，过分讲究市场规则，也不要好在市场上强求陌生人表现出不切实际的爱心；\n\n<!--more-->\n\n### 007讲 铅笔的故事\n* 伦纳德·里德《我，铅笔的故事》写了一个铅笔生产的故事，成千上万的人被市场这个无形的手联系到一起，协作生产出来了铅笔，这些人也许彼此不认识，甚至彼此厌恶，也不知道自己从事的事情跟生产铅笔有什么关系；\n\n### 008讲 市场是最大的慈善\n* 世界银行扶贫失败：世界银行累计向非洲援助2.3兆美元，却没有改变非洲儿童死亡率高的问题，理论上如果每个儿童能注射一下12美分的疫苗或者每个妈妈能拿到3美元的援助金，非洲儿童的死亡率会减少一半，但是这些援助却没有达到上述效果；\n  * 缺乏反馈机制；\n  * 委托代理问题，代理人认为花的不是自己的钱\n  * 所托非人问题，慈善基金划拨给早就贫困的地方政务；\n  * 养懒汉效应，扶贫造成懒惰；\n\n### 009讲 稀缺\n* 稀缺是经济学的一个基础，稀缺是指一切有形或无形物质的稀缺，如矿产、水、空气、地理位置、人与人间的信任等；\n\n* 造成稀缺的原因：\n  * 我们想要的东西别人也想要；\n  * 人的需求在不断变化，不断升级；\n\n### 010讲 选择和歧视\n* 稀缺 -> 对有限资源的选择 -> 标准 -> 区别对待 -> 歧视\n* 稀缺、选择、区别对待和歧视四者一体，只要其中一个存在，其他三个必然存在；\n* 歧视的根本原因\n  * 偏好；\n  * 信息不对称；\n* 歧视必然要付出代价\n","source":"_posts/薛兆丰经济学讲义读书笔记1.md","raw":"---\ntitle: 薛兆丰经济学讲义读书笔记1\ndate: 2019-03-06 23:24:27\ncategories:\n- reading\n---\n#\n* 阿曼·阿尔钦\n  * 经济学研究的是在什么样的情况下，人能够存活下来，而如果条件发生了改变，人们存活的情况又会发生怎样的改变。\n\n### 006讲 亚当·斯密的人性观\n* 人性自私推动社会进步；\n* 人性自私，同时具有同情心和爱心；\n* 人的爱心有限，随着距离拉远而减弱；\n* 仅靠爱心不够，陌生人互助需要市场协调。市场是一个陌生人和陌生人打交道的地方，是一个陌生人服务陌生人的地方。\n* 人际互动二分法：小圈子靠爱心，大世界靠市场；不要再家庭、朋友圈里斤斤计较，过分讲究市场规则，也不要好在市场上强求陌生人表现出不切实际的爱心；\n\n<!--more-->\n\n### 007讲 铅笔的故事\n* 伦纳德·里德《我，铅笔的故事》写了一个铅笔生产的故事，成千上万的人被市场这个无形的手联系到一起，协作生产出来了铅笔，这些人也许彼此不认识，甚至彼此厌恶，也不知道自己从事的事情跟生产铅笔有什么关系；\n\n### 008讲 市场是最大的慈善\n* 世界银行扶贫失败：世界银行累计向非洲援助2.3兆美元，却没有改变非洲儿童死亡率高的问题，理论上如果每个儿童能注射一下12美分的疫苗或者每个妈妈能拿到3美元的援助金，非洲儿童的死亡率会减少一半，但是这些援助却没有达到上述效果；\n  * 缺乏反馈机制；\n  * 委托代理问题，代理人认为花的不是自己的钱\n  * 所托非人问题，慈善基金划拨给早就贫困的地方政务；\n  * 养懒汉效应，扶贫造成懒惰；\n\n### 009讲 稀缺\n* 稀缺是经济学的一个基础，稀缺是指一切有形或无形物质的稀缺，如矿产、水、空气、地理位置、人与人间的信任等；\n\n* 造成稀缺的原因：\n  * 我们想要的东西别人也想要；\n  * 人的需求在不断变化，不断升级；\n\n### 010讲 选择和歧视\n* 稀缺 -> 对有限资源的选择 -> 标准 -> 区别对待 -> 歧视\n* 稀缺、选择、区别对待和歧视四者一体，只要其中一个存在，其他三个必然存在；\n* 歧视的根本原因\n  * 偏好；\n  * 信息不对称；\n* 歧视必然要付出代价\n","slug":"薛兆丰经济学讲义读书笔记1","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395s0013p0pv4t56erkn","content":"<p>#</p>\n<ul>\n<li>阿曼·阿尔钦<ul>\n<li>经济学研究的是在什么样的情况下，人能够存活下来，而如果条件发生了改变，人们存活的情况又会发生怎样的改变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"006讲-亚当·斯密的人性观\"><a href=\"#006讲-亚当·斯密的人性观\" class=\"headerlink\" title=\"006讲 亚当·斯密的人性观\"></a>006讲 亚当·斯密的人性观</h3><ul>\n<li>人性自私推动社会进步；</li>\n<li>人性自私，同时具有同情心和爱心；</li>\n<li>人的爱心有限，随着距离拉远而减弱；</li>\n<li>仅靠爱心不够，陌生人互助需要市场协调。市场是一个陌生人和陌生人打交道的地方，是一个陌生人服务陌生人的地方。</li>\n<li>人际互动二分法：小圈子靠爱心，大世界靠市场；不要再家庭、朋友圈里斤斤计较，过分讲究市场规则，也不要好在市场上强求陌生人表现出不切实际的爱心；</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"007讲-铅笔的故事\"><a href=\"#007讲-铅笔的故事\" class=\"headerlink\" title=\"007讲 铅笔的故事\"></a>007讲 铅笔的故事</h3><ul>\n<li>伦纳德·里德《我，铅笔的故事》写了一个铅笔生产的故事，成千上万的人被市场这个无形的手联系到一起，协作生产出来了铅笔，这些人也许彼此不认识，甚至彼此厌恶，也不知道自己从事的事情跟生产铅笔有什么关系；</li>\n</ul>\n<h3 id=\"008讲-市场是最大的慈善\"><a href=\"#008讲-市场是最大的慈善\" class=\"headerlink\" title=\"008讲 市场是最大的慈善\"></a>008讲 市场是最大的慈善</h3><ul>\n<li>世界银行扶贫失败：世界银行累计向非洲援助2.3兆美元，却没有改变非洲儿童死亡率高的问题，理论上如果每个儿童能注射一下12美分的疫苗或者每个妈妈能拿到3美元的援助金，非洲儿童的死亡率会减少一半，但是这些援助却没有达到上述效果；<ul>\n<li>缺乏反馈机制；</li>\n<li>委托代理问题，代理人认为花的不是自己的钱</li>\n<li>所托非人问题，慈善基金划拨给早就贫困的地方政务；</li>\n<li>养懒汉效应，扶贫造成懒惰；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"009讲-稀缺\"><a href=\"#009讲-稀缺\" class=\"headerlink\" title=\"009讲 稀缺\"></a>009讲 稀缺</h3><ul>\n<li><p>稀缺是经济学的一个基础，稀缺是指一切有形或无形物质的稀缺，如矿产、水、空气、地理位置、人与人间的信任等；</p>\n</li>\n<li><p>造成稀缺的原因：</p>\n<ul>\n<li>我们想要的东西别人也想要；</li>\n<li>人的需求在不断变化，不断升级；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"010讲-选择和歧视\"><a href=\"#010讲-选择和歧视\" class=\"headerlink\" title=\"010讲 选择和歧视\"></a>010讲 选择和歧视</h3><ul>\n<li>稀缺 -&gt; 对有限资源的选择 -&gt; 标准 -&gt; 区别对待 -&gt; 歧视</li>\n<li>稀缺、选择、区别对待和歧视四者一体，只要其中一个存在，其他三个必然存在；</li>\n<li>歧视的根本原因<ul>\n<li>偏好；</li>\n<li>信息不对称；</li>\n</ul>\n</li>\n<li>歧视必然要付出代价</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>#</p>\n<ul>\n<li>阿曼·阿尔钦<ul>\n<li>经济学研究的是在什么样的情况下，人能够存活下来，而如果条件发生了改变，人们存活的情况又会发生怎样的改变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"006讲-亚当·斯密的人性观\"><a href=\"#006讲-亚当·斯密的人性观\" class=\"headerlink\" title=\"006讲 亚当·斯密的人性观\"></a>006讲 亚当·斯密的人性观</h3><ul>\n<li>人性自私推动社会进步；</li>\n<li>人性自私，同时具有同情心和爱心；</li>\n<li>人的爱心有限，随着距离拉远而减弱；</li>\n<li>仅靠爱心不够，陌生人互助需要市场协调。市场是一个陌生人和陌生人打交道的地方，是一个陌生人服务陌生人的地方。</li>\n<li>人际互动二分法：小圈子靠爱心，大世界靠市场；不要再家庭、朋友圈里斤斤计较，过分讲究市场规则，也不要好在市场上强求陌生人表现出不切实际的爱心；</li>\n</ul>","more":"<h3 id=\"007讲-铅笔的故事\"><a href=\"#007讲-铅笔的故事\" class=\"headerlink\" title=\"007讲 铅笔的故事\"></a>007讲 铅笔的故事</h3><ul>\n<li>伦纳德·里德《我，铅笔的故事》写了一个铅笔生产的故事，成千上万的人被市场这个无形的手联系到一起，协作生产出来了铅笔，这些人也许彼此不认识，甚至彼此厌恶，也不知道自己从事的事情跟生产铅笔有什么关系；</li>\n</ul>\n<h3 id=\"008讲-市场是最大的慈善\"><a href=\"#008讲-市场是最大的慈善\" class=\"headerlink\" title=\"008讲 市场是最大的慈善\"></a>008讲 市场是最大的慈善</h3><ul>\n<li>世界银行扶贫失败：世界银行累计向非洲援助2.3兆美元，却没有改变非洲儿童死亡率高的问题，理论上如果每个儿童能注射一下12美分的疫苗或者每个妈妈能拿到3美元的援助金，非洲儿童的死亡率会减少一半，但是这些援助却没有达到上述效果；<ul>\n<li>缺乏反馈机制；</li>\n<li>委托代理问题，代理人认为花的不是自己的钱</li>\n<li>所托非人问题，慈善基金划拨给早就贫困的地方政务；</li>\n<li>养懒汉效应，扶贫造成懒惰；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"009讲-稀缺\"><a href=\"#009讲-稀缺\" class=\"headerlink\" title=\"009讲 稀缺\"></a>009讲 稀缺</h3><ul>\n<li><p>稀缺是经济学的一个基础，稀缺是指一切有形或无形物质的稀缺，如矿产、水、空气、地理位置、人与人间的信任等；</p>\n</li>\n<li><p>造成稀缺的原因：</p>\n<ul>\n<li>我们想要的东西别人也想要；</li>\n<li>人的需求在不断变化，不断升级；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"010讲-选择和歧视\"><a href=\"#010讲-选择和歧视\" class=\"headerlink\" title=\"010讲 选择和歧视\"></a>010讲 选择和歧视</h3><ul>\n<li>稀缺 -&gt; 对有限资源的选择 -&gt; 标准 -&gt; 区别对待 -&gt; 歧视</li>\n<li>稀缺、选择、区别对待和歧视四者一体，只要其中一个存在，其他三个必然存在；</li>\n<li>歧视的根本原因<ul>\n<li>偏好；</li>\n<li>信息不对称；</li>\n</ul>\n</li>\n<li>歧视必然要付出代价</li>\n</ul>"},{"title":"薛兆丰经济学讲义读书笔记2","date":"2019-03-10T13:51:12.000Z","_content":"## 成本 -- 不要只盯着钱\n<!--more-->\n* 企业家是资源配置的中间人；\n* 成本是放弃了的最大的代价，即如果一个资源有若干个选项时，被选中的那个，它的成本就是所有放弃了的选项中价值最高的那个。\n  * 负面的感受不是成本；\n  * 你的成本由别人决定的；\n* 个人的职业范围是由别人决定的：\n  * 你拥有你的生命，但是你的生命是怎么度过的，你的职业是怎么选择的，很大程度上是由社会生其他人决定的。\n* 货币成本vs全部成本\n  * 货币成本不是全部成本，全部成本应该包括所有可能的成本；\n* **中间商赚差价，会让商品更便宜**\n  * 没有了中间商，货币成本确实降低了，但是其他成本会上去。比如花时间去地里摘蔬菜，或者去屠宰场买猪肉，花费的时间和其他成本更高。\n* 从成本的角度理解赢利与亏损\n  * 盈利和亏损都是意外；\n  * 盈利提高了未来使用的成本\n  * 亏损会降低资源使用成本；\n* 最终产品的工序决定原材料的成本\n  * 产品价格形成过程的理论\n    * 成本决定论\n      * 理论逻辑错误：如果产品成本越高，售价越高，那么企业家要赚取更多的利润，越高努力推高产品成本，从而提高售价；\n    * 供需决定论\n      * 供需关系决定商品价格，商品价格决定资源成本；\n* “租”是对资产的付费\n  * 租是旱涝保收的收入，白赚的收入\n* 寻租\n  * 寻租是指那些向政府争取优惠政策，让自己得到好处，同时导致社会总资源发生耗散的行为。\n\n### 科斯定律\n* 社会成本问题\n  * 所有的伤害都是相互的；\n  * 谁避免意外成本最低，谁的责任就最大；\n  * 科斯定律：在交易费为零或足够低的情况下，不管资源最初的主人是谁，资源都同样会流到价值最高的用途上去。\n","source":"_posts/薛兆丰经济学讲义读书笔记2.md","raw":"---\ntitle: 薛兆丰经济学讲义读书笔记2\ndate: 2019-03-10 21:51:12\ntags:\n---\n## 成本 -- 不要只盯着钱\n<!--more-->\n* 企业家是资源配置的中间人；\n* 成本是放弃了的最大的代价，即如果一个资源有若干个选项时，被选中的那个，它的成本就是所有放弃了的选项中价值最高的那个。\n  * 负面的感受不是成本；\n  * 你的成本由别人决定的；\n* 个人的职业范围是由别人决定的：\n  * 你拥有你的生命，但是你的生命是怎么度过的，你的职业是怎么选择的，很大程度上是由社会生其他人决定的。\n* 货币成本vs全部成本\n  * 货币成本不是全部成本，全部成本应该包括所有可能的成本；\n* **中间商赚差价，会让商品更便宜**\n  * 没有了中间商，货币成本确实降低了，但是其他成本会上去。比如花时间去地里摘蔬菜，或者去屠宰场买猪肉，花费的时间和其他成本更高。\n* 从成本的角度理解赢利与亏损\n  * 盈利和亏损都是意外；\n  * 盈利提高了未来使用的成本\n  * 亏损会降低资源使用成本；\n* 最终产品的工序决定原材料的成本\n  * 产品价格形成过程的理论\n    * 成本决定论\n      * 理论逻辑错误：如果产品成本越高，售价越高，那么企业家要赚取更多的利润，越高努力推高产品成本，从而提高售价；\n    * 供需决定论\n      * 供需关系决定商品价格，商品价格决定资源成本；\n* “租”是对资产的付费\n  * 租是旱涝保收的收入，白赚的收入\n* 寻租\n  * 寻租是指那些向政府争取优惠政策，让自己得到好处，同时导致社会总资源发生耗散的行为。\n\n### 科斯定律\n* 社会成本问题\n  * 所有的伤害都是相互的；\n  * 谁避免意外成本最低，谁的责任就最大；\n  * 科斯定律：在交易费为零或足够低的情况下，不管资源最初的主人是谁，资源都同样会流到价值最高的用途上去。\n","slug":"薛兆丰经济学讲义读书笔记2","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395u0015p0pvd1op4a8r","content":"<h2 id=\"成本-–-不要只盯着钱\"><a href=\"#成本-–-不要只盯着钱\" class=\"headerlink\" title=\"成本 – 不要只盯着钱\"></a>成本 – 不要只盯着钱</h2><span id=\"more\"></span>\n<ul>\n<li>企业家是资源配置的中间人；</li>\n<li>成本是放弃了的最大的代价，即如果一个资源有若干个选项时，被选中的那个，它的成本就是所有放弃了的选项中价值最高的那个。<ul>\n<li>负面的感受不是成本；</li>\n<li>你的成本由别人决定的；</li>\n</ul>\n</li>\n<li>个人的职业范围是由别人决定的：<ul>\n<li>你拥有你的生命，但是你的生命是怎么度过的，你的职业是怎么选择的，很大程度上是由社会生其他人决定的。</li>\n</ul>\n</li>\n<li>货币成本vs全部成本<ul>\n<li>货币成本不是全部成本，全部成本应该包括所有可能的成本；</li>\n</ul>\n</li>\n<li><strong>中间商赚差价，会让商品更便宜</strong><ul>\n<li>没有了中间商，货币成本确实降低了，但是其他成本会上去。比如花时间去地里摘蔬菜，或者去屠宰场买猪肉，花费的时间和其他成本更高。</li>\n</ul>\n</li>\n<li>从成本的角度理解赢利与亏损<ul>\n<li>盈利和亏损都是意外；</li>\n<li>盈利提高了未来使用的成本</li>\n<li>亏损会降低资源使用成本；</li>\n</ul>\n</li>\n<li>最终产品的工序决定原材料的成本<ul>\n<li>产品价格形成过程的理论<ul>\n<li>成本决定论<ul>\n<li>理论逻辑错误：如果产品成本越高，售价越高，那么企业家要赚取更多的利润，越高努力推高产品成本，从而提高售价；</li>\n</ul>\n</li>\n<li>供需决定论<ul>\n<li>供需关系决定商品价格，商品价格决定资源成本；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>“租”是对资产的付费<ul>\n<li>租是旱涝保收的收入，白赚的收入</li>\n</ul>\n</li>\n<li>寻租<ul>\n<li>寻租是指那些向政府争取优惠政策，让自己得到好处，同时导致社会总资源发生耗散的行为。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"科斯定律\"><a href=\"#科斯定律\" class=\"headerlink\" title=\"科斯定律\"></a>科斯定律</h3><ul>\n<li>社会成本问题<ul>\n<li>所有的伤害都是相互的；</li>\n<li>谁避免意外成本最低，谁的责任就最大；</li>\n<li>科斯定律：在交易费为零或足够低的情况下，不管资源最初的主人是谁，资源都同样会流到价值最高的用途上去。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"成本-–-不要只盯着钱\"><a href=\"#成本-–-不要只盯着钱\" class=\"headerlink\" title=\"成本 – 不要只盯着钱\"></a>成本 – 不要只盯着钱</h2>","more":"<ul>\n<li>企业家是资源配置的中间人；</li>\n<li>成本是放弃了的最大的代价，即如果一个资源有若干个选项时，被选中的那个，它的成本就是所有放弃了的选项中价值最高的那个。<ul>\n<li>负面的感受不是成本；</li>\n<li>你的成本由别人决定的；</li>\n</ul>\n</li>\n<li>个人的职业范围是由别人决定的：<ul>\n<li>你拥有你的生命，但是你的生命是怎么度过的，你的职业是怎么选择的，很大程度上是由社会生其他人决定的。</li>\n</ul>\n</li>\n<li>货币成本vs全部成本<ul>\n<li>货币成本不是全部成本，全部成本应该包括所有可能的成本；</li>\n</ul>\n</li>\n<li><strong>中间商赚差价，会让商品更便宜</strong><ul>\n<li>没有了中间商，货币成本确实降低了，但是其他成本会上去。比如花时间去地里摘蔬菜，或者去屠宰场买猪肉，花费的时间和其他成本更高。</li>\n</ul>\n</li>\n<li>从成本的角度理解赢利与亏损<ul>\n<li>盈利和亏损都是意外；</li>\n<li>盈利提高了未来使用的成本</li>\n<li>亏损会降低资源使用成本；</li>\n</ul>\n</li>\n<li>最终产品的工序决定原材料的成本<ul>\n<li>产品价格形成过程的理论<ul>\n<li>成本决定论<ul>\n<li>理论逻辑错误：如果产品成本越高，售价越高，那么企业家要赚取更多的利润，越高努力推高产品成本，从而提高售价；</li>\n</ul>\n</li>\n<li>供需决定论<ul>\n<li>供需关系决定商品价格，商品价格决定资源成本；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>“租”是对资产的付费<ul>\n<li>租是旱涝保收的收入，白赚的收入</li>\n</ul>\n</li>\n<li>寻租<ul>\n<li>寻租是指那些向政府争取优惠政策，让自己得到好处，同时导致社会总资源发生耗散的行为。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"科斯定律\"><a href=\"#科斯定律\" class=\"headerlink\" title=\"科斯定律\"></a>科斯定律</h3><ul>\n<li>社会成本问题<ul>\n<li>所有的伤害都是相互的；</li>\n<li>谁避免意外成本最低，谁的责任就最大；</li>\n<li>科斯定律：在交易费为零或足够低的情况下，不管资源最初的主人是谁，资源都同样会流到价值最高的用途上去。</li>\n</ul>\n</li>\n</ul>"},{"title":"陪护有感","date":"2021-11-20T07:17:18.000Z","_content":"\n上周父亲脑梗复发，回老家陪护了一周，深有感触，明白了什么叫病房里见证人心。我过去的时候跟父亲同病房的一共有6个人，之前更多，其中有两个病人给我的印象最深刻，体现了做子女的两个极端。\n\n<!----more---->\n\n其中一个是一位老太太，大概有七十多岁吧，两个儿子都不到医院，只有一个女儿陪着。儿子之所以都不来医院看望，据说是因为年轻的时候老人给老大修了房子而没有给老二修，因此老二对老人家很不满意。\n\n另一为是个老头，五保户，病情更严重，生活无法自理，吃喝拉撒全都在床上，两个侄子和侄媳妇轮流照顾他。从日常行为中可以看出侄子侄媳挺孝顺的，端屎端尿从无怨言。\n\n我想说的重点不仅仅是两位老人的待遇如此不同，而是为什么会有这么大的差异。我想，一个家庭的风气对后代的影响是巨大的。父母是孩子最好的老师，我想那位老头或者他同辈分的人对待他们的父母也是比较好的，进而影响子女后辈。\n\n有人认为人之初性本恶，后天环境无法改变人的本性；我则持相反观点，家庭和周围环境对一个人的成长至关重要，父母是孩子最好的老师，最好的教育方法就是以身作则，而不只是说教。","source":"_posts/陪护有感.md","raw":"---\ntitle: 陪护有感\ndate: 2021-11-20 15:17:18\ntags: 生活\n---\n\n上周父亲脑梗复发，回老家陪护了一周，深有感触，明白了什么叫病房里见证人心。我过去的时候跟父亲同病房的一共有6个人，之前更多，其中有两个病人给我的印象最深刻，体现了做子女的两个极端。\n\n<!----more---->\n\n其中一个是一位老太太，大概有七十多岁吧，两个儿子都不到医院，只有一个女儿陪着。儿子之所以都不来医院看望，据说是因为年轻的时候老人给老大修了房子而没有给老二修，因此老二对老人家很不满意。\n\n另一为是个老头，五保户，病情更严重，生活无法自理，吃喝拉撒全都在床上，两个侄子和侄媳妇轮流照顾他。从日常行为中可以看出侄子侄媳挺孝顺的，端屎端尿从无怨言。\n\n我想说的重点不仅仅是两位老人的待遇如此不同，而是为什么会有这么大的差异。我想，一个家庭的风气对后代的影响是巨大的。父母是孩子最好的老师，我想那位老头或者他同辈分的人对待他们的父母也是比较好的，进而影响子女后辈。\n\n有人认为人之初性本恶，后天环境无法改变人的本性；我则持相反观点，家庭和周围环境对一个人的成长至关重要，父母是孩子最好的老师，最好的教育方法就是以身作则，而不只是说教。","slug":"陪护有感","published":1,"updated":"2023-02-03T14:00:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8r395v0018p0pv5lpg9np9","content":"<p>上周父亲脑梗复发，回老家陪护了一周，深有感触，明白了什么叫病房里见证人心。我过去的时候跟父亲同病房的一共有6个人，之前更多，其中有两个病人给我的印象最深刻，体现了做子女的两个极端。</p>\n<!----more---->\n<p>其中一个是一位老太太，大概有七十多岁吧，两个儿子都不到医院，只有一个女儿陪着。儿子之所以都不来医院看望，据说是因为年轻的时候老人给老大修了房子而没有给老二修，因此老二对老人家很不满意。</p>\n<p>另一为是个老头，五保户，病情更严重，生活无法自理，吃喝拉撒全都在床上，两个侄子和侄媳妇轮流照顾他。从日常行为中可以看出侄子侄媳挺孝顺的，端屎端尿从无怨言。</p>\n<p>我想说的重点不仅仅是两位老人的待遇如此不同，而是为什么会有这么大的差异。我想，一个家庭的风气对后代的影响是巨大的。父母是孩子最好的老师，我想那位老头或者他同辈分的人对待他们的父母也是比较好的，进而影响子女后辈。</p>\n<p>有人认为人之初性本恶，后天环境无法改变人的本性；我则持相反观点，家庭和周围环境对一个人的成长至关重要，父母是孩子最好的老师，最好的教育方法就是以身作则，而不只是说教。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周父亲脑梗复发，回老家陪护了一周，深有感触，明白了什么叫病房里见证人心。我过去的时候跟父亲同病房的一共有6个人，之前更多，其中有两个病人给我的印象最深刻，体现了做子女的两个极端。</p>\n<!----more---->\n<p>其中一个是一位老太太，大概有七十多岁吧，两个儿子都不到医院，只有一个女儿陪着。儿子之所以都不来医院看望，据说是因为年轻的时候老人给老大修了房子而没有给老二修，因此老二对老人家很不满意。</p>\n<p>另一为是个老头，五保户，病情更严重，生活无法自理，吃喝拉撒全都在床上，两个侄子和侄媳妇轮流照顾他。从日常行为中可以看出侄子侄媳挺孝顺的，端屎端尿从无怨言。</p>\n<p>我想说的重点不仅仅是两位老人的待遇如此不同，而是为什么会有这么大的差异。我想，一个家庭的风气对后代的影响是巨大的。父母是孩子最好的老师，我想那位老头或者他同辈分的人对待他们的父母也是比较好的，进而影响子女后辈。</p>\n<p>有人认为人之初性本恶，后天环境无法改变人的本性；我则持相反观点，家庭和周围环境对一个人的成长至关重要，父母是孩子最好的老师，最好的教育方法就是以身作则，而不只是说教。</p>\n"}],"PostAsset":[{"_id":"source/_posts/20201108/20201108-27fff154.png","post":"cle8r39580003p0pv0brg6uny","slug":"20201108-27fff154.png","modified":1,"renderable":1},{"_id":"source/_posts/Network-Model-in-Kubernetes/Network-Model-in-Kubernetes-6c165903.png","post":"cle8r395b0007p0pv1mll2cbt","slug":"Network-Model-in-Kubernetes-6c165903.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-02d62faa.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-02d62faa.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-323364fe.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-323364fe.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-4afab240.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-4afab240.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-6cc5b0ce.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-6cc5b0ce.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-74a4dc02.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-74a4dc02.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-90b65a4a.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-90b65a4a.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-9a3a490b.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-9a3a490b.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-9bf039d8.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-9bf039d8.png","modified":1,"renderable":1},{"_id":"source/_posts/Service-And-Kube-proxy/Service-And-Kube-proxy-d314f07b.png","post":"cle8r395e000bp0pv4ka6da04","slug":"Service-And-Kube-proxy-d314f07b.png","modified":1,"renderable":1},{"_id":"source/_posts/合并两个有序链表/merge_ex1.jpeg","post":"cle8r395m000pp0pv4uqy66rq","slug":"merge_ex1.jpeg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cle8r395h000gp0pv8h3veaf8","category_id":"cle8r395j000kp0pvf0hd9hih","_id":"cle8r395p000up0pvhlvjhxqe"},{"post_id":"cle8r395s0013p0pv4t56erkn","category_id":"cle8r395v0017p0pvetb92mav","_id":"cle8r395x001dp0pv0p843jaq"}],"PostTag":[{"post_id":"cle8r39550001p0pv4nnx08qb","tag_id":"cle8r39590004p0pv9z773ih3","_id":"cle8r395e000ap0pv39j0319v"},{"post_id":"cle8r39580003p0pv0brg6uny","tag_id":"cle8r39590004p0pv9z773ih3","_id":"cle8r395g000ep0pv9mp695bc"},{"post_id":"cle8r395b0007p0pv1mll2cbt","tag_id":"cle8r395f000dp0pv8v8b4rdk","_id":"cle8r395j000jp0pv08ksa9yu"},{"post_id":"cle8r395e000bp0pv4ka6da04","tag_id":"cle8r395i000hp0pv3vtz5vhr","_id":"cle8r395m000op0pv06dzhg7f"},{"post_id":"cle8r395f000cp0pvcf6uh5xk","tag_id":"cle8r395l000mp0pvhg8lg99b","_id":"cle8r395o000sp0pv36644wyi"},{"post_id":"cle8r395g000fp0pvbwb69qv9","tag_id":"cle8r395n000qp0pv1pr21475","_id":"cle8r395q000xp0pv5zrp73rx"},{"post_id":"cle8r395h000gp0pv8h3veaf8","tag_id":"cle8r395p000wp0pvfngjbrmo","_id":"cle8r395s0012p0pv8fntf22l"},{"post_id":"cle8r395i000ip0pv8rmqasyq","tag_id":"cle8r395r0010p0pvhtdj8gy8","_id":"cle8r395v0016p0pvh3tp6w3x"},{"post_id":"cle8r395j000lp0pv6o32hml1","tag_id":"cle8r395r0010p0pvhtdj8gy8","_id":"cle8r395w001ap0pv8v2q56qy"},{"post_id":"cle8r395m000np0pvalciegyk","tag_id":"cle8r395w0019p0pv8wyz5r2d","_id":"cle8r395x001cp0pvb46mb2aw"},{"post_id":"cle8r395m000pp0pv4uqy66rq","tag_id":"cle8r395w001bp0pvbbsk7ofq","_id":"cle8r395x001fp0pvf8k29o99"},{"post_id":"cle8r395o000tp0pv28speyen","tag_id":"cle8r395w001bp0pvbbsk7ofq","_id":"cle8r395x001hp0pv52yt4tvq"},{"post_id":"cle8r395p000vp0pv3d8dfhkp","tag_id":"cle8r395w001bp0pvbbsk7ofq","_id":"cle8r395y001jp0pvhrpm4h6h"},{"post_id":"cle8r395q000yp0pva5sl4o56","tag_id":"cle8r395w001bp0pvbbsk7ofq","_id":"cle8r395y001lp0pvgk0wfktr"},{"post_id":"cle8r395q000zp0pva4i14nr9","tag_id":"cle8r395w001bp0pvbbsk7ofq","_id":"cle8r395z001np0pvac057j4l"},{"post_id":"cle8r395r0011p0pvh4lc4tr6","tag_id":"cle8r395w001bp0pvbbsk7ofq","_id":"cle8r395z001pp0pv0jul3h4t"},{"post_id":"cle8r395v0018p0pv5lpg9np9","tag_id":"cle8r395z001op0pv9qgv5v4t","_id":"cle8r395z001qp0pvfx2m74sh"}],"Tag":[{"name":"something of everyday","_id":"cle8r39590004p0pv9z773ih3"},{"name":"kubernetes Network","_id":"cle8r395f000dp0pv8v8b4rdk"},{"name":"service","_id":"cle8r395i000hp0pv3vtz5vhr"},{"name":"读书","_id":"cle8r395l000mp0pvhg8lg99b"},{"name":"golang","_id":"cle8r395n000qp0pv1pr21475"},{"name":"LeetCode","_id":"cle8r395p000wp0pvfngjbrmo"},{"name":"alogrithm","_id":"cle8r395r0010p0pvhtdj8gy8"},{"name":"linux perf tools","_id":"cle8r395w0019p0pv8wyz5r2d"},{"name":"算法","_id":"cle8r395w001bp0pvbbsk7ofq"},{"name":"生活","_id":"cle8r395z001op0pv9qgv5v4t"}]}}